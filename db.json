{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/JS中的原型和原型链.md","hash":"4c9432f622d2c6db8cec78b3d91feae099bc682c","modified":1699328160758},{"_id":"source/_posts/JS中的闭包.md","hash":"06d63da62e2452e1c89aa9fa57f5e0cb1104e4ce","modified":1699328160758},{"_id":"source/_posts/JS抽象语法树.md","hash":"33922c48c13c42263be255470e14f01faec4e664","modified":1699328160759},{"_id":"source/_posts/JS的垃圾回收机制.md","hash":"4c19ca922964942771cd59bfa5f518a7c13b3adb","modified":1699328160759},{"_id":"source/_posts/Node的事件循环机制.md","hash":"1d11e5a8d6388807d1a5446ac7e0b97f03125723","modified":1699328160759},{"_id":"source/_posts/Loader的执行顺序.md","hash":"958cd50ea8a46298ed135951fef95312c6cb3689","modified":1699328160759},{"_id":"source/_posts/Vue2.x的Virtual DOM.md","hash":"7a1a49c4211c8018125ee2eed6899ee0c2df8b84","modified":1699328160760},{"_id":"source/_posts/Vue2.x的nextTick实现原理.md","hash":"ad1d065602c30fab952c4d335f5d78861da3fec7","modified":1699328160760},{"_id":"source/_posts/Vue2.x的patch方法.md","hash":"76c7ad19848c206fabbe4176d42dcfe034dd8f3a","modified":1699328160760},{"_id":"source/_posts/Vue2.x的render方法.md","hash":"ee2f0c0c5a5492fe2d617d728b02ce57bb9c485d","modified":1699328160760},{"_id":"source/_posts/Vue2.x的v-model语法糖.md","hash":"5124fdd5c0c2331c3b774a4ee7a57e79d94aa0f6","modified":1699328160761},{"_id":"source/_posts/Vue2.x的事件中心.md","hash":"838385caeb8784a0526bf0985122de1dec4e2628","modified":1699328160761},{"_id":"source/_posts/Vue2.x的依赖收集.md","hash":"222dda112d9d8135ce7599343cf29009a3eb9294","modified":1699328160761},{"_id":"source/_posts/Vue2.x的数组响应式.md","hash":"058ae6bef03255134fa9c73f94776d7420041c65","modified":1699328160761},{"_id":"source/_posts/Vue2.x的派发更新.md","hash":"cc1fb6156744668118246a2ac44fabedf9e42296","modified":1699328160762},{"_id":"source/_posts/Vue2.x的渲染过程.md","hash":"c155757f80a742ac1c69767e226c772977385d47","modified":1699328160762},{"_id":"source/_posts/Vue2.x的组件通信.md","hash":"6ce16daf891dcee8e1ad9b1235dda78b9d3f8905","modified":1699328160762},{"_id":"source/_posts/typeof和instanceof区别.md","hash":"7dbe9153d1479d057d4de0a3af01d7df64ed2316","modified":1699328160763},{"_id":"source/_posts/Vue2.x的编译过程.md","hash":"323a69735ae041ccb72cda025abcd39ddb7f3105","modified":1699328160762},{"_id":"source/_posts/webpack之前端性能优化.md","hash":"2548387a879b3cc7cdd71bd8c28e79cc0afc06b3","modified":1699328160763},{"_id":"source/_posts/三次握手和四次挥手.md","hash":"d1e463ecab2bd9c0c95d89453a809c9dd93aee1e","modified":1699328160763},{"_id":"source/_posts/事件委托.md","hash":"e37d68f3a44b30ef6897943f5e7f9f1e0406d631","modified":1699328160764},{"_id":"source/_posts/八大数据结构分类.md","hash":"44e99aa7075aae6988eb2fc02ebc26886ec87cf1","modified":1699328160764},{"_id":"source/_posts/如何理解语义化.md","hash":"d609aab1a8bf984b84debab9af7f3f582005a8bb","modified":1699328160764},{"_id":"source/_posts/从输入url到页面加载完成发生了什么.md","hash":"1ebef6cfa32ad87e4df430217f4e880b8d091618","modified":1699328160764},{"_id":"source/_posts/常见排序算法.md","hash":"d5fd5a098ce380f4133e8a1e6ad76016c4f4998c","modified":1699328160764},{"_id":"source/_posts/引用文件夹下所有js.md","hash":"3e0bfbd431c9ff53801e99fa9d65468e3ef34bb6","modified":1699328160765},{"_id":"source/_posts/手写一个PLugin.md","hash":"de410f7507ce289e448a93d795b1d5b1aacd7f56","modified":1699328160765},{"_id":"source/_posts/手写一个Promise.md","hash":"644b6544df957d935a677a9d9220940e7914861c","modified":1699328160765},{"_id":"source/_posts/手写一个Proxy代理.md","hash":"c661bd47e5fa6c652278e2228ed8c11c2a52dbd9","modified":1699328160765},{"_id":"source/_posts/手写一个loader.md","hash":"01869d5d9c52f90cf0b3612a758cb4f20af72e47","modified":1699328160766},{"_id":"source/_posts/手写一个爬虫.md","hash":"f73dc8492a070d0813a72997cc50680c528759ad","modified":1699328160766},{"_id":"source/_posts/手写一个简版webpack.md","hash":"97dc15e5ab974045004db5a85b7ad0fd06111832","modified":1699328160766},{"_id":"source/_posts/手写防抖与节流函数.md","hash":"8d84462cb0d0898d28263bef932735b743e0fed3","modified":1699328160767},{"_id":"source/_posts/时间复杂度和空间复杂度.md","hash":"0b3fc0eb04bce21b2150f04ebb7467fdd87c839a","modified":1699328160767},{"_id":"source/_posts/浏览器的事件循环机制.md","hash":"971f8d10ed09059c9b075c73dc78cf60b5e2b343","modified":1699328160767},{"_id":"source/_posts/浏览器的进程和线程.md","hash":"6df8d92246fd856212b4a8ab4353d5aa4f7e9b38","modified":1699328160767},{"_id":"source/_posts/浏览器的重排和重绘.md","hash":"ec6f73d10e3080e277cc339f3e193d32847a7a71","modified":1699328160768},{"_id":"source/_posts/清除浮动的几种方式.md","hash":"0d3d042ff912b946ab245df872a1dddba65d8206","modified":1699328160768},{"_id":"source/_posts/观察者模式和发布订阅模式.md","hash":"997ceb156b2453c098f31182a1216152f4903805","modified":1699328160768},{"_id":"source/_posts/词法作用域和动态作用域.md","hash":"1fe416162be64db077b2675992641d73df027a0c","modified":1699328160768},{"_id":"source/categories/index.md","hash":"8d0890c4652f084608e7d0cfea5a24c003411300","modified":1699328160769},{"_id":"source/tags/index.md","hash":"612c9a894ea5d194bdf728a4cb7741756636abb9","modified":1699328160769},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1626168993696},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1626168993693},{"_id":"themes/next/.DS_Store","hash":"91a5c30683a6d9164bd91a8873aa6183df900b8f","modified":1626178811605},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1626168993693},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1626168993693},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1626168993696},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1626168993696},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1626168993696},{"_id":"themes/next/_config.yml","hash":"7dd0d890c87956178bbe0edc8bd6cd9b1bb21d10","modified":1626179350031},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1626168993715},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1626168993697},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1626168993697},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1626168993701},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1626168993693},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1626168993694},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1626168993695},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1626168993695},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1626168993695},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1626168993695},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1626168993695},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1626168993695},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1626168993696},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1626168993696},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1626168993696},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1626168993698},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1626168993697},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1626168993698},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1626168993698},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1626168993698},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1626168993698},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1626168993698},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1626168993699},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1626168993699},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1626168993702},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1626168993702},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1626168993702},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626168993702},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1626168993702},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1626168993702},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1626168993702},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1626168993703},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1626168993703},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1626168993703},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1626168993703},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1626168993703},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1626168993703},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1626168993703},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1626168993704},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1626168993704},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1626168993704},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1626168993704},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1626168993704},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1626168993704},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1626168993705},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1626168993705},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1626168993705},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1626168993715},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1626168993715},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1626168993715},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1626168993714},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1626168993718},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1626168993714},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1626168993715},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1626168993694},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1626168993694},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1626168993695},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1626168993694},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1626168993699},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1626168993699},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1626168993699},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1626168993699},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1626168993700},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1626168993701},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1626168993701},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1626168993705},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1626168993705},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1626168993705},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1626168993706},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1626168993706},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1626168993707},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1626168993708},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1626168993707},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1626168993709},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1626168993709},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1626168993709},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1626168993710},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1626168993710},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1626168993711},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1626168993715},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1626168993717},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1626168993717},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1626168993717},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1626168993713},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1626168993712},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1626168993717},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1626168993713},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1626168993717},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1626168993717},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1626168993717},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1626168993718},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1626168993718},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1626168993718},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1626168993718},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1626168993718},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1626168993718},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1626168993718},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1626168993719},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1626168993719},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1626168993719},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1626168993719},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1626168993720},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1626168993720},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1626168993738},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1626168993733},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626168993738},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626168993739},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626168993739},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626168993740},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626168993740},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626168993740},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626168993740},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626168993740},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626168993740},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626168993741},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626168993741},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1626168993741},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1626168993741},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1626168993741},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626168993742},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1626168993742},{"_id":"themes/next/source/images/avatar.jpeg","hash":"bf0cb6518bab7ec7c89f86f7e8fe17793649fcce","modified":1609244902094},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1626168993706},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1626168993706},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1626168993707},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1626168993742},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1626168993707},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1626168993707},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1626168993707},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1626168993708},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626168993743},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1626168993708},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1626168993708},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1626168993708},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1626168993708},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626168993709},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1626168993709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1626168993709},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1626168993710},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1626168993710},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1626168993710},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1626168993710},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1626168993711},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1626168993711},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1626168993712},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1626168993712},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1626168993712},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1626168993713},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1626168993712},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1626168993712},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1626168993713},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1626168993713},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1626168993713},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1626168993714},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1626168993713},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1626168993714},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1626168993714},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1626168993715},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1626168993716},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1626168993716},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1626168993717},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1626168993737},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1626168993738},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1626168993737},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1626168993738},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1626168993738},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1626168993742},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1626168993742},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1626168993720},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1626168993724},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626168993747},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626168993747},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1626168993727},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1626168993729},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1626168993732},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1626168993734},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1626168993733},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1626168993735},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1626168993734},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1626168993736},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1626168993737},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1626168993737},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1626168993744},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1626168993746},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1626168993721},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1626168993722},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1626168993723},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1626168993724},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1626168993725},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1626168993725},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1626168993725},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1626168993726},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1626168993727},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1626168993728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1626168993729},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1626168993729},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1626168993729},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1626168993730},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1626168993731},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1626168993732},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1626168993733},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1626168993733},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1626168993733},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1626168993745},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1626168993746},{"_id":"public/categories/index.html","hash":"d86f77a6bd90466d84f810f83ff1f58525e3641c","modified":1699341373965},{"_id":"public/tags/index.html","hash":"e66bbe97d03a7173e35b9acf60cd67394b51f81d","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的渲染过程/index.html","hash":"1370aad8dbdbe6cf6e38a9cd614366a6a9adad4d","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的编译过程/index.html","hash":"d9fc2319521be74498c3f01c648394f359ae231c","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的Virtual DOM/index.html","hash":"860b16652f0409cc29c4d8bc69df02c7ec4a3acd","modified":1699341373965},{"_id":"public/2021/12/31/引用文件夹下所有js/index.html","hash":"e61b95647324ef82b50d6b5861b91f6bdf43589f","modified":1699341373965},{"_id":"public/2021/08/05/typeof和instanceof区别/index.html","hash":"84cab3414cca68764f9dc40c7d95068993d1569b","modified":1699341373965},{"_id":"public/2021/07/30/JS的垃圾回收机制/index.html","hash":"5b8350b3dac75a1157523b4e9dc538abd9dc8c2b","modified":1699341373965},{"_id":"public/2021/07/26/从输入url到页面加载完成发生了什么/index.html","hash":"ae587f822825bd2e4b9c948a3ce171ad41248b60","modified":1699341373965},{"_id":"public/2021/07/21/如何理解语义化/index.html","hash":"67e7402d1bc807c0e239868e102342334af55748","modified":1699341373965},{"_id":"public/archives/index.html","hash":"eadd9535efdfa44506224b3f9633bc1967f13cb7","modified":1699341373965},{"_id":"public/archives/page/2/index.html","hash":"05bc626a435539187193653d5bac3d00f5f77eca","modified":1699341373965},{"_id":"public/archives/page/3/index.html","hash":"00294f64e075e377e535b902391de4cc9de32d8b","modified":1699341373965},{"_id":"public/archives/page/4/index.html","hash":"4ca30a819d4ed1b245c7b0c8fb8e419ce8ae70a6","modified":1699341373965},{"_id":"public/archives/page/5/index.html","hash":"12b9e4a08a8d614698040758c53673ac1aa94bce","modified":1699341373965},{"_id":"public/archives/2021/index.html","hash":"11935f3ce44a2cee623692febfd1d3fe4d924aaf","modified":1699341373965},{"_id":"public/archives/2021/page/2/index.html","hash":"dce3ef1076e3e2baefa2213d33b7647d2ae0f191","modified":1699341373965},{"_id":"public/archives/2021/page/3/index.html","hash":"696acaafbb31e674b2cabb2ffe46251782c601de","modified":1699341373965},{"_id":"public/archives/2021/07/index.html","hash":"1201d8a5c8adc3dec95891ae3ad45477fbbcb6b3","modified":1699341373965},{"_id":"public/archives/2021/07/page/2/index.html","hash":"c6dcdb6c3bfcab4cffa19b662169bad07548b5ad","modified":1699341373965},{"_id":"public/archives/2021/08/index.html","hash":"cad1a2b5ea5a3b69f32908f0a92d03a01ac84b05","modified":1699341373965},{"_id":"public/archives/2021/08/page/2/index.html","hash":"d10679b490b58842bf836e30fa7ab454ca3535e9","modified":1699341373965},{"_id":"public/archives/2021/12/index.html","hash":"e5e44b1fb8143d6e02471f332835c06ca2764872","modified":1699341373965},{"_id":"public/archives/2023/index.html","hash":"b3b629b984d365f08cee3f3edd568294a97cc1f8","modified":1699341373965},{"_id":"public/archives/2023/page/2/index.html","hash":"9cc814741d6d1a453dd4fafc5a32ce060c653208","modified":1699341373965},{"_id":"public/archives/2023/11/index.html","hash":"8f5767dcd36df4861c6a99c62d3f4280831aa652","modified":1699341373965},{"_id":"public/archives/2023/11/page/2/index.html","hash":"30d96505a6c05d18f983ca7823e079d98c5b38d9","modified":1699341373965},{"_id":"public/categories/javascript/index.html","hash":"92c0b29d013d2109d07b28447aa95d21a5609c87","modified":1699341373965},{"_id":"public/categories/Node/index.html","hash":"a38cf95d7b9fcfa4fd21c1383fc60cb5850693b4","modified":1699341373965},{"_id":"public/categories/webpack/index.html","hash":"817deaaeb199fd4a346cb09e9208a80a9f774f15","modified":1699341373965},{"_id":"public/categories/vue/index.html","hash":"ca4e0972359142edaee0aefc930fc3e7162d0fc8","modified":1699341373965},{"_id":"public/categories/vue/page/2/index.html","hash":"13fdaf7a1409764cec2de67533f274bff59daceb","modified":1699341373965},{"_id":"public/categories/tcp/index.html","hash":"83049563e79202b4546d1a1ae0ee757cf17e2d9f","modified":1699341373965},{"_id":"public/categories/浏览器/index.html","hash":"8a25d6be21969827bed530a7952ee84b637518f5","modified":1699341373965},{"_id":"public/categories/算法/index.html","hash":"4b8f6513a10b4f23b5fb72b06110054d10fbc80b","modified":1699341373965},{"_id":"public/categories/html/index.html","hash":"de5fd629a49bc5da7118291bb94865971f182465","modified":1699341373965},{"_id":"public/categories/express/index.html","hash":"dc1ab01d79dc4df25dea5f1b5ed7f6864cba9887","modified":1699341373965},{"_id":"public/categories/css/index.html","hash":"0efcbb6812c5086cb77fb366a596fce2cf75b343","modified":1699341373965},{"_id":"public/categories/设计模式/index.html","hash":"6140ce31a5a0744bdc064e5a406b56cddbe51a02","modified":1699341373965},{"_id":"public/tags/原型/index.html","hash":"0fb6cc2da5d62a995837bb4a813ac5d3c7596712","modified":1699341373965},{"_id":"public/tags/原型链/index.html","hash":"6b81f7101a5099d49c37860d9d002ebf2fe30504","modified":1699341373965},{"_id":"public/tags/闭包/index.html","hash":"fc63fe9ff926bc92ce5e52c5a6bc5b83935eaf27","modified":1699341373965},{"_id":"public/tags/AST/index.html","hash":"4c956574a6139beaa1c032b8478c5bc90303e0d4","modified":1699341373965},{"_id":"public/tags/垃圾回收机制/index.html","hash":"220a13ee226e2f221c3e3e05b216e4abc402e015","modified":1699341373965},{"_id":"public/tags/事件循环/index.html","hash":"93b3dff46f0a5f34fd8d509bd048dfc5f123e28a","modified":1699341373965},{"_id":"public/tags/loader/index.html","hash":"5f962601753c702c24bfcbe595bcb60e572b47c7","modified":1699341373965},{"_id":"public/tags/Virtual-DOM/index.html","hash":"6c9da3117506972c36b75f53d92bb2e92a9c6472","modified":1699341373965},{"_id":"public/tags/nextTick/index.html","hash":"7f0c1946c7bb876f9fcd8fad1b63cd587b00a7a9","modified":1699341373965},{"_id":"public/tags/patch/index.html","hash":"74299434176788acf2e11b38447c78cf6f4df7a4","modified":1699341373965},{"_id":"public/tags/render/index.html","hash":"d4084e04878a585e73e32fb50a0c4ffb8535a1dc","modified":1699341373965},{"_id":"public/tags/v-model/index.html","hash":"97995639d8ea96b4761bb30df72591cd385f851c","modified":1699341373965},{"_id":"public/tags/双向绑定/index.html","hash":"e990ce83d5336ed995209c81f77d830a5446fd61","modified":1699341373965},{"_id":"public/tags/事件中心/index.html","hash":"769b9a89ceb738cb4b6ba61a0cf037724f0df108","modified":1699341373965},{"_id":"public/tags/依赖收集/index.html","hash":"2e6c0349ea05eee9256dcb02351c4ea69ceb5f2a","modified":1699341373965},{"_id":"public/tags/数组/index.html","hash":"619d914dac6d6366600c8fad896699bd706c78d9","modified":1699341373965},{"_id":"public/tags/响应式/index.html","hash":"feb650505491fac2ee6d407fc63d5541ea2d4ce7","modified":1699341373965},{"_id":"public/tags/派发更新/index.html","hash":"67f869f71b33d3b3e1363de74c8c3175a53b79c5","modified":1699341373965},{"_id":"public/tags/渲染/index.html","hash":"83ee44ce22cdecb89b6550da4ccd1c57614787ae","modified":1699341373965},{"_id":"public/tags/组件通信/index.html","hash":"fc5cb6e8fdd3cfb393149fa68af2f7272b5d86e1","modified":1699341373965},{"_id":"public/tags/编译/index.html","hash":"cf556a02c2986c105b8f61a0acc264ca266c3560","modified":1699341373965},{"_id":"public/tags/typeof/index.html","hash":"52b9be56d95ede09749f16b889a8cf0f91599bf7","modified":1699341373965},{"_id":"public/tags/instanceof/index.html","hash":"bcd0bb2c1bed08abc5c93eba1ab44cb9d89ec901","modified":1699341373965},{"_id":"public/tags/webpack/index.html","hash":"6ed2d78d53fa02975fe14378d07a99c4b20c5683","modified":1699341373965},{"_id":"public/tags/性能优化/index.html","hash":"c908b83f8826947b05df4550cf23eae1c647c346","modified":1699341373965},{"_id":"public/tags/三次握手/index.html","hash":"149b1f5a4ad7abeaa0d95cc3e0c79eec3bb57c41","modified":1699341373965},{"_id":"public/tags/四次挥手/index.html","hash":"c4b02c637de533e9a3bce47dd47693a7604570f9","modified":1699341373965},{"_id":"public/tags/事件委托/index.html","hash":"8cc411d4b1b2a635dbf39e07131c226d49c8633e","modified":1699341373965},{"_id":"public/tags/页面加载/index.html","hash":"4ab156f399336c15ca4eb1674ce9aaa47ff2c3ee","modified":1699341373965},{"_id":"public/tags/数据结构/index.html","hash":"78ec8ec5cb88350b342896f7151779a55f02fbba","modified":1699341373965},{"_id":"public/tags/语义化/index.html","hash":"dac7a416a36fef18108b481cb1c7d410b54d6ef0","modified":1699341373965},{"_id":"public/tags/排序/index.html","hash":"f934d5f80b0ac976d2463b74f89c1c1d11f8c91e","modified":1699341373965},{"_id":"public/tags/import/index.html","hash":"f0401a442b59ce6d7e1c5968f3e42388521fe81d","modified":1699341373965},{"_id":"public/tags/plugin/index.html","hash":"4321ae9910fb5a3e10fb4ba7f29b6392ec404a17","modified":1699341373965},{"_id":"public/tags/Promise/index.html","hash":"c12f2c1e1a31c51d6efd8082b357d7db4154f348","modified":1699341373965},{"_id":"public/tags/Proxy/index.html","hash":"79a77f41b26f0d06ac2e8d6e5ff345beb79a4c45","modified":1699341373965},{"_id":"public/tags/跨域/index.html","hash":"21e87cdb03b587f7fe361290260c8cb0e35324cc","modified":1699341373965},{"_id":"public/tags/爬虫/index.html","hash":"2498da967deb3f2930a182120c790cff4d5ef5db","modified":1699341373965},{"_id":"public/tags/防抖/index.html","hash":"d76c332d9a3d5df934b7a63e5fbc0a61806fa3b5","modified":1699341373965},{"_id":"public/tags/节流/index.html","hash":"a70e32ecf787ed3641617aace360f89e6b75a8f1","modified":1699341373965},{"_id":"public/tags/时间复杂度/index.html","hash":"430c3db328cfa2f963fb74d1d10d8076c5d3e0a5","modified":1699341373965},{"_id":"public/tags/空间复杂度/index.html","hash":"90d7cd92710c905cda03b2e0833f54d0d6ab7110","modified":1699341373965},{"_id":"public/tags/进程/index.html","hash":"910271a2569fde1a63290aa7bc72d06f37f7aac6","modified":1699341373965},{"_id":"public/tags/线程/index.html","hash":"5ba21e61cc9b64821efa0fe0b05020a0297bd32e","modified":1699341373965},{"_id":"public/tags/重排/index.html","hash":"0868b062f9d42365bb5e9699bfd126c4c22a8f36","modified":1699341373965},{"_id":"public/tags/重绘/index.html","hash":"f851cede0ec0620b375345768c8df1ef906bc3eb","modified":1699341373965},{"_id":"public/tags/浮动/index.html","hash":"2bde0eb4e18afafea384209ef142efd0b70f093c","modified":1699341373965},{"_id":"public/tags/观察者模式/index.html","hash":"77e3cafaa0f3407f5e6b49af3d5c4d26d02d4c3b","modified":1699341373965},{"_id":"public/tags/发布订阅模式/index.html","hash":"429b1c2c4592bca79399eee6a5050b912529da4d","modified":1699341373965},{"_id":"public/tags/作用域/index.html","hash":"0d828cec91c775c4101caa8ae0bb50bda04bcd6e","modified":1699341373965},{"_id":"public/2023/11/07/浏览器的事件循环机制/index.html","hash":"65844cfbcf7eb28e111b08729d21be55f63e97da","modified":1699341373965},{"_id":"public/2023/11/07/浏览器的进程和线程/index.html","hash":"be69f5e37c8b28c353c65df4d9a630f26c9db362","modified":1699341373965},{"_id":"public/2023/11/07/手写一个简版webpack/index.html","hash":"4fde3831b2e8ff52a9fd9dacc25778eb909a0197","modified":1699341373965},{"_id":"public/2023/11/07/webpack之前端性能优化/index.html","hash":"846a5c6b09749ac60c2f626a54cf171a64ab5d2c","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的派发更新/index.html","hash":"ad828c843d3930b9cc68c3ae96d21cc18e8d8df7","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的组件通信/index.html","hash":"74676f50e325eb8573218a05a94afd795eab5436","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的v-model语法糖/index.html","hash":"a7f7a29945a49ff2cc4550a2832fd96e60cb1030","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的依赖收集/index.html","hash":"dc67c6209a3f20217424e3bbd393d7642cbfb3bb","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的事件中心/index.html","hash":"b61b26d29d9109f8c538458385fbc2a897437602","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的数组响应式/index.html","hash":"fd8b3b28eb91bd9bb9d57fc783e97afb1d0303c0","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的nextTick实现原理/index.html","hash":"206be3daa1502e22093ca851f522c65be8386b26","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的patch方法/index.html","hash":"f55afc5405380159039de5d65d7bf30982facfe7","modified":1699341373965},{"_id":"public/2023/11/07/Vue2.x的render方法/index.html","hash":"1028924bf8234a2153e44bb50b2d4db3fdcb4cce","modified":1699341373965},{"_id":"public/2023/11/07/Node的事件循环机制/index.html","hash":"46d2a253836788aecef41f20146db52d483a055c","modified":1699341373965},{"_id":"public/2021/08/20/手写一个PLugin/index.html","hash":"d42fc892e8148ee1da649a84e572f7c2a4f42358","modified":1699341373965},{"_id":"public/2021/08/19/Loader的执行顺序/index.html","hash":"a617ed1a82a70d9c92c6df10da457a8078b0b217","modified":1699341373965},{"_id":"public/2021/08/14/手写一个Proxy代理/index.html","hash":"26aa11556100b6614e380e824ea6ac377bc6ed94","modified":1699341373965},{"_id":"public/2021/08/16/手写一个loader/index.html","hash":"509a47c1043b5d30dff54af0d3c8339a0b4e6203","modified":1699341373965},{"_id":"public/2021/08/12/手写一个爬虫/index.html","hash":"db5dffd25fa1291a4d239763800b94e11db1851f","modified":1699341373965},{"_id":"public/2021/08/11/手写一个Promise/index.html","hash":"9cca9fd14def172b053a5b6aec8f659c35fb087b","modified":1699341373965},{"_id":"public/2021/08/10/JS抽象语法树/index.html","hash":"1fb273afbe34b03e74c964e89f933e2978f5400e","modified":1699341373965},{"_id":"public/2021/08/07/JS中的原型和原型链/index.html","hash":"ffdfacf956088afe604e411028ccbcdc52d48c0a","modified":1699341373965},{"_id":"public/2021/08/08/词法作用域和动态作用域/index.html","hash":"632bfa48356a4817b1c33b9cdc891d29f2eb04db","modified":1699341373965},{"_id":"public/2021/08/04/手写防抖与节流函数/index.html","hash":"44381cba22d14d06424f6cc2e6162ee4807cf4a2","modified":1699341373965},{"_id":"public/2021/08/01/观察者模式和发布订阅模式/index.html","hash":"73a51c944182e0714eda8fe8db715baed933954d","modified":1699341373965},{"_id":"public/2021/07/29/JS中的闭包/index.html","hash":"befd1587d1ddc0c59bced683878cd98fdc44b0a7","modified":1699341373965},{"_id":"public/2021/07/27/三次握手和四次挥手/index.html","hash":"f98a83f08722c180c8cd3c6270c0c352834354f6","modified":1699341373965},{"_id":"public/2021/07/26/浏览器的重排和重绘/index.html","hash":"68e1d0614ea5383d2476fdcbb5805c5764247cb7","modified":1699341373965},{"_id":"public/2021/07/24/事件委托/index.html","hash":"858f9254085150046e7e3fb9cc5512e273fb004a","modified":1699341373965},{"_id":"public/2021/07/22/清除浮动的几种方式/index.html","hash":"6cfff4cfc6fe74669da5d8b24105e94d13e9a9f2","modified":1699341373965},{"_id":"public/2021/07/19/时间复杂度和空间复杂度/index.html","hash":"5ebe9558fae4e1309ef56161f779a9d49243ff76","modified":1699341373965},{"_id":"public/2021/07/18/常见排序算法/index.html","hash":"3fa767b5a35eefc327f4b2ed241acf62c39849ed","modified":1699341373965},{"_id":"public/2021/07/15/八大数据结构分类/index.html","hash":"093daea386ab96d46bcd72f11f621ed9a84aff54","modified":1699341373965},{"_id":"public/index.html","hash":"7f5a14fa5f651d910815cbda3813b0c67d3a315a","modified":1699341373965},{"_id":"public/page/2/index.html","hash":"e7e30591c3cf2ad194cf7ac93a8031ac652bebfb","modified":1699341373965},{"_id":"public/page/3/index.html","hash":"a1a67b05d553835dc6d0b6278aeb624dcb8e946c","modified":1699341373965},{"_id":"public/page/4/index.html","hash":"f7f4435c1e03f6cea8f34be2337175221938692d","modified":1699341373965},{"_id":"public/page/5/index.html","hash":"068bc8ce727fa1003a39fda7ee8a43a14177a954","modified":1699341373965},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1699341373965},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1699341373965},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1699341373965},{"_id":"public/images/avatar.jpeg","hash":"bf0cb6518bab7ec7c89f86f7e8fe17793649fcce","modified":1699341373965},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1699341373965},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1699341373965},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1699341373965},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1699341373965},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1699341373965},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1699341373965},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1699341373965},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1699341373965},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1699341373965},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1699341373965},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1699341373965},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1699341373965},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1699341373965},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1699341373965},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1699341373965},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1699341373965},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1699341373965},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1699341373965},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1699341373965},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1699341373965},{"_id":"public/css/main.css","hash":"d9489551632e541acf474c87f7551323fbd1eefb","modified":1699341373965},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1699341373965},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1699341373965},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1699341373965},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1699341373965},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1699341373965}],"Category":[{"name":"javascript","_id":"clonzz87g0004u17u2u82heks"},{"name":"Node","_id":"clonzz87q000ku17udmcjbbi4"},{"name":"webpack","_id":"clonzz87t000su17u4tpyduyl"},{"name":"vue","_id":"clonzz87v000yu17u9lzohk69"},{"name":"tcp","_id":"clonzz8890028u17u2wwq447o"},{"name":"浏览器","_id":"clonzz88d002hu17ug02v4p5s"},{"name":"算法","_id":"clonzz88f002nu17ucj75fzwl"},{"name":"html","_id":"clonzz88h002vu17ubr8mgiq7"},{"name":"express","_id":"clonzz88m003au17u13gecpzw"},{"name":"css","_id":"clonzz88p003ou17uhubz1n3v"},{"name":"设计模式","_id":"clonzz88s003tu17u0e1lcwfe"}],"Data":[],"Page":[{"title":"categories","date":"2021-07-13T09:43:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-07-13 17:43:24\ntype: \"categories\"\n---\n","updated":"2023-11-07T03:36:00.769Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clonzz8790000u17ud8mag4mc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-07-13T09:42:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-07-13 17:42:57\ntype: \"tags\"\n---\n","updated":"2023-11-07T03:36:00.769Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clonzz87e0002u17udrza3a6l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS中的原型和原型链","date":"2021-08-06T16:00:00.000Z","_content":"### 原型\n\n每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。\n\n\n\n#### 构造函数、原型、实例的关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png)\n\n#### 为什么原型没有属性指向实例？\n\n因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。\n\n\n\n### 原型链\n\n当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。\n\n\n\n#### 原型链的尽头\n\n```javascript\nconsole.log(Object.prototype.__proto__ === null) // true\n```\n\n Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。\n\n\n\n#### 原型链关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png)\n\n图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。\n\n\n\n### 几个常见小问题\n\n#### 实例的constructor属性指向构造函数吗？\n\n```javascript\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n```\n\n当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```javascript\nperson.constructor === Person.prototype.constructor\n```\n\n\n\n#### 怎么理解__proto__属性？\n\n绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。\n\n\n\n#### 真的是从原型上“继承”属性吗？\n\n继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n","source":"_posts/JS中的原型和原型链.md","raw":"---\ntitle: JS中的原型和原型链\n\ndate: 2021-08-07\n\ntags: [原型,原型链]\n\ncategories: javascript\n---\n### 原型\n\n每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。\n\n\n\n#### 构造函数、原型、实例的关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png)\n\n#### 为什么原型没有属性指向实例？\n\n因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。\n\n\n\n### 原型链\n\n当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。\n\n\n\n#### 原型链的尽头\n\n```javascript\nconsole.log(Object.prototype.__proto__ === null) // true\n```\n\n Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。\n\n\n\n#### 原型链关系图\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png)\n\n图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。\n\n\n\n### 几个常见小问题\n\n#### 实例的constructor属性指向构造函数吗？\n\n```javascript\nfunction Person() {}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n```\n\n当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```javascript\nperson.constructor === Person.prototype.constructor\n```\n\n\n\n#### 怎么理解__proto__属性？\n\n绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。\n\n\n\n#### 真的是从原型上“继承”属性吗？\n\n继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n","slug":"JS中的原型和原型链","published":1,"updated":"2023-11-07T03:36:00.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87b0001u17u1fkdddor","content":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。</p>\n<h4 id=\"构造函数、原型、实例的关系图\"><a href=\"#构造函数、原型、实例的关系图\" class=\"headerlink\" title=\"构造函数、原型、实例的关系图\"></a>构造函数、原型、实例的关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png\"></p>\n<h4 id=\"为什么原型没有属性指向实例？\"><a href=\"#为什么原型没有属性指向实例？\" class=\"headerlink\" title=\"为什么原型没有属性指向实例？\"></a>为什么原型没有属性指向实例？</h4><p>因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。</p>\n<h4 id=\"原型链的尽头\"><a href=\"#原型链的尽头\" class=\"headerlink\" title=\"原型链的尽头\"></a>原型链的尽头</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"literal\">null</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p> Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。</p>\n<h4 id=\"原型链关系图\"><a href=\"#原型链关系图\" class=\"headerlink\" title=\"原型链关系图\"></a>原型链关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\"></p>\n<p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>\n<h3 id=\"几个常见小问题\"><a href=\"#几个常见小问题\" class=\"headerlink\" title=\"几个常见小问题\"></a>几个常见小问题</h3><h4 id=\"实例的constructor属性指向构造函数吗？\"><a href=\"#实例的constructor属性指向构造函数吗？\" class=\"headerlink\" title=\"实例的constructor属性指向构造函数吗？\"></a>实例的constructor属性指向构造函数吗？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"怎么理解-proto-属性？\"><a href=\"#怎么理解-proto-属性？\" class=\"headerlink\" title=\"怎么理解__proto__属性？\"></a>怎么理解__proto__属性？</h4><p>绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>\n<h4 id=\"真的是从原型上“继承”属性吗？\"><a href=\"#真的是从原型上“继承”属性吗？\" class=\"headerlink\" title=\"真的是从原型上“继承”属性吗？\"></a>真的是从原型上“继承”属性吗？</h4><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>每一个javascript对象（null除外）在创建的时候，都会与另外一个对象所关联。而这个与创建对象所关联的对象，就是所创建对象的原型，每一个对象都会从原型中继承属性。</p>\n<h4 id=\"构造函数、原型、实例的关系图\"><a href=\"#构造函数、原型、实例的关系图\" class=\"headerlink\" title=\"构造函数、原型、实例的关系图\"></a>构造函数、原型、实例的关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E5%9B%BE.png\"></p>\n<h4 id=\"为什么原型没有属性指向实例？\"><a href=\"#为什么原型没有属性指向实例？\" class=\"headerlink\" title=\"为什么原型没有属性指向实例？\"></a>为什么原型没有属性指向实例？</h4><p>因为一个构造函数可以创建多个实例对象，原型与实例对象是一对多的关系，所以就没法用一个属性指向实例。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当读取实例的属性时，如果找不到就会去查找与对象关联的原型中的属性，如果还找不到，就去找原型的原型，一直找到最顶层为止，这样由原型组成的链状结构就是原型链。</p>\n<h4 id=\"原型链的尽头\"><a href=\"#原型链的尽头\" class=\"headerlink\" title=\"原型链的尽头\"></a>原型链的尽头</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"literal\">null</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p> Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思，所以查找属性到了 Object.prototype就可以停止查找了。</p>\n<h4 id=\"原型链关系图\"><a href=\"#原型链关系图\" class=\"headerlink\" title=\"原型链关系图\"></a>原型链关系图</h4><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\"></p>\n<p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>\n<h3 id=\"几个常见小问题\"><a href=\"#几个常见小问题\" class=\"headerlink\" title=\"几个常见小问题\"></a>几个常见小问题</h3><h4 id=\"实例的constructor属性指向构造函数吗？\"><a href=\"#实例的constructor属性指向构造函数吗？\" class=\"headerlink\" title=\"实例的constructor属性指向构造函数吗？\"></a>实例的constructor属性指向构造函数吗？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>当获取person的constructor属性时，其实 person 中并没有 constructor 属性，当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"怎么理解-proto-属性？\"><a href=\"#怎么理解-proto-属性？\" class=\"headerlink\" title=\"怎么理解__proto__属性？\"></a>怎么理解__proto__属性？</h4><p>绝大多数浏览器都支持这个非标准的方法访问原型，然而它并不存在于Person.prototype中，实际上它是来自于 Object.prototype。与其说是一个属性，不如说是一个getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>\n<h4 id=\"真的是从原型上“继承”属性吗？\"><a href=\"#真的是从原型上“继承”属性吗？\" class=\"headerlink\" title=\"真的是从原型上“继承”属性吗？\"></a>真的是从原型上“继承”属性吗？</h4><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性。相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n"},{"title":"JS中的闭包","date":"2021-07-28T16:00:00.000Z","_content":"\n### 定义\n\nMDN对闭包的定义：\n\n函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。\n\n\n\n换种好理解的说法：\n\n闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。\n\n\n\n具体可以从两个角度来看什么函数是闭包：\n\n1. 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n2. 从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。\n\n\n\n### 闭包的用途\n\n1. 可以读取函数内部的变量；\n2. 让变量的值始终保持在内存中；\n\n\n\n### 为什么闭包会造成内存泄漏？\n\n早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。","source":"_posts/JS中的闭包.md","raw":"---\ntitle: JS中的闭包\n\ndate: 2021-07-29\n\ntags: [闭包]\n\ncategories: javascript\n---\n\n### 定义\n\nMDN对闭包的定义：\n\n函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。\n\n\n\n换种好理解的说法：\n\n闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。\n\n\n\n具体可以从两个角度来看什么函数是闭包：\n\n1. 从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n2. 从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。\n\n\n\n### 闭包的用途\n\n1. 可以读取函数内部的变量；\n2. 让变量的值始终保持在内存中；\n\n\n\n### 为什么闭包会造成内存泄漏？\n\n早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。","slug":"JS中的闭包","published":1,"updated":"2023-11-07T03:36:00.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87f0003u17ufrph1llo","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN对闭包的定义：</p>\n<p>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。</p>\n<p>换种好理解的说法：</p>\n<p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p>\n<p>具体可以从两个角度来看什么函数是闭包：</p>\n<ol>\n<li>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</li>\n<li>从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</li>\n</ol>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><ol>\n<li>可以读取函数内部的变量；</li>\n<li>让变量的值始终保持在内存中；</li>\n</ol>\n<h3 id=\"为什么闭包会造成内存泄漏？\"><a href=\"#为什么闭包会造成内存泄漏？\" class=\"headerlink\" title=\"为什么闭包会造成内存泄漏？\"></a>为什么闭包会造成内存泄漏？</h3><p>早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN对闭包的定义：</p>\n<p>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。</p>\n<p>换种好理解的说法：</p>\n<p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p>\n<p>具体可以从两个角度来看什么函数是闭包：</p>\n<ol>\n<li>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</li>\n<li>从实践角度：闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</li>\n</ol>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><ol>\n<li>可以读取函数内部的变量；</li>\n<li>让变量的值始终保持在内存中；</li>\n</ol>\n<h3 id=\"为什么闭包会造成内存泄漏？\"><a href=\"#为什么闭包会造成内存泄漏？\" class=\"headerlink\" title=\"为什么闭包会造成内存泄漏？\"></a>为什么闭包会造成内存泄漏？</h3><p>早期的IE，无法自动回收闭包引用的变量，变量用不上又回收不掉自然就造成了内存泄漏。其实这个问题本身就是有问题的，闭包不会造成内存泄漏，程序写错了才会造成内存泄漏。</p>\n"},{"title":"JS抽象语法树","date":"2021-08-09T16:00:00.000Z","_content":"\n### 前言\n\nbabel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。\n\n\n\n### 什么是抽象语法树\n\n我们可以来看一个简单的例子：\n\n```javascript\nvar a = 1;\nvar b = a + 1;\n```\n\n我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png)\n\n而他的json对象格式是这样的：\n\n```javascript\n{\n    \"type\": \"Program\",\n    \"body\": [\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"a\"\n                    },\n                    \"init\": {\n                        \"type\": \"Literal\",\n                        \"value\": 1,\n                        \"raw\": \"1\"\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        },\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"b\"\n                    },\n                    \"init\": {\n                        \"type\": \"BinaryExpression\",\n                        \"operator\": \"+\",\n                        \"left\": {\n                            \"type\": \"Identifier\",\n                            \"name\": \"a\"\n                        },\n                        \"right\": {\n                            \"type\": \"Literal\",\n                            \"value\": 1,\n                            \"raw\": \"1\"\n                        }\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        }\n    ],\n    \"sourceType\": \"script\"\n}\n```\n\n### AST的三板斧\n\n- 通过esprima生成AST\n- 通过estraverse遍历和更新AST\n\n- 通过escodegen将AST重新生成源码\n\n\n\n### 作用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。\n","source":"_posts/JS抽象语法树.md","raw":"---\ntitle: JS抽象语法树\n\ndate: 2021-08-10\n\ntags: [AST]\n\ncategories: javascript\n---\n\n### 前言\n\nbabel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。\n\n\n\n### 什么是抽象语法树\n\n我们可以来看一个简单的例子：\n\n```javascript\nvar a = 1;\nvar b = a + 1;\n```\n\n我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png)\n\n而他的json对象格式是这样的：\n\n```javascript\n{\n    \"type\": \"Program\",\n    \"body\": [\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"a\"\n                    },\n                    \"init\": {\n                        \"type\": \"Literal\",\n                        \"value\": 1,\n                        \"raw\": \"1\"\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        },\n        {\n            \"type\": \"VariableDeclaration\",\n            \"declarations\": [\n                {\n                    \"type\": \"VariableDeclarator\",\n                    \"id\": {\n                        \"type\": \"Identifier\",\n                        \"name\": \"b\"\n                    },\n                    \"init\": {\n                        \"type\": \"BinaryExpression\",\n                        \"operator\": \"+\",\n                        \"left\": {\n                            \"type\": \"Identifier\",\n                            \"name\": \"a\"\n                        },\n                        \"right\": {\n                            \"type\": \"Literal\",\n                            \"value\": 1,\n                            \"raw\": \"1\"\n                        }\n                    }\n                }\n            ],\n            \"kind\": \"var\"\n        }\n    ],\n    \"sourceType\": \"script\"\n}\n```\n\n### AST的三板斧\n\n- 通过esprima生成AST\n- 通过estraverse遍历和更新AST\n\n- 通过escodegen将AST重新生成源码\n\n\n\n### 作用\n\n抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。\n","slug":"JS抽象语法树","published":1,"updated":"2023-11-07T03:36:00.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87j0006u17ug009c9g4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。</p>\n<h3 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h3><p>我们可以来看一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png\" alt=\"img\"></p>\n<p>而他的json对象格式是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Program&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;body&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Literal&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;BinaryExpression&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;+&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Literal&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceType&quot;</span>: <span class=\"string\">&quot;script&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AST的三板斧\"><a href=\"#AST的三板斧\" class=\"headerlink\" title=\"AST的三板斧\"></a>AST的三板斧</h3><ul>\n<li><p>通过esprima生成AST</p>\n</li>\n<li><p>通过estraverse遍历和更新AST</p>\n</li>\n<li><p>通过escodegen将AST重新生成源码</p>\n</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等都是通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。</p>\n<h3 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h3><p>我们可以来看一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/ast.png\" alt=\"img\"></p>\n<p>而他的json对象格式是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Program&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;body&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Literal&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;BinaryExpression&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;operator&quot;</span>: <span class=\"string\">&quot;+&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;left&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;right&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Literal&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceType&quot;</span>: <span class=\"string\">&quot;script&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AST的三板斧\"><a href=\"#AST的三板斧\" class=\"headerlink\" title=\"AST的三板斧\"></a>AST的三板斧</h3><ul>\n<li><p>通过esprima生成AST</p>\n</li>\n<li><p>通过estraverse遍历和更新AST</p>\n</li>\n<li><p>通过escodegen将AST重新生成源码</p>\n</li>\n</ul>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>抽象语法树的作用非常的多，比如编译器、IDE、压缩优化代码等。在JavaScript中，虽然我们并不会常常与AST直接打交道，但却也会经常的涉及到它。例如使用UglifyJS来压缩代码，实际这背后就是在对JavaScript的抽象语法树进行操作。</p>\n"},{"title":"JS的垃圾回收机制","date":"2021-07-29T16:00:00.000Z","_content":"\n> 现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。\n\n### 标记清除\n\n先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。\n\n\n\n### 引用计数\n\n这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。\n\n","source":"_posts/JS的垃圾回收机制.md","raw":"---\ntitle: JS的垃圾回收机制\n\ndate: 2021-07-30\n\ntags: [垃圾回收机制]\n\ncategories: javascript\n---\n\n> 现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。\n\n### 标记清除\n\n先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。\n\n\n\n### 引用计数\n\n这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。\n\n","slug":"JS的垃圾回收机制","published":1,"updated":"2023-11-07T03:36:00.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87k0007u17u76zu7tzh","content":"<blockquote>\n<p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>\n</blockquote>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除、引用计数。</p>\n</blockquote>\n<h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p>先认为所有对象都是要清除的，然后遍历正在使用的那些对象，以及由那些对象所引用的其他对象。所有这些对象都找出来之后，剩下的就是没有在使用的对象了，就可以被垃圾回收了。</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>这种方式常常会引起内存泄漏，低版本的IE使用这种方式。机制就是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给该变量时该值引用次数加1，当这个变量指向其他一个时该值的引用次数便减一。当该值引用次数为0时就会被回收。</p>\n"},{"title":"Node的事件循环机制","_content":"\n#### 简介\n\nNode中的Event Loop和浏览器中的是完全不相同的东西。Node采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv。libuv是一个事件驱动的跨平台抽象层，封装了不同操作系统的一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。\n\n\n\n#### 运行机制\n\nV8引擎解析js脚本，解析后的代码调用Node API。libuv库负责Node API的执行，将不同的任务分配给不同的线程，形成一个事件循环，以异步的方式将任务的返回结果返回给V8引擎，再由V8引擎将结果返回给用户。\n\n\n\n#### 事件循环的阶段顺序\n\n输入数据阶段 incoming data -> 轮询阶段 poll ->  检查阶段 check -> 关闭事件回调阶段 close callback -> 定时器检测阶段 timer ->  I/O事件回调阶段 I/O callbacks -> 闲置阶段 idle,prepare -> 轮询阶段 poll ...\n\n\n\n#### 六大阶段概述\n\n* 定时器检测阶段 timer：执行timer的回调，即setTimeout、setInterval里面的回调函数；\n* I/O事件回调阶段 I/O callbacks：执行上一轮循环中未被执行的一些I/O回调；\n* 闲置阶段 idle, prepare：仅系统内部使用；\n* 轮询阶段 poll：检索新的I/O事件，执行与I/O相关的回调；\n* 检查阶段 check：setImmediate()回调函数在这里执行；\n* 关闭事件回调阶段 close callback：一些关闭的回调函数，如socket.on('close', ...)。\n\n\n\n⚠️每个阶段都有一个先进先出队列来执行回调。通常情况下，当事件循环进入给定的阶段后，将执行该阶段的任何操作，然后执行该阶段队列中的回调。当该队列执行完毕或达到最大回调限制时，事件循环将移动到下一阶段。\n\n\n\n#### 三大阶段详述\n\n日常开发中绝大部分的异步任务都是在poll、check、timer这三个阶段，重点分析一下。\n\n##### timer\n\ntimer阶段会执行setTimeout、setInterval里面的回调函数，并且是由poll阶段控制的。在Node中定时器指定的时间也不是准确时间，只能是尽快执行。\n\n\n\n##### check\n\nsetImmediate()回调函数在这里执行。\n\n\n\n##### poll\n\npoll阶段是一个至关重要的阶段，执行逻辑相对复杂，具体流程如下。\n\n在这一阶段中，系统会做两件事情：\n\n1. 回到timer阶段执行回调：设定了timer且poll队列为空，如果有timer超时，则会回到timer阶段；\n2. 执行I/O回调（没满足上面的条件就会走下面流程）：\n   * 如果poll队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；\n   * 如果poll队列为空时，也有两种情况：\n     * 如果有setImmediate回调需要执行，poll阶段会停止并且进入到check阶段执行回调；\n     * 如果没有setImmediate回调需要执行，会等待回调被加入队列中并立即执行回调。这里有个超时时间设置，防止一直等待下去。\n\n\n\n\n\n#### 分析差别\n\nNode中的事件循环和浏览器的事件循环，差别就在于浏览器中事件循环中异步任务只分为了宏任务和微任务，他们执行的是同属于一个阶段的，简单理解为渲染之前的阶段。而Node中的不同的宏任务会有不同的执行阶段，且微任务的执行时机跟Node的版本还有关系。\n\n\n\n##### Node中宏任务和微任务\n\n###### 宏任务 macro-task\n\n* setTimeout：timers阶段执行；\n* setInterval：timers阶段执行；\n* setImmediate：check阶段执行；\n* script 整体代码：执行同步代码，将不同类型的异步任务添加到任务队列；\n* I/O 操作：poll阶段执行。\n* ...\n\n###### 微任务 micro-task\n\n* process.nextTick：与普通的微任务有区别，在微任务队列执行之前执行；\n* Promise.then;\n* ...\n\n\n\n##### 版本差异总结\n\nnode11之前，每一个event loop阶段完成后都会先清空nextTick队列，再清空微任务队列。\n\nnode11之后，process.nextTick是微任务的一种，但还是执行顺序优先于Promise.then。在异步任务的执行方面，已经在向浏览器看齐，最大的改变是微任务的执行时机发生变化了。当执行完一个宏任务时，生成的微任务会在这个宏任务出队列的时候立即执行，而不是等到一个event loop阶段再去执行。\n\n⚠️虽然node11之后，异步方法的执行方面已经在向浏览器看齐了，但是不同的宏任务还是位于不同的阶段去执行，这个跟浏览器还是很大差别的。\n\n\n\n###### 举几个🌰\n\n1. 微任务执行时机\n\n``` javascript\nsetImmediate(() => {\n    console.log('timeout1')\n    Promise.resolve().then(() => console.log('promise resolve'))\n    process.nextTick(() => console.log('next tick1'))\n});\nsetImmediate(() => {\n    console.log('timeout2')\n    process.nextTick(() => console.log('next tick2'))\n});\nsetImmediate(() => console.log('timeout3'));\nsetImmediate(() => console.log('timeout4'));\n\n// 执行结果：\n// node11之前：timeout1 -> timeout2 -> timeout3 -> timeout4 -> next tick1 -> next tick2 -> promise resolve\n\n// node11之后：timeout1 -> next tick1 -> promise resolve -> timeout2 -> next tick2 -> timeout3 -> timeout4\n```\n\n过程分析：\n\nnode11之前，在check阶段执行setImmediate的时候遇到的微任务都会先放入微任务队列，等check阶段所有的setImmediate执行完成之后，在进入关闭事件回调阶段 close callback之前，会讲所有的微任务清空。\n\nnode11之后，在check阶段执行setImmediate的时候遇到的微任务都在当前的宏任务执行完成之后，马上清空该宏任务生成的微任务。等微任务清空后，再去执行下一个宏任务。\n\n\n\n2. setTimeout 和 setImmediate\n\n``` javascript\nsetTimeout(function timeout () {\n    console.log('timeout');\n},0);\nsetImmediate(function immediate () {\n    console.log('immediate');\n});\n// 执行结果：结果不固定\n```\n\n对于以上代码来说，setTimeout可能执行在前，也可能执行在后。首先科普一下，setTimeout(fn, 0) === setTimeout(fn, 1)，这个是源码决定的。\n\n因为进入事件循环也是需要时间的，如果在进入时间循环的准备阶段花费了大于1ms的时间，那么此时就成了一个timer超时且poll队列为空的状态，会回到timer阶段执行setTimeout回调。\n\n如果进入时间循环的准备阶段花费了小于1ms的时间，不满足timer超时且poll队列为空的状态，就会还是处于poll阶段执行I/O回调。由于poll队列为空，且有setImmediate回调，就直接跳转到check阶段执行immediate回调函数。\n\n\n\n3. 异步I/O回调中的setTimeout 和 setImmediate\n\n``` javascript\nconst fs =require('fs')\nfs.readFile('./reptileServer.js', 'utf-8', (err, res) => {\n    if (err) throw err\n    setTimeout(function timeout () {\n        console.log('timeout');\n    },0);\n    setImmediate(function immediate () {\n        console.log('immediate');\n    });\n})\n// 执行结果：immediate -> timeout\n```\n\n这个🌰跟上面看似只有细微差别，实际上会有完全不同的执行结果，会稳定先执行setImmediate回调。因为在I/O回调生成setTimeout和setImmediate宏任务时，poll队列不为空，所以不管timer是否超时都不会进入到timers阶段。等队列为空时，会直接到check阶段执行setImmediate回调。","source":"_posts/Node的事件循环机制.md","raw":"---\ntitle: Node的事件循环机制\n\ntags: [事件循环]\n\ncategories: Node\n---\n\n#### 简介\n\nNode中的Event Loop和浏览器中的是完全不相同的东西。Node采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv。libuv是一个事件驱动的跨平台抽象层，封装了不同操作系统的一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。\n\n\n\n#### 运行机制\n\nV8引擎解析js脚本，解析后的代码调用Node API。libuv库负责Node API的执行，将不同的任务分配给不同的线程，形成一个事件循环，以异步的方式将任务的返回结果返回给V8引擎，再由V8引擎将结果返回给用户。\n\n\n\n#### 事件循环的阶段顺序\n\n输入数据阶段 incoming data -> 轮询阶段 poll ->  检查阶段 check -> 关闭事件回调阶段 close callback -> 定时器检测阶段 timer ->  I/O事件回调阶段 I/O callbacks -> 闲置阶段 idle,prepare -> 轮询阶段 poll ...\n\n\n\n#### 六大阶段概述\n\n* 定时器检测阶段 timer：执行timer的回调，即setTimeout、setInterval里面的回调函数；\n* I/O事件回调阶段 I/O callbacks：执行上一轮循环中未被执行的一些I/O回调；\n* 闲置阶段 idle, prepare：仅系统内部使用；\n* 轮询阶段 poll：检索新的I/O事件，执行与I/O相关的回调；\n* 检查阶段 check：setImmediate()回调函数在这里执行；\n* 关闭事件回调阶段 close callback：一些关闭的回调函数，如socket.on('close', ...)。\n\n\n\n⚠️每个阶段都有一个先进先出队列来执行回调。通常情况下，当事件循环进入给定的阶段后，将执行该阶段的任何操作，然后执行该阶段队列中的回调。当该队列执行完毕或达到最大回调限制时，事件循环将移动到下一阶段。\n\n\n\n#### 三大阶段详述\n\n日常开发中绝大部分的异步任务都是在poll、check、timer这三个阶段，重点分析一下。\n\n##### timer\n\ntimer阶段会执行setTimeout、setInterval里面的回调函数，并且是由poll阶段控制的。在Node中定时器指定的时间也不是准确时间，只能是尽快执行。\n\n\n\n##### check\n\nsetImmediate()回调函数在这里执行。\n\n\n\n##### poll\n\npoll阶段是一个至关重要的阶段，执行逻辑相对复杂，具体流程如下。\n\n在这一阶段中，系统会做两件事情：\n\n1. 回到timer阶段执行回调：设定了timer且poll队列为空，如果有timer超时，则会回到timer阶段；\n2. 执行I/O回调（没满足上面的条件就会走下面流程）：\n   * 如果poll队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；\n   * 如果poll队列为空时，也有两种情况：\n     * 如果有setImmediate回调需要执行，poll阶段会停止并且进入到check阶段执行回调；\n     * 如果没有setImmediate回调需要执行，会等待回调被加入队列中并立即执行回调。这里有个超时时间设置，防止一直等待下去。\n\n\n\n\n\n#### 分析差别\n\nNode中的事件循环和浏览器的事件循环，差别就在于浏览器中事件循环中异步任务只分为了宏任务和微任务，他们执行的是同属于一个阶段的，简单理解为渲染之前的阶段。而Node中的不同的宏任务会有不同的执行阶段，且微任务的执行时机跟Node的版本还有关系。\n\n\n\n##### Node中宏任务和微任务\n\n###### 宏任务 macro-task\n\n* setTimeout：timers阶段执行；\n* setInterval：timers阶段执行；\n* setImmediate：check阶段执行；\n* script 整体代码：执行同步代码，将不同类型的异步任务添加到任务队列；\n* I/O 操作：poll阶段执行。\n* ...\n\n###### 微任务 micro-task\n\n* process.nextTick：与普通的微任务有区别，在微任务队列执行之前执行；\n* Promise.then;\n* ...\n\n\n\n##### 版本差异总结\n\nnode11之前，每一个event loop阶段完成后都会先清空nextTick队列，再清空微任务队列。\n\nnode11之后，process.nextTick是微任务的一种，但还是执行顺序优先于Promise.then。在异步任务的执行方面，已经在向浏览器看齐，最大的改变是微任务的执行时机发生变化了。当执行完一个宏任务时，生成的微任务会在这个宏任务出队列的时候立即执行，而不是等到一个event loop阶段再去执行。\n\n⚠️虽然node11之后，异步方法的执行方面已经在向浏览器看齐了，但是不同的宏任务还是位于不同的阶段去执行，这个跟浏览器还是很大差别的。\n\n\n\n###### 举几个🌰\n\n1. 微任务执行时机\n\n``` javascript\nsetImmediate(() => {\n    console.log('timeout1')\n    Promise.resolve().then(() => console.log('promise resolve'))\n    process.nextTick(() => console.log('next tick1'))\n});\nsetImmediate(() => {\n    console.log('timeout2')\n    process.nextTick(() => console.log('next tick2'))\n});\nsetImmediate(() => console.log('timeout3'));\nsetImmediate(() => console.log('timeout4'));\n\n// 执行结果：\n// node11之前：timeout1 -> timeout2 -> timeout3 -> timeout4 -> next tick1 -> next tick2 -> promise resolve\n\n// node11之后：timeout1 -> next tick1 -> promise resolve -> timeout2 -> next tick2 -> timeout3 -> timeout4\n```\n\n过程分析：\n\nnode11之前，在check阶段执行setImmediate的时候遇到的微任务都会先放入微任务队列，等check阶段所有的setImmediate执行完成之后，在进入关闭事件回调阶段 close callback之前，会讲所有的微任务清空。\n\nnode11之后，在check阶段执行setImmediate的时候遇到的微任务都在当前的宏任务执行完成之后，马上清空该宏任务生成的微任务。等微任务清空后，再去执行下一个宏任务。\n\n\n\n2. setTimeout 和 setImmediate\n\n``` javascript\nsetTimeout(function timeout () {\n    console.log('timeout');\n},0);\nsetImmediate(function immediate () {\n    console.log('immediate');\n});\n// 执行结果：结果不固定\n```\n\n对于以上代码来说，setTimeout可能执行在前，也可能执行在后。首先科普一下，setTimeout(fn, 0) === setTimeout(fn, 1)，这个是源码决定的。\n\n因为进入事件循环也是需要时间的，如果在进入时间循环的准备阶段花费了大于1ms的时间，那么此时就成了一个timer超时且poll队列为空的状态，会回到timer阶段执行setTimeout回调。\n\n如果进入时间循环的准备阶段花费了小于1ms的时间，不满足timer超时且poll队列为空的状态，就会还是处于poll阶段执行I/O回调。由于poll队列为空，且有setImmediate回调，就直接跳转到check阶段执行immediate回调函数。\n\n\n\n3. 异步I/O回调中的setTimeout 和 setImmediate\n\n``` javascript\nconst fs =require('fs')\nfs.readFile('./reptileServer.js', 'utf-8', (err, res) => {\n    if (err) throw err\n    setTimeout(function timeout () {\n        console.log('timeout');\n    },0);\n    setImmediate(function immediate () {\n        console.log('immediate');\n    });\n})\n// 执行结果：immediate -> timeout\n```\n\n这个🌰跟上面看似只有细微差别，实际上会有完全不同的执行结果，会稳定先执行setImmediate回调。因为在I/O回调生成setTimeout和setImmediate宏任务时，poll队列不为空，所以不管timer是否超时都不会进入到timers阶段。等队列为空时，会直接到check阶段执行setImmediate回调。","slug":"Node的事件循环机制","published":1,"date":"2023-11-07T03:36:00.759Z","updated":"2023-11-07T03:36:00.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87l0008u17u3vbla8qk","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Node中的Event Loop和浏览器中的是完全不相同的东西。Node采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv。libuv是一个事件驱动的跨平台抽象层，封装了不同操作系统的一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。</p>\n<h4 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h4><p>V8引擎解析js脚本，解析后的代码调用Node API。libuv库负责Node API的执行，将不同的任务分配给不同的线程，形成一个事件循环，以异步的方式将任务的返回结果返回给V8引擎，再由V8引擎将结果返回给用户。</p>\n<h4 id=\"事件循环的阶段顺序\"><a href=\"#事件循环的阶段顺序\" class=\"headerlink\" title=\"事件循环的阶段顺序\"></a>事件循环的阶段顺序</h4><p>输入数据阶段 incoming data -&gt; 轮询阶段 poll -&gt;  检查阶段 check -&gt; 关闭事件回调阶段 close callback -&gt; 定时器检测阶段 timer -&gt;  I/O事件回调阶段 I/O callbacks -&gt; 闲置阶段 idle,prepare -&gt; 轮询阶段 poll …</p>\n<h4 id=\"六大阶段概述\"><a href=\"#六大阶段概述\" class=\"headerlink\" title=\"六大阶段概述\"></a>六大阶段概述</h4><ul>\n<li>定时器检测阶段 timer：执行timer的回调，即setTimeout、setInterval里面的回调函数；</li>\n<li>I/O事件回调阶段 I/O callbacks：执行上一轮循环中未被执行的一些I/O回调；</li>\n<li>闲置阶段 idle, prepare：仅系统内部使用；</li>\n<li>轮询阶段 poll：检索新的I/O事件，执行与I/O相关的回调；</li>\n<li>检查阶段 check：setImmediate()回调函数在这里执行；</li>\n<li>关闭事件回调阶段 close callback：一些关闭的回调函数，如socket.on(‘close’, …)。</li>\n</ul>\n<p>⚠️每个阶段都有一个先进先出队列来执行回调。通常情况下，当事件循环进入给定的阶段后，将执行该阶段的任何操作，然后执行该阶段队列中的回调。当该队列执行完毕或达到最大回调限制时，事件循环将移动到下一阶段。</p>\n<h4 id=\"三大阶段详述\"><a href=\"#三大阶段详述\" class=\"headerlink\" title=\"三大阶段详述\"></a>三大阶段详述</h4><p>日常开发中绝大部分的异步任务都是在poll、check、timer这三个阶段，重点分析一下。</p>\n<h5 id=\"timer\"><a href=\"#timer\" class=\"headerlink\" title=\"timer\"></a>timer</h5><p>timer阶段会执行setTimeout、setInterval里面的回调函数，并且是由poll阶段控制的。在Node中定时器指定的时间也不是准确时间，只能是尽快执行。</p>\n<h5 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h5><p>setImmediate()回调函数在这里执行。</p>\n<h5 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h5><p>poll阶段是一个至关重要的阶段，执行逻辑相对复杂，具体流程如下。</p>\n<p>在这一阶段中，系统会做两件事情：</p>\n<ol>\n<li>回到timer阶段执行回调：设定了timer且poll队列为空，如果有timer超时，则会回到timer阶段；</li>\n<li>执行I/O回调（没满足上面的条件就会走下面流程）：<ul>\n<li>如果poll队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；</li>\n<li>如果poll队列为空时，也有两种情况：<ul>\n<li>如果有setImmediate回调需要执行，poll阶段会停止并且进入到check阶段执行回调；</li>\n<li>如果没有setImmediate回调需要执行，会等待回调被加入队列中并立即执行回调。这里有个超时时间设置，防止一直等待下去。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"分析差别\"><a href=\"#分析差别\" class=\"headerlink\" title=\"分析差别\"></a>分析差别</h4><p>Node中的事件循环和浏览器的事件循环，差别就在于浏览器中事件循环中异步任务只分为了宏任务和微任务，他们执行的是同属于一个阶段的，简单理解为渲染之前的阶段。而Node中的不同的宏任务会有不同的执行阶段，且微任务的执行时机跟Node的版本还有关系。</p>\n<h5 id=\"Node中宏任务和微任务\"><a href=\"#Node中宏任务和微任务\" class=\"headerlink\" title=\"Node中宏任务和微任务\"></a>Node中宏任务和微任务</h5><h6 id=\"宏任务-macro-task\"><a href=\"#宏任务-macro-task\" class=\"headerlink\" title=\"宏任务 macro-task\"></a>宏任务 macro-task</h6><ul>\n<li>setTimeout：timers阶段执行；</li>\n<li>setInterval：timers阶段执行；</li>\n<li>setImmediate：check阶段执行；</li>\n<li>script 整体代码：执行同步代码，将不同类型的异步任务添加到任务队列；</li>\n<li>I/O 操作：poll阶段执行。</li>\n<li>…</li>\n</ul>\n<h6 id=\"微任务-micro-task\"><a href=\"#微任务-micro-task\" class=\"headerlink\" title=\"微任务 micro-task\"></a>微任务 micro-task</h6><ul>\n<li>process.nextTick：与普通的微任务有区别，在微任务队列执行之前执行；</li>\n<li>Promise.then;</li>\n<li>…</li>\n</ul>\n<h5 id=\"版本差异总结\"><a href=\"#版本差异总结\" class=\"headerlink\" title=\"版本差异总结\"></a>版本差异总结</h5><p>node11之前，每一个event loop阶段完成后都会先清空nextTick队列，再清空微任务队列。</p>\n<p>node11之后，process.nextTick是微任务的一种，但还是执行顺序优先于Promise.then。在异步任务的执行方面，已经在向浏览器看齐，最大的改变是微任务的执行时机发生变化了。当执行完一个宏任务时，生成的微任务会在这个宏任务出队列的时候立即执行，而不是等到一个event loop阶段再去执行。</p>\n<p>⚠️虽然node11之后，异步方法的执行方面已经在向浏览器看齐了，但是不同的宏任务还是位于不同的阶段去执行，这个跟浏览器还是很大差别的。</p>\n<h6 id=\"举几个🌰\"><a href=\"#举几个🌰\" class=\"headerlink\" title=\"举几个🌰\"></a>举几个🌰</h6><ol>\n<li>微任务执行时机</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise resolve&#x27;</span>))</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next tick1&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next tick2&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout3&#x27;</span>));</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout4&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// node11之前：timeout1 -&gt; timeout2 -&gt; timeout3 -&gt; timeout4 -&gt; next tick1 -&gt; next tick2 -&gt; promise resolve</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node11之后：timeout1 -&gt; next tick1 -&gt; promise resolve -&gt; timeout2 -&gt; next tick2 -&gt; timeout3 -&gt; timeout4</span></span><br></pre></td></tr></table></figure>\n\n<p>过程分析：</p>\n<p>node11之前，在check阶段执行setImmediate的时候遇到的微任务都会先放入微任务队列，等check阶段所有的setImmediate执行完成之后，在进入关闭事件回调阶段 close callback之前，会讲所有的微任务清空。</p>\n<p>node11之后，在check阶段执行setImmediate的时候遇到的微任务都在当前的宏任务执行完成之后，马上清空该宏任务生成的微任务。等微任务清空后，再去执行下一个宏任务。</p>\n<ol start=\"2\">\n<li>setTimeout 和 setImmediate</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">immediate</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;immediate&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行结果：结果不固定</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上代码来说，setTimeout可能执行在前，也可能执行在后。首先科普一下，setTimeout(fn, 0) === setTimeout(fn, 1)，这个是源码决定的。</p>\n<p>因为进入事件循环也是需要时间的，如果在进入时间循环的准备阶段花费了大于1ms的时间，那么此时就成了一个timer超时且poll队列为空的状态，会回到timer阶段执行setTimeout回调。</p>\n<p>如果进入时间循环的准备阶段花费了小于1ms的时间，不满足timer超时且poll队列为空的状态，就会还是处于poll阶段执行I/O回调。由于poll队列为空，且有setImmediate回调，就直接跳转到check阶段执行immediate回调函数。</p>\n<ol start=\"3\">\n<li>异步I/O回调中的setTimeout 和 setImmediate</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs =<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./reptileServer.js&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">immediate</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;immediate&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果：immediate -&gt; timeout</span></span><br></pre></td></tr></table></figure>\n\n<p>这个🌰跟上面看似只有细微差别，实际上会有完全不同的执行结果，会稳定先执行setImmediate回调。因为在I/O回调生成setTimeout和setImmediate宏任务时，poll队列不为空，所以不管timer是否超时都不会进入到timers阶段。等队列为空时，会直接到check阶段执行setImmediate回调。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Node中的Event Loop和浏览器中的是完全不相同的东西。Node采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv。libuv是一个事件驱动的跨平台抽象层，封装了不同操作系统的一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。</p>\n<h4 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h4><p>V8引擎解析js脚本，解析后的代码调用Node API。libuv库负责Node API的执行，将不同的任务分配给不同的线程，形成一个事件循环，以异步的方式将任务的返回结果返回给V8引擎，再由V8引擎将结果返回给用户。</p>\n<h4 id=\"事件循环的阶段顺序\"><a href=\"#事件循环的阶段顺序\" class=\"headerlink\" title=\"事件循环的阶段顺序\"></a>事件循环的阶段顺序</h4><p>输入数据阶段 incoming data -&gt; 轮询阶段 poll -&gt;  检查阶段 check -&gt; 关闭事件回调阶段 close callback -&gt; 定时器检测阶段 timer -&gt;  I/O事件回调阶段 I/O callbacks -&gt; 闲置阶段 idle,prepare -&gt; 轮询阶段 poll …</p>\n<h4 id=\"六大阶段概述\"><a href=\"#六大阶段概述\" class=\"headerlink\" title=\"六大阶段概述\"></a>六大阶段概述</h4><ul>\n<li>定时器检测阶段 timer：执行timer的回调，即setTimeout、setInterval里面的回调函数；</li>\n<li>I/O事件回调阶段 I/O callbacks：执行上一轮循环中未被执行的一些I/O回调；</li>\n<li>闲置阶段 idle, prepare：仅系统内部使用；</li>\n<li>轮询阶段 poll：检索新的I/O事件，执行与I/O相关的回调；</li>\n<li>检查阶段 check：setImmediate()回调函数在这里执行；</li>\n<li>关闭事件回调阶段 close callback：一些关闭的回调函数，如socket.on(‘close’, …)。</li>\n</ul>\n<p>⚠️每个阶段都有一个先进先出队列来执行回调。通常情况下，当事件循环进入给定的阶段后，将执行该阶段的任何操作，然后执行该阶段队列中的回调。当该队列执行完毕或达到最大回调限制时，事件循环将移动到下一阶段。</p>\n<h4 id=\"三大阶段详述\"><a href=\"#三大阶段详述\" class=\"headerlink\" title=\"三大阶段详述\"></a>三大阶段详述</h4><p>日常开发中绝大部分的异步任务都是在poll、check、timer这三个阶段，重点分析一下。</p>\n<h5 id=\"timer\"><a href=\"#timer\" class=\"headerlink\" title=\"timer\"></a>timer</h5><p>timer阶段会执行setTimeout、setInterval里面的回调函数，并且是由poll阶段控制的。在Node中定时器指定的时间也不是准确时间，只能是尽快执行。</p>\n<h5 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h5><p>setImmediate()回调函数在这里执行。</p>\n<h5 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h5><p>poll阶段是一个至关重要的阶段，执行逻辑相对复杂，具体流程如下。</p>\n<p>在这一阶段中，系统会做两件事情：</p>\n<ol>\n<li>回到timer阶段执行回调：设定了timer且poll队列为空，如果有timer超时，则会回到timer阶段；</li>\n<li>执行I/O回调（没满足上面的条件就会走下面流程）：<ul>\n<li>如果poll队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；</li>\n<li>如果poll队列为空时，也有两种情况：<ul>\n<li>如果有setImmediate回调需要执行，poll阶段会停止并且进入到check阶段执行回调；</li>\n<li>如果没有setImmediate回调需要执行，会等待回调被加入队列中并立即执行回调。这里有个超时时间设置，防止一直等待下去。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"分析差别\"><a href=\"#分析差别\" class=\"headerlink\" title=\"分析差别\"></a>分析差别</h4><p>Node中的事件循环和浏览器的事件循环，差别就在于浏览器中事件循环中异步任务只分为了宏任务和微任务，他们执行的是同属于一个阶段的，简单理解为渲染之前的阶段。而Node中的不同的宏任务会有不同的执行阶段，且微任务的执行时机跟Node的版本还有关系。</p>\n<h5 id=\"Node中宏任务和微任务\"><a href=\"#Node中宏任务和微任务\" class=\"headerlink\" title=\"Node中宏任务和微任务\"></a>Node中宏任务和微任务</h5><h6 id=\"宏任务-macro-task\"><a href=\"#宏任务-macro-task\" class=\"headerlink\" title=\"宏任务 macro-task\"></a>宏任务 macro-task</h6><ul>\n<li>setTimeout：timers阶段执行；</li>\n<li>setInterval：timers阶段执行；</li>\n<li>setImmediate：check阶段执行；</li>\n<li>script 整体代码：执行同步代码，将不同类型的异步任务添加到任务队列；</li>\n<li>I/O 操作：poll阶段执行。</li>\n<li>…</li>\n</ul>\n<h6 id=\"微任务-micro-task\"><a href=\"#微任务-micro-task\" class=\"headerlink\" title=\"微任务 micro-task\"></a>微任务 micro-task</h6><ul>\n<li>process.nextTick：与普通的微任务有区别，在微任务队列执行之前执行；</li>\n<li>Promise.then;</li>\n<li>…</li>\n</ul>\n<h5 id=\"版本差异总结\"><a href=\"#版本差异总结\" class=\"headerlink\" title=\"版本差异总结\"></a>版本差异总结</h5><p>node11之前，每一个event loop阶段完成后都会先清空nextTick队列，再清空微任务队列。</p>\n<p>node11之后，process.nextTick是微任务的一种，但还是执行顺序优先于Promise.then。在异步任务的执行方面，已经在向浏览器看齐，最大的改变是微任务的执行时机发生变化了。当执行完一个宏任务时，生成的微任务会在这个宏任务出队列的时候立即执行，而不是等到一个event loop阶段再去执行。</p>\n<p>⚠️虽然node11之后，异步方法的执行方面已经在向浏览器看齐了，但是不同的宏任务还是位于不同的阶段去执行，这个跟浏览器还是很大差别的。</p>\n<h6 id=\"举几个🌰\"><a href=\"#举几个🌰\" class=\"headerlink\" title=\"举几个🌰\"></a>举几个🌰</h6><ol>\n<li>微任务执行时机</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise resolve&#x27;</span>))</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next tick1&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next tick2&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout3&#x27;</span>));</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout4&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// node11之前：timeout1 -&gt; timeout2 -&gt; timeout3 -&gt; timeout4 -&gt; next tick1 -&gt; next tick2 -&gt; promise resolve</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node11之后：timeout1 -&gt; next tick1 -&gt; promise resolve -&gt; timeout2 -&gt; next tick2 -&gt; timeout3 -&gt; timeout4</span></span><br></pre></td></tr></table></figure>\n\n<p>过程分析：</p>\n<p>node11之前，在check阶段执行setImmediate的时候遇到的微任务都会先放入微任务队列，等check阶段所有的setImmediate执行完成之后，在进入关闭事件回调阶段 close callback之前，会讲所有的微任务清空。</p>\n<p>node11之后，在check阶段执行setImmediate的时候遇到的微任务都在当前的宏任务执行完成之后，马上清空该宏任务生成的微任务。等微任务清空后，再去执行下一个宏任务。</p>\n<ol start=\"2\">\n<li>setTimeout 和 setImmediate</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">immediate</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;immediate&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行结果：结果不固定</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上代码来说，setTimeout可能执行在前，也可能执行在后。首先科普一下，setTimeout(fn, 0) === setTimeout(fn, 1)，这个是源码决定的。</p>\n<p>因为进入事件循环也是需要时间的，如果在进入时间循环的准备阶段花费了大于1ms的时间，那么此时就成了一个timer超时且poll队列为空的状态，会回到timer阶段执行setTimeout回调。</p>\n<p>如果进入时间循环的准备阶段花费了小于1ms的时间，不满足timer超时且poll队列为空的状态，就会还是处于poll阶段执行I/O回调。由于poll队列为空，且有setImmediate回调，就直接跳转到check阶段执行immediate回调函数。</p>\n<ol start=\"3\">\n<li>异步I/O回调中的setTimeout 和 setImmediate</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs =<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./reptileServer.js&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">immediate</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;immediate&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果：immediate -&gt; timeout</span></span><br></pre></td></tr></table></figure>\n\n<p>这个🌰跟上面看似只有细微差别，实际上会有完全不同的执行结果，会稳定先执行setImmediate回调。因为在I/O回调生成setTimeout和setImmediate宏任务时，poll队列不为空，所以不管timer是否超时都不会进入到timers阶段。等队列为空时，会直接到check阶段执行setImmediate回调。</p>\n"},{"title":"Loader的执行顺序","date":"2021-08-18T16:00:00.000Z","_content":"\n\n\n### 配置 webpack.config.js\n\n```javascript\n module: {\n    rules: [ \n      { \n        test: /\\.json$/, \n        use: ['loader1.js', 'loader2.js','loader3.js']\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n```\n\n\n\n### 编写 loader 文件\n\n#### loader1.js\n\n```javascript\n/**\n * 执行顺序：webpack当前loader链中的pitch方法同步代码执行完成之后，\n * 再从右往左（从下往上）执行loader函数。\n * 注意：异步回调使用this.async，异步回调执行完之后才会下一个loader.\n */\nmodule.exports = function (content) {\n    console.log('1')\n    return content\n}\n\n/**\n * pitch方法不是必须的。\n * 执行顺序: webpack会从左往右（从上往下）执行loader链中的每一个pitch方法。\n * 注意：如果picth方法中有异步代码，webpack执行的时候不会等待，\n * 会将loader链中的pitch方法中同步代码执行完再来执行异步代码。\n */\nmodule.exports.pitch = () => {\n    console.log('pitch1')\n}\n```\n\n\n\n#### loader2.js\n\n``` javascript\n/**\n * content: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果。\n * map: 可选参数，sourceMap\n * mate: 可选参数，传递给下一个loader数据（在这个例子中下一个loader是loader1） \n */\nmodule.exports = function (content, map, meta) {\n    // 接收pitch传递过来data\n    // console.log(this.data.customStr) // 传递给loader函数的字符串\n\n    // 接收loader3传递过来的meta数据\n    // console.log(meta) // { preLoader: 'loader3' }\n\n    const callback = this.async()\n    setTimeout(() => {\n        console.log('2')\n        callback(null, content, map)\n    }, 1000)\n}\n\n/**\n * remainingRequest：当前loader之后的资源请求字符串；\n * previousRequest：当前loader之前经历的loader列表以'!'连接的字符串；\n * data: 用于与当前loader函数传递数据\n */\nmodule.exports.pitch = (remainingRequest, precedingRequest, data) => {\n    /**\n     * precedingRequest: /Users/xxx/loaders/loader3.js!/Users/xxx/testLoader.json\n     * precedingRequest /Users/xxx/loaders/loader1.js\n     */\n\n    // 传递给loader函数data数据\n    // data.customStr = \"传递给loader函数的字符串\" \n    \n    console.log('pitch2')\n    setTimeout(() => {\n        console.log('async pitch2')\n    }, 1000)\n}\n```\n\n\n\n#### loader3.js\n\n``` javascript\nmodule.exports = function (content, map, meta) {\n    console.log('3')\n    // 给loader2传递meta数据\n    this.callback(null, content, map, { preLoader: 'loader3' })\n}\n\nmodule.exports.pitch = () => {\n    console.log('pitch3')\n}\n```\n\n\n\n### 打包执行结果\n\n``` she\npitch1\npitch2\npitch3\n3\nasync pitch2\n2\n1\n```\n\n","source":"_posts/Loader的执行顺序.md","raw":"---\ntitle: Loader的执行顺序\n\ndate: 2021-08-19\n\ntags: [loader]\n\ncategories: webpack\n---\n\n\n\n### 配置 webpack.config.js\n\n```javascript\n module: {\n    rules: [ \n      { \n        test: /\\.json$/, \n        use: ['loader1.js', 'loader2.js','loader3.js']\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n```\n\n\n\n### 编写 loader 文件\n\n#### loader1.js\n\n```javascript\n/**\n * 执行顺序：webpack当前loader链中的pitch方法同步代码执行完成之后，\n * 再从右往左（从下往上）执行loader函数。\n * 注意：异步回调使用this.async，异步回调执行完之后才会下一个loader.\n */\nmodule.exports = function (content) {\n    console.log('1')\n    return content\n}\n\n/**\n * pitch方法不是必须的。\n * 执行顺序: webpack会从左往右（从上往下）执行loader链中的每一个pitch方法。\n * 注意：如果picth方法中有异步代码，webpack执行的时候不会等待，\n * 会将loader链中的pitch方法中同步代码执行完再来执行异步代码。\n */\nmodule.exports.pitch = () => {\n    console.log('pitch1')\n}\n```\n\n\n\n#### loader2.js\n\n``` javascript\n/**\n * content: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果。\n * map: 可选参数，sourceMap\n * mate: 可选参数，传递给下一个loader数据（在这个例子中下一个loader是loader1） \n */\nmodule.exports = function (content, map, meta) {\n    // 接收pitch传递过来data\n    // console.log(this.data.customStr) // 传递给loader函数的字符串\n\n    // 接收loader3传递过来的meta数据\n    // console.log(meta) // { preLoader: 'loader3' }\n\n    const callback = this.async()\n    setTimeout(() => {\n        console.log('2')\n        callback(null, content, map)\n    }, 1000)\n}\n\n/**\n * remainingRequest：当前loader之后的资源请求字符串；\n * previousRequest：当前loader之前经历的loader列表以'!'连接的字符串；\n * data: 用于与当前loader函数传递数据\n */\nmodule.exports.pitch = (remainingRequest, precedingRequest, data) => {\n    /**\n     * precedingRequest: /Users/xxx/loaders/loader3.js!/Users/xxx/testLoader.json\n     * precedingRequest /Users/xxx/loaders/loader1.js\n     */\n\n    // 传递给loader函数data数据\n    // data.customStr = \"传递给loader函数的字符串\" \n    \n    console.log('pitch2')\n    setTimeout(() => {\n        console.log('async pitch2')\n    }, 1000)\n}\n```\n\n\n\n#### loader3.js\n\n``` javascript\nmodule.exports = function (content, map, meta) {\n    console.log('3')\n    // 给loader2传递meta数据\n    this.callback(null, content, map, { preLoader: 'loader3' })\n}\n\nmodule.exports.pitch = () => {\n    console.log('pitch3')\n}\n```\n\n\n\n### 打包执行结果\n\n``` she\npitch1\npitch2\npitch3\n3\nasync pitch2\n2\n1\n```\n\n","slug":"Loader的执行顺序","published":1,"updated":"2023-11-07T03:36:00.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87n000bu17u5eyx6j12","content":"<h3 id=\"配置-webpack-config-js\"><a href=\"#配置-webpack-config-js\" class=\"headerlink\" title=\"配置 webpack.config.js\"></a>配置 webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>, </span><br><span class=\"line\">       <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;loader1.js&#x27;</span>, <span class=\"string\">&#x27;loader2.js&#x27;</span>,<span class=\"string\">&#x27;loader3.js&#x27;</span>]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编写-loader-文件\"><a href=\"#编写-loader-文件\" class=\"headerlink\" title=\"编写 loader 文件\"></a>编写 loader 文件</h3><h4 id=\"loader1-js\"><a href=\"#loader1-js\" class=\"headerlink\" title=\"loader1.js\"></a>loader1.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行顺序：webpack当前loader链中的pitch方法同步代码执行完成之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * 再从右往左（从下往上）执行loader函数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：异步回调使用this.async，异步回调执行完之后才会下一个loader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * pitch方法不是必须的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行顺序: webpack会从左往右（从上往下）执行loader链中的每一个pitch方法。</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：如果picth方法中有异步代码，webpack执行的时候不会等待，</span></span><br><span class=\"line\"><span class=\"comment\"> * 会将loader链中的pitch方法中同步代码执行完再来执行异步代码。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"loader2-js\"><a href=\"#loader2-js\" class=\"headerlink\" title=\"loader2.js\"></a>loader2.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * content: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * map: 可选参数，sourceMap</span></span><br><span class=\"line\"><span class=\"comment\"> * mate: 可选参数，传递给下一个loader数据（在这个例子中下一个loader是loader1） </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收pitch传递过来data</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(this.data.customStr) // 传递给loader函数的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收loader3传递过来的meta数据</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(meta) // &#123; preLoader: &#x27;loader3&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * remainingRequest：当前loader之后的资源请求字符串；</span></span><br><span class=\"line\"><span class=\"comment\"> * previousRequest：当前loader之前经历的loader列表以&#x27;!&#x27;连接的字符串；</span></span><br><span class=\"line\"><span class=\"comment\"> * data: 用于与当前loader函数传递数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">(<span class=\"params\">remainingRequest, precedingRequest, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * precedingRequest: /Users/xxx/loaders/loader3.js!/Users/xxx/testLoader.json</span></span><br><span class=\"line\"><span class=\"comment\">     * precedingRequest /Users/xxx/loaders/loader1.js</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递给loader函数data数据</span></span><br><span class=\"line\">    <span class=\"comment\">// data.customStr = &quot;传递给loader函数的字符串&quot; </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async pitch2&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"loader3-js\"><a href=\"#loader3-js\" class=\"headerlink\" title=\"loader3.js\"></a>loader3.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 给loader2传递meta数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map, &#123; <span class=\"attr\">preLoader</span>: <span class=\"string\">&#x27;loader3&#x27;</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch3&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打包执行结果\"><a href=\"#打包执行结果\" class=\"headerlink\" title=\"打包执行结果\"></a>打包执行结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pitch1</span><br><span class=\"line\">pitch2</span><br><span class=\"line\">pitch3</span><br><span class=\"line\">3</span><br><span class=\"line\">async pitch2</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"配置-webpack-config-js\"><a href=\"#配置-webpack-config-js\" class=\"headerlink\" title=\"配置 webpack.config.js\"></a>配置 webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>, </span><br><span class=\"line\">       <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;loader1.js&#x27;</span>, <span class=\"string\">&#x27;loader2.js&#x27;</span>,<span class=\"string\">&#x27;loader3.js&#x27;</span>]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编写-loader-文件\"><a href=\"#编写-loader-文件\" class=\"headerlink\" title=\"编写 loader 文件\"></a>编写 loader 文件</h3><h4 id=\"loader1-js\"><a href=\"#loader1-js\" class=\"headerlink\" title=\"loader1.js\"></a>loader1.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行顺序：webpack当前loader链中的pitch方法同步代码执行完成之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * 再从右往左（从下往上）执行loader函数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：异步回调使用this.async，异步回调执行完之后才会下一个loader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * pitch方法不是必须的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行顺序: webpack会从左往右（从上往下）执行loader链中的每一个pitch方法。</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：如果picth方法中有异步代码，webpack执行的时候不会等待，</span></span><br><span class=\"line\"><span class=\"comment\"> * 会将loader链中的pitch方法中同步代码执行完再来执行异步代码。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"loader2-js\"><a href=\"#loader2-js\" class=\"headerlink\" title=\"loader2.js\"></a>loader2.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * content: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * map: 可选参数，sourceMap</span></span><br><span class=\"line\"><span class=\"comment\"> * mate: 可选参数，传递给下一个loader数据（在这个例子中下一个loader是loader1） </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收pitch传递过来data</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(this.data.customStr) // 传递给loader函数的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收loader3传递过来的meta数据</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(meta) // &#123; preLoader: &#x27;loader3&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * remainingRequest：当前loader之后的资源请求字符串；</span></span><br><span class=\"line\"><span class=\"comment\"> * previousRequest：当前loader之前经历的loader列表以&#x27;!&#x27;连接的字符串；</span></span><br><span class=\"line\"><span class=\"comment\"> * data: 用于与当前loader函数传递数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">(<span class=\"params\">remainingRequest, precedingRequest, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * precedingRequest: /Users/xxx/loaders/loader3.js!/Users/xxx/testLoader.json</span></span><br><span class=\"line\"><span class=\"comment\">     * precedingRequest /Users/xxx/loaders/loader1.js</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传递给loader函数data数据</span></span><br><span class=\"line\">    <span class=\"comment\">// data.customStr = &quot;传递给loader函数的字符串&quot; </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async pitch2&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"loader3-js\"><a href=\"#loader3-js\" class=\"headerlink\" title=\"loader3.js\"></a>loader3.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 给loader2传递meta数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map, &#123; <span class=\"attr\">preLoader</span>: <span class=\"string\">&#x27;loader3&#x27;</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;pitch3&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打包执行结果\"><a href=\"#打包执行结果\" class=\"headerlink\" title=\"打包执行结果\"></a>打包执行结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pitch1</span><br><span class=\"line\">pitch2</span><br><span class=\"line\">pitch3</span><br><span class=\"line\">3</span><br><span class=\"line\">async pitch2</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Vue2.x的Virtual DOM","_content":"浏览器中的DOM的设计是非常复杂的，当我们频繁的去做DOM更新的时候，会产生一定的性能问题。\n\n而Virtual DOM就是一个用js对象去描述一个DOM节点，对Virtual DOM的操作代价会少很多。\n\n这个设计在react中也有用到，在Vue中Virtual DOM是用VNode这么一个Class去描述的，借鉴了⼀个开源库 snabbdom 的实现，然后加⼊了⼀些 Vue.js 特⾊的东⻄。\n\n\n\n⚠️ 使用了虚拟DOM不一定会比直接渲染真实DOM快。举个🌰：一些很明显直接替换DOM的情况下，用虚拟DOM+diff算法，明显是会更慢的。所以严谨的说法是，在复杂视图情况下，使用虚拟DOM+diff算法可以找到DOM树变更的地方，复用之前的DOM，是可以减少DOM的操作使渲染速度更快的。\n","source":"_posts/Vue2.x的Virtual DOM.md","raw":"---\ntitle: Vue2.x的Virtual DOM\n\ntags: [Virtual DOM]\n\ncategories: vue\n---\n浏览器中的DOM的设计是非常复杂的，当我们频繁的去做DOM更新的时候，会产生一定的性能问题。\n\n而Virtual DOM就是一个用js对象去描述一个DOM节点，对Virtual DOM的操作代价会少很多。\n\n这个设计在react中也有用到，在Vue中Virtual DOM是用VNode这么一个Class去描述的，借鉴了⼀个开源库 snabbdom 的实现，然后加⼊了⼀些 Vue.js 特⾊的东⻄。\n\n\n\n⚠️ 使用了虚拟DOM不一定会比直接渲染真实DOM快。举个🌰：一些很明显直接替换DOM的情况下，用虚拟DOM+diff算法，明显是会更慢的。所以严谨的说法是，在复杂视图情况下，使用虚拟DOM+diff算法可以找到DOM树变更的地方，复用之前的DOM，是可以减少DOM的操作使渲染速度更快的。\n","slug":"Vue2.x的Virtual DOM","published":1,"date":"2023-11-07T03:36:00.760Z","updated":"2023-11-07T03:36:00.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87n000cu17u78zihx76","content":"<p>浏览器中的DOM的设计是非常复杂的，当我们频繁的去做DOM更新的时候，会产生一定的性能问题。</p>\n<p>而Virtual DOM就是一个用js对象去描述一个DOM节点，对Virtual DOM的操作代价会少很多。</p>\n<p>这个设计在react中也有用到，在Vue中Virtual DOM是用VNode这么一个Class去描述的，借鉴了⼀个开源库 snabbdom 的实现，然后加⼊了⼀些 Vue.js 特⾊的东⻄。</p>\n<p>⚠️ 使用了虚拟DOM不一定会比直接渲染真实DOM快。举个🌰：一些很明显直接替换DOM的情况下，用虚拟DOM+diff算法，明显是会更慢的。所以严谨的说法是，在复杂视图情况下，使用虚拟DOM+diff算法可以找到DOM树变更的地方，复用之前的DOM，是可以减少DOM的操作使渲染速度更快的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>浏览器中的DOM的设计是非常复杂的，当我们频繁的去做DOM更新的时候，会产生一定的性能问题。</p>\n<p>而Virtual DOM就是一个用js对象去描述一个DOM节点，对Virtual DOM的操作代价会少很多。</p>\n<p>这个设计在react中也有用到，在Vue中Virtual DOM是用VNode这么一个Class去描述的，借鉴了⼀个开源库 snabbdom 的实现，然后加⼊了⼀些 Vue.js 特⾊的东⻄。</p>\n<p>⚠️ 使用了虚拟DOM不一定会比直接渲染真实DOM快。举个🌰：一些很明显直接替换DOM的情况下，用虚拟DOM+diff算法，明显是会更慢的。所以严谨的说法是，在复杂视图情况下，使用虚拟DOM+diff算法可以找到DOM树变更的地方，复用之前的DOM，是可以减少DOM的操作使渲染速度更快的。</p>\n"},{"title":"Vue2.x的nextTick实现原理","_content":"\n#### 定义\n\n在下次DOM更新循环结束之后执行延迟回调。\n\n在修改数据之后立即使用这个方法，获取更新后的DOM。实际上在派发更新过程中，同步任务执行之后会执行nextTick方法，参数是一个watcher队列执行函数。目的是当本次事件循环中所有的数据变化完成后，异步批量执行watcher队列的回调来实现DOM更新。所以在修改数据之后立即使用这个方法，就相当于nextTick执行更新了DOM的回调之后，再来执行这个nextTick里面的回调函数。\n\n\n\n#### 用途\n\n需要在视图更新之后，基于新的视图进⾏操作。\n\n\n\n#### 实现原理\n\nnextTick接收一个函数作为参数，这个函数也可以理解成一个回调函数。nextTick内部其实存储回调函数的一个队列数组，当外面执行同步执行几个nextTick方法的时候，会将这几个nextTick方法的参数存储到回调函数队列中。然后在nextTick的内部会创建一个异步任务。\n\n\n\n运行环境不同生成的异步任务的方式和结果也可能不同，具体的顺序如下：\n\n1. 判断是否支持Promise，如果支持就在Promise.then方法的回调中去遍历执行队列数组里的回调函数；\n2. 判断是否支持MutationObserver，如果支持就内部创建一个DOM元素，模拟修改DOM元素，以这种方式来执行监听DOM变化的回调函数，在这个回调函数中遍历执行队列数组里的回调函数；\n3. 判断是否支持setImmediate，如果支持就在setImmediate回调中遍历执行队列数组里的回调函数；\n4. 如果以上几种都不支持，setTimeout回调中遍历执行队列数组里的回调函数。\n\n\n\n前面两种方式生成的异步任务是微任务，后面两种生成的异步任务是宏任务。Vue2.x不同的版本对于这个过程的实现可能会有细微差异，但是目的就是生成一个异步任务，这个任务执行的时间越早越好。\n\n\n\nnextTick还有一个实现细节，就是当参数没传且运行环境支持Promise的时候，会返回一个Promise的实例，这个小功能可以按需使用。\n\n\n\n\n\n\n\n","source":"_posts/Vue2.x的nextTick实现原理.md","raw":"---\ntitle: Vue2.x的nextTick实现原理\n\ntags: [nextTick]\n\ncategories: vue\n---\n\n#### 定义\n\n在下次DOM更新循环结束之后执行延迟回调。\n\n在修改数据之后立即使用这个方法，获取更新后的DOM。实际上在派发更新过程中，同步任务执行之后会执行nextTick方法，参数是一个watcher队列执行函数。目的是当本次事件循环中所有的数据变化完成后，异步批量执行watcher队列的回调来实现DOM更新。所以在修改数据之后立即使用这个方法，就相当于nextTick执行更新了DOM的回调之后，再来执行这个nextTick里面的回调函数。\n\n\n\n#### 用途\n\n需要在视图更新之后，基于新的视图进⾏操作。\n\n\n\n#### 实现原理\n\nnextTick接收一个函数作为参数，这个函数也可以理解成一个回调函数。nextTick内部其实存储回调函数的一个队列数组，当外面执行同步执行几个nextTick方法的时候，会将这几个nextTick方法的参数存储到回调函数队列中。然后在nextTick的内部会创建一个异步任务。\n\n\n\n运行环境不同生成的异步任务的方式和结果也可能不同，具体的顺序如下：\n\n1. 判断是否支持Promise，如果支持就在Promise.then方法的回调中去遍历执行队列数组里的回调函数；\n2. 判断是否支持MutationObserver，如果支持就内部创建一个DOM元素，模拟修改DOM元素，以这种方式来执行监听DOM变化的回调函数，在这个回调函数中遍历执行队列数组里的回调函数；\n3. 判断是否支持setImmediate，如果支持就在setImmediate回调中遍历执行队列数组里的回调函数；\n4. 如果以上几种都不支持，setTimeout回调中遍历执行队列数组里的回调函数。\n\n\n\n前面两种方式生成的异步任务是微任务，后面两种生成的异步任务是宏任务。Vue2.x不同的版本对于这个过程的实现可能会有细微差异，但是目的就是生成一个异步任务，这个任务执行的时间越早越好。\n\n\n\nnextTick还有一个实现细节，就是当参数没传且运行环境支持Promise的时候，会返回一个Promise的实例，这个小功能可以按需使用。\n\n\n\n\n\n\n\n","slug":"Vue2.x的nextTick实现原理","published":1,"date":"2023-11-07T03:36:00.760Z","updated":"2023-11-07T03:36:00.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87p000gu17u7tssa1c6","content":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在下次DOM更新循环结束之后执行延迟回调。</p>\n<p>在修改数据之后立即使用这个方法，获取更新后的DOM。实际上在派发更新过程中，同步任务执行之后会执行nextTick方法，参数是一个watcher队列执行函数。目的是当本次事件循环中所有的数据变化完成后，异步批量执行watcher队列的回调来实现DOM更新。所以在修改数据之后立即使用这个方法，就相当于nextTick执行更新了DOM的回调之后，再来执行这个nextTick里面的回调函数。</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>需要在视图更新之后，基于新的视图进⾏操作。</p>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>nextTick接收一个函数作为参数，这个函数也可以理解成一个回调函数。nextTick内部其实存储回调函数的一个队列数组，当外面执行同步执行几个nextTick方法的时候，会将这几个nextTick方法的参数存储到回调函数队列中。然后在nextTick的内部会创建一个异步任务。</p>\n<p>运行环境不同生成的异步任务的方式和结果也可能不同，具体的顺序如下：</p>\n<ol>\n<li>判断是否支持Promise，如果支持就在Promise.then方法的回调中去遍历执行队列数组里的回调函数；</li>\n<li>判断是否支持MutationObserver，如果支持就内部创建一个DOM元素，模拟修改DOM元素，以这种方式来执行监听DOM变化的回调函数，在这个回调函数中遍历执行队列数组里的回调函数；</li>\n<li>判断是否支持setImmediate，如果支持就在setImmediate回调中遍历执行队列数组里的回调函数；</li>\n<li>如果以上几种都不支持，setTimeout回调中遍历执行队列数组里的回调函数。</li>\n</ol>\n<p>前面两种方式生成的异步任务是微任务，后面两种生成的异步任务是宏任务。Vue2.x不同的版本对于这个过程的实现可能会有细微差异，但是目的就是生成一个异步任务，这个任务执行的时间越早越好。</p>\n<p>nextTick还有一个实现细节，就是当参数没传且运行环境支持Promise的时候，会返回一个Promise的实例，这个小功能可以按需使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>在下次DOM更新循环结束之后执行延迟回调。</p>\n<p>在修改数据之后立即使用这个方法，获取更新后的DOM。实际上在派发更新过程中，同步任务执行之后会执行nextTick方法，参数是一个watcher队列执行函数。目的是当本次事件循环中所有的数据变化完成后，异步批量执行watcher队列的回调来实现DOM更新。所以在修改数据之后立即使用这个方法，就相当于nextTick执行更新了DOM的回调之后，再来执行这个nextTick里面的回调函数。</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>需要在视图更新之后，基于新的视图进⾏操作。</p>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>nextTick接收一个函数作为参数，这个函数也可以理解成一个回调函数。nextTick内部其实存储回调函数的一个队列数组，当外面执行同步执行几个nextTick方法的时候，会将这几个nextTick方法的参数存储到回调函数队列中。然后在nextTick的内部会创建一个异步任务。</p>\n<p>运行环境不同生成的异步任务的方式和结果也可能不同，具体的顺序如下：</p>\n<ol>\n<li>判断是否支持Promise，如果支持就在Promise.then方法的回调中去遍历执行队列数组里的回调函数；</li>\n<li>判断是否支持MutationObserver，如果支持就内部创建一个DOM元素，模拟修改DOM元素，以这种方式来执行监听DOM变化的回调函数，在这个回调函数中遍历执行队列数组里的回调函数；</li>\n<li>判断是否支持setImmediate，如果支持就在setImmediate回调中遍历执行队列数组里的回调函数；</li>\n<li>如果以上几种都不支持，setTimeout回调中遍历执行队列数组里的回调函数。</li>\n</ol>\n<p>前面两种方式生成的异步任务是微任务，后面两种生成的异步任务是宏任务。Vue2.x不同的版本对于这个过程的实现可能会有细微差异，但是目的就是生成一个异步任务，这个任务执行的时间越早越好。</p>\n<p>nextTick还有一个实现细节，就是当参数没传且运行环境支持Promise的时候，会返回一个Promise的实例，这个小功能可以按需使用。</p>\n"},{"title":"Vue2.x的patch方法","_content":"\n#### 作用\n\n将VNode渲染成真实的DOM\n\n\n\n\n\n#### 核心概念\n\n##### patch方法\n\npatch可以理解成打补丁的意思，在patch方法中采用diff算法比较新旧节点，一边比较一边给真实的DOM打补丁。\n\n\n\n\n\n##### diff算法\n\ndiff算法用来比较新旧节点，比较只会在同层级比较，不会跨层级比较，这个是相对于传统diff算法的一个很大提升。\n\n###### 过程分析\n\n* 判断两节点是否值得比较（sameVNode），值得比较则执行patchVNode方法。这个方法做了如下事情：\n\n  1. 找到当前oldVNode对应的真实节点，称为el；\n\n  2. 判断VNode和oldVNode是否指向同一个对象，如果是，直接返回；\n\n  3. 如果两者都是文本节点且不相等，将el的文本节点设置为VNode的文本节点；\n\n  4. 如果oldVNode有子节点而VNode没有，删除el的子节点；\n\n  5. 如果oldVNode没有子节点而VNode有，则将VNode的子节点生成真实节点，添加到el；\n\n  6. 如果两者都有子节点，则通过updateChildren函数比较子节点。由于updateChildren方法是diff中相对复杂的一部分，拎出来单独分析一下。\n\n     \n\n* 不值得比较则用VNode替换oldVNode。具体流程如下：\n  1. 找到当前oldVNode对应的真实节点以及该节点的父节点；\n  2. 根据VNode生成新节点；\n  3. 将新节点添加到父节点；\n  4. 移除旧节点。\n\n\n\n\n\n##### updateChildren方法\n\nupdateChildren方法用来给新旧VNode都有子节点的情况打补丁。可以将新旧VNode理解成两个数组，以旧数组为基础，通过删除、移动、插入的方式，将旧数组的值转换成新数组的值。\n\n⚠️这里的值指的不是两个数组所在的存储地址，只是数组项的值。而且每次删除、移动、插入的时候都会操作真实DOM。\n\n###### 匹配过程\n\n旧数组：[oldS，...，oldE]\n\n新数组：[S, ..., E]\n\n其中oldS和oldE是待匹配旧节点的开始子节点和结束子节点，S和E是待匹配新节点的开始子节点和结束子节点。这里的oldS、oldE、S和E在diff过程中是会变的，可以理解成一个变量或者一个代号。因为在diff过程中，如果新旧子节点已经匹配过了，会从待匹配的新旧节点列表中移除。\n\n 可以分为5个匹配方式来对比是否是sameVNode，来按顺序完成匹配：\n\n1. 旧首新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的开始子节点；\n\n2. 旧尾旧尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的结束子节点；\n\n3. 旧首新尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的开始子节点和新节点列表中的结束子节点；\n\n4. 旧尾新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的结束子节点和新节点列表中的开始子节点；\n\n5. 如果上面四种没有匹配成功会分成两种情况：\n\n   * 如果新旧子节点都存在key，会根据旧节点的key生成一张hash表，用S的key与hash表做匹配，判断是否时为sameVNode。\n     1. 匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的key的节点和待匹配新节点中的S；\n     2. 匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。\n   * 如果没有key，将直接将遍历待匹配旧节点列表。\n     1. 匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的节点和待匹配新节点中的S；\n     2. 匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。\n\n   ⚠️ 常见场景解析：\n\n   * v-for的时候设置key，就是为了如果首首、尾尾、首尾、尾首这四种匹配方式没匹配到的时候，可以使用key来更快地寻找可复用的节点，而不是只能用遍历的方式。\n\n   * 不能用index索引来做key的原因也是这个，因为用index索引来做key，并不能找到想要复用的旧节点，甚至可能会导致一个子节点都复用不了，起到负面作用。\n\n     举个🌰：一个数组长度是偶数的数组用index做key，被反序后，会给每一个子节点匹配到一个错误的不可复用的子节点，使diff的效率比没加key更低。\n\n6. 循环上面的过程，不断的将待匹配节点列表向内部收缩。当待匹配的新旧节点列表有一个先被清空的话，将执行下面判断。\n\n   ⚠️ 这里说的待匹配列表只是为了帮助理解来提出的一个概念，并没有一个真实的变量来存储这个待匹配列表。真实在数组中描述待匹配列表，是通过移动开始节点和结束节点的指针位置来实现。\n\n   1. 待匹配的旧节点列表被清空，也就是oldStartIdx > oldEndIdx，说明旧节点都被patch了，还有新节点没被处理到，批量新增待匹配的新节点；\n   2. 待匹配的新节点列表被清空，也就是newStartIdx > newEndIdx，说明新节点都被patch了，还有多余的旧节点没被处理到，批量删除待匹配的旧节点。\n\n\n\n###### 目的\n\n完成这一些复杂的匹配，就是为了更快更多地复用DOM的旧节点，因为DOM节点的创建开销是很大的。其实更快和更多是矛盾的，Vue找到了一个平衡点，比较只会在同层级进行, 不会跨层级。\n\n\n\n\n\n#### 调用时机\n\n##### 首次渲染\n\n父子组件在加载的时候，生命周期执行的顺序为：\n\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted。\n\n下面从首次渲染的流程角度，来分析为什么是这个顺序。\n\n首次渲染时，父组件render生成父组件的VDOM，然后会执行父组件的patch方法，目的是将VDOM渲染成DOM。\n\n在执行父组件patch方法解析到子组件VNode的时候，子组件VNode是被父组件的render函数生成的组件类型的VNode。在生成组件类型的组件过程中，完成了构造子类构造函数、安装组件钩子函数和实例化VNode，生成的子组件是没有children的，这个时候不知道子组件的细节。\n\npatch到子组件VNode时，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，然后执行子组件的patch。\n\n解析子组件VNode这个过程，以深度优先的算法，将所有的子孙组件挂载到根实例上。有子组件就先完成子组件的完整挂载过程，等子组件完成挂载后再回到父组件完成父组件的挂载。从这个逻辑来理解，上面的生命周期执行顺序就很好理解了。\n\n首次渲染patch过程比较简单，就是简单的插入，因为旧节点为空。\n\n完成patch之后 ，将更新后的VNode数据赋值给oldVNode。\n\n\n\n\n\n##### 数据更新的时候\n\n数据更新触发渲染watcher更新的时候，会重新生成render函数，生成新的VNode，供patch方法为旧DOM打补丁使用。即使数据更新发生在很多组件上，每次执行渲染watcher更新，重新patch的时候关注的都只是当前组件。\n\n⚠️ 每个组件都有自己的渲染watcher。\n\n数据更新时patch过程就会相对复杂，会更充分使用到diff算法的细节。oldVNode就是上次渲染时的VNode，VNode就是本次重新生成的VNode，通过diff算法，一边一边比较一边给真实的DOM打补丁。\n\n完成patch之后 ，将更新后的VNode数据赋值给oldVNode。\n\n","source":"_posts/Vue2.x的patch方法.md","raw":"---\ntitle: Vue2.x的patch方法\n\ntags: [patch]\n\ncategories: vue\n---\n\n#### 作用\n\n将VNode渲染成真实的DOM\n\n\n\n\n\n#### 核心概念\n\n##### patch方法\n\npatch可以理解成打补丁的意思，在patch方法中采用diff算法比较新旧节点，一边比较一边给真实的DOM打补丁。\n\n\n\n\n\n##### diff算法\n\ndiff算法用来比较新旧节点，比较只会在同层级比较，不会跨层级比较，这个是相对于传统diff算法的一个很大提升。\n\n###### 过程分析\n\n* 判断两节点是否值得比较（sameVNode），值得比较则执行patchVNode方法。这个方法做了如下事情：\n\n  1. 找到当前oldVNode对应的真实节点，称为el；\n\n  2. 判断VNode和oldVNode是否指向同一个对象，如果是，直接返回；\n\n  3. 如果两者都是文本节点且不相等，将el的文本节点设置为VNode的文本节点；\n\n  4. 如果oldVNode有子节点而VNode没有，删除el的子节点；\n\n  5. 如果oldVNode没有子节点而VNode有，则将VNode的子节点生成真实节点，添加到el；\n\n  6. 如果两者都有子节点，则通过updateChildren函数比较子节点。由于updateChildren方法是diff中相对复杂的一部分，拎出来单独分析一下。\n\n     \n\n* 不值得比较则用VNode替换oldVNode。具体流程如下：\n  1. 找到当前oldVNode对应的真实节点以及该节点的父节点；\n  2. 根据VNode生成新节点；\n  3. 将新节点添加到父节点；\n  4. 移除旧节点。\n\n\n\n\n\n##### updateChildren方法\n\nupdateChildren方法用来给新旧VNode都有子节点的情况打补丁。可以将新旧VNode理解成两个数组，以旧数组为基础，通过删除、移动、插入的方式，将旧数组的值转换成新数组的值。\n\n⚠️这里的值指的不是两个数组所在的存储地址，只是数组项的值。而且每次删除、移动、插入的时候都会操作真实DOM。\n\n###### 匹配过程\n\n旧数组：[oldS，...，oldE]\n\n新数组：[S, ..., E]\n\n其中oldS和oldE是待匹配旧节点的开始子节点和结束子节点，S和E是待匹配新节点的开始子节点和结束子节点。这里的oldS、oldE、S和E在diff过程中是会变的，可以理解成一个变量或者一个代号。因为在diff过程中，如果新旧子节点已经匹配过了，会从待匹配的新旧节点列表中移除。\n\n 可以分为5个匹配方式来对比是否是sameVNode，来按顺序完成匹配：\n\n1. 旧首新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的开始子节点；\n\n2. 旧尾旧尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的结束子节点；\n\n3. 旧首新尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的开始子节点和新节点列表中的结束子节点；\n\n4. 旧尾新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的结束子节点和新节点列表中的开始子节点；\n\n5. 如果上面四种没有匹配成功会分成两种情况：\n\n   * 如果新旧子节点都存在key，会根据旧节点的key生成一张hash表，用S的key与hash表做匹配，判断是否时为sameVNode。\n     1. 匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的key的节点和待匹配新节点中的S；\n     2. 匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。\n   * 如果没有key，将直接将遍历待匹配旧节点列表。\n     1. 匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的节点和待匹配新节点中的S；\n     2. 匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。\n\n   ⚠️ 常见场景解析：\n\n   * v-for的时候设置key，就是为了如果首首、尾尾、首尾、尾首这四种匹配方式没匹配到的时候，可以使用key来更快地寻找可复用的节点，而不是只能用遍历的方式。\n\n   * 不能用index索引来做key的原因也是这个，因为用index索引来做key，并不能找到想要复用的旧节点，甚至可能会导致一个子节点都复用不了，起到负面作用。\n\n     举个🌰：一个数组长度是偶数的数组用index做key，被反序后，会给每一个子节点匹配到一个错误的不可复用的子节点，使diff的效率比没加key更低。\n\n6. 循环上面的过程，不断的将待匹配节点列表向内部收缩。当待匹配的新旧节点列表有一个先被清空的话，将执行下面判断。\n\n   ⚠️ 这里说的待匹配列表只是为了帮助理解来提出的一个概念，并没有一个真实的变量来存储这个待匹配列表。真实在数组中描述待匹配列表，是通过移动开始节点和结束节点的指针位置来实现。\n\n   1. 待匹配的旧节点列表被清空，也就是oldStartIdx > oldEndIdx，说明旧节点都被patch了，还有新节点没被处理到，批量新增待匹配的新节点；\n   2. 待匹配的新节点列表被清空，也就是newStartIdx > newEndIdx，说明新节点都被patch了，还有多余的旧节点没被处理到，批量删除待匹配的旧节点。\n\n\n\n###### 目的\n\n完成这一些复杂的匹配，就是为了更快更多地复用DOM的旧节点，因为DOM节点的创建开销是很大的。其实更快和更多是矛盾的，Vue找到了一个平衡点，比较只会在同层级进行, 不会跨层级。\n\n\n\n\n\n#### 调用时机\n\n##### 首次渲染\n\n父子组件在加载的时候，生命周期执行的顺序为：\n\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted。\n\n下面从首次渲染的流程角度，来分析为什么是这个顺序。\n\n首次渲染时，父组件render生成父组件的VDOM，然后会执行父组件的patch方法，目的是将VDOM渲染成DOM。\n\n在执行父组件patch方法解析到子组件VNode的时候，子组件VNode是被父组件的render函数生成的组件类型的VNode。在生成组件类型的组件过程中，完成了构造子类构造函数、安装组件钩子函数和实例化VNode，生成的子组件是没有children的，这个时候不知道子组件的细节。\n\npatch到子组件VNode时，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，然后执行子组件的patch。\n\n解析子组件VNode这个过程，以深度优先的算法，将所有的子孙组件挂载到根实例上。有子组件就先完成子组件的完整挂载过程，等子组件完成挂载后再回到父组件完成父组件的挂载。从这个逻辑来理解，上面的生命周期执行顺序就很好理解了。\n\n首次渲染patch过程比较简单，就是简单的插入，因为旧节点为空。\n\n完成patch之后 ，将更新后的VNode数据赋值给oldVNode。\n\n\n\n\n\n##### 数据更新的时候\n\n数据更新触发渲染watcher更新的时候，会重新生成render函数，生成新的VNode，供patch方法为旧DOM打补丁使用。即使数据更新发生在很多组件上，每次执行渲染watcher更新，重新patch的时候关注的都只是当前组件。\n\n⚠️ 每个组件都有自己的渲染watcher。\n\n数据更新时patch过程就会相对复杂，会更充分使用到diff算法的细节。oldVNode就是上次渲染时的VNode，VNode就是本次重新生成的VNode，通过diff算法，一边一边比较一边给真实的DOM打补丁。\n\n完成patch之后 ，将更新后的VNode数据赋值给oldVNode。\n\n","slug":"Vue2.x的patch方法","published":1,"date":"2023-11-07T03:36:00.760Z","updated":"2023-11-07T03:36:00.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87q000ju17ua6eq1rw1","content":"<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>将VNode渲染成真实的DOM</p>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><h5 id=\"patch方法\"><a href=\"#patch方法\" class=\"headerlink\" title=\"patch方法\"></a>patch方法</h5><p>patch可以理解成打补丁的意思，在patch方法中采用diff算法比较新旧节点，一边比较一边给真实的DOM打补丁。</p>\n<h5 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h5><p>diff算法用来比较新旧节点，比较只会在同层级比较，不会跨层级比较，这个是相对于传统diff算法的一个很大提升。</p>\n<h6 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h6><ul>\n<li><p>判断两节点是否值得比较（sameVNode），值得比较则执行patchVNode方法。这个方法做了如下事情：</p>\n<ol>\n<li><p>找到当前oldVNode对应的真实节点，称为el；</p>\n</li>\n<li><p>判断VNode和oldVNode是否指向同一个对象，如果是，直接返回；</p>\n</li>\n<li><p>如果两者都是文本节点且不相等，将el的文本节点设置为VNode的文本节点；</p>\n</li>\n<li><p>如果oldVNode有子节点而VNode没有，删除el的子节点；</p>\n</li>\n<li><p>如果oldVNode没有子节点而VNode有，则将VNode的子节点生成真实节点，添加到el；</p>\n</li>\n<li><p>如果两者都有子节点，则通过updateChildren函数比较子节点。由于updateChildren方法是diff中相对复杂的一部分，拎出来单独分析一下。</p>\n</li>\n</ol>\n</li>\n<li><p>不值得比较则用VNode替换oldVNode。具体流程如下：</p>\n<ol>\n<li>找到当前oldVNode对应的真实节点以及该节点的父节点；</li>\n<li>根据VNode生成新节点；</li>\n<li>将新节点添加到父节点；</li>\n<li>移除旧节点。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"updateChildren方法\"><a href=\"#updateChildren方法\" class=\"headerlink\" title=\"updateChildren方法\"></a>updateChildren方法</h5><p>updateChildren方法用来给新旧VNode都有子节点的情况打补丁。可以将新旧VNode理解成两个数组，以旧数组为基础，通过删除、移动、插入的方式，将旧数组的值转换成新数组的值。</p>\n<p>⚠️这里的值指的不是两个数组所在的存储地址，只是数组项的值。而且每次删除、移动、插入的时候都会操作真实DOM。</p>\n<h6 id=\"匹配过程\"><a href=\"#匹配过程\" class=\"headerlink\" title=\"匹配过程\"></a>匹配过程</h6><p>旧数组：[oldS，…，oldE]</p>\n<p>新数组：[S, …, E]</p>\n<p>其中oldS和oldE是待匹配旧节点的开始子节点和结束子节点，S和E是待匹配新节点的开始子节点和结束子节点。这里的oldS、oldE、S和E在diff过程中是会变的，可以理解成一个变量或者一个代号。因为在diff过程中，如果新旧子节点已经匹配过了，会从待匹配的新旧节点列表中移除。</p>\n<p> 可以分为5个匹配方式来对比是否是sameVNode，来按顺序完成匹配：</p>\n<ol>\n<li><p>旧首新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的开始子节点；</p>\n</li>\n<li><p>旧尾旧尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的结束子节点；</p>\n</li>\n<li><p>旧首新尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的开始子节点和新节点列表中的结束子节点；</p>\n</li>\n<li><p>旧尾新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的结束子节点和新节点列表中的开始子节点；</p>\n</li>\n<li><p>如果上面四种没有匹配成功会分成两种情况：</p>\n<ul>\n<li>如果新旧子节点都存在key，会根据旧节点的key生成一张hash表，用S的key与hash表做匹配，判断是否时为sameVNode。<ol>\n<li>匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的key的节点和待匹配新节点中的S；</li>\n<li>匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。</li>\n</ol>\n</li>\n<li>如果没有key，将直接将遍历待匹配旧节点列表。<ol>\n<li>匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的节点和待匹配新节点中的S；</li>\n<li>匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。</li>\n</ol>\n</li>\n</ul>\n<p>⚠️ 常见场景解析：</p>\n<ul>\n<li><p>v-for的时候设置key，就是为了如果首首、尾尾、首尾、尾首这四种匹配方式没匹配到的时候，可以使用key来更快地寻找可复用的节点，而不是只能用遍历的方式。</p>\n</li>\n<li><p>不能用index索引来做key的原因也是这个，因为用index索引来做key，并不能找到想要复用的旧节点，甚至可能会导致一个子节点都复用不了，起到负面作用。</p>\n<p>举个🌰：一个数组长度是偶数的数组用index做key，被反序后，会给每一个子节点匹配到一个错误的不可复用的子节点，使diff的效率比没加key更低。</p>\n</li>\n</ul>\n</li>\n<li><p>循环上面的过程，不断的将待匹配节点列表向内部收缩。当待匹配的新旧节点列表有一个先被清空的话，将执行下面判断。</p>\n<p>⚠️ 这里说的待匹配列表只是为了帮助理解来提出的一个概念，并没有一个真实的变量来存储这个待匹配列表。真实在数组中描述待匹配列表，是通过移动开始节点和结束节点的指针位置来实现。</p>\n<ol>\n<li>待匹配的旧节点列表被清空，也就是oldStartIdx &gt; oldEndIdx，说明旧节点都被patch了，还有新节点没被处理到，批量新增待匹配的新节点；</li>\n<li>待匹配的新节点列表被清空，也就是newStartIdx &gt; newEndIdx，说明新节点都被patch了，还有多余的旧节点没被处理到，批量删除待匹配的旧节点。</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h6><p>完成这一些复杂的匹配，就是为了更快更多地复用DOM的旧节点，因为DOM节点的创建开销是很大的。其实更快和更多是矛盾的，Vue找到了一个平衡点，比较只会在同层级进行, 不会跨层级。</p>\n<h4 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h4><h5 id=\"首次渲染\"><a href=\"#首次渲染\" class=\"headerlink\" title=\"首次渲染\"></a>首次渲染</h5><p>父子组件在加载的时候，生命周期执行的顺序为：</p>\n<p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted。</p>\n<p>下面从首次渲染的流程角度，来分析为什么是这个顺序。</p>\n<p>首次渲染时，父组件render生成父组件的VDOM，然后会执行父组件的patch方法，目的是将VDOM渲染成DOM。</p>\n<p>在执行父组件patch方法解析到子组件VNode的时候，子组件VNode是被父组件的render函数生成的组件类型的VNode。在生成组件类型的组件过程中，完成了构造子类构造函数、安装组件钩子函数和实例化VNode，生成的子组件是没有children的，这个时候不知道子组件的细节。</p>\n<p>patch到子组件VNode时，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，然后执行子组件的patch。</p>\n<p>解析子组件VNode这个过程，以深度优先的算法，将所有的子孙组件挂载到根实例上。有子组件就先完成子组件的完整挂载过程，等子组件完成挂载后再回到父组件完成父组件的挂载。从这个逻辑来理解，上面的生命周期执行顺序就很好理解了。</p>\n<p>首次渲染patch过程比较简单，就是简单的插入，因为旧节点为空。</p>\n<p>完成patch之后 ，将更新后的VNode数据赋值给oldVNode。</p>\n<h5 id=\"数据更新的时候\"><a href=\"#数据更新的时候\" class=\"headerlink\" title=\"数据更新的时候\"></a>数据更新的时候</h5><p>数据更新触发渲染watcher更新的时候，会重新生成render函数，生成新的VNode，供patch方法为旧DOM打补丁使用。即使数据更新发生在很多组件上，每次执行渲染watcher更新，重新patch的时候关注的都只是当前组件。</p>\n<p>⚠️ 每个组件都有自己的渲染watcher。</p>\n<p>数据更新时patch过程就会相对复杂，会更充分使用到diff算法的细节。oldVNode就是上次渲染时的VNode，VNode就是本次重新生成的VNode，通过diff算法，一边一边比较一边给真实的DOM打补丁。</p>\n<p>完成patch之后 ，将更新后的VNode数据赋值给oldVNode。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>将VNode渲染成真实的DOM</p>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><h5 id=\"patch方法\"><a href=\"#patch方法\" class=\"headerlink\" title=\"patch方法\"></a>patch方法</h5><p>patch可以理解成打补丁的意思，在patch方法中采用diff算法比较新旧节点，一边比较一边给真实的DOM打补丁。</p>\n<h5 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h5><p>diff算法用来比较新旧节点，比较只会在同层级比较，不会跨层级比较，这个是相对于传统diff算法的一个很大提升。</p>\n<h6 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h6><ul>\n<li><p>判断两节点是否值得比较（sameVNode），值得比较则执行patchVNode方法。这个方法做了如下事情：</p>\n<ol>\n<li><p>找到当前oldVNode对应的真实节点，称为el；</p>\n</li>\n<li><p>判断VNode和oldVNode是否指向同一个对象，如果是，直接返回；</p>\n</li>\n<li><p>如果两者都是文本节点且不相等，将el的文本节点设置为VNode的文本节点；</p>\n</li>\n<li><p>如果oldVNode有子节点而VNode没有，删除el的子节点；</p>\n</li>\n<li><p>如果oldVNode没有子节点而VNode有，则将VNode的子节点生成真实节点，添加到el；</p>\n</li>\n<li><p>如果两者都有子节点，则通过updateChildren函数比较子节点。由于updateChildren方法是diff中相对复杂的一部分，拎出来单独分析一下。</p>\n</li>\n</ol>\n</li>\n<li><p>不值得比较则用VNode替换oldVNode。具体流程如下：</p>\n<ol>\n<li>找到当前oldVNode对应的真实节点以及该节点的父节点；</li>\n<li>根据VNode生成新节点；</li>\n<li>将新节点添加到父节点；</li>\n<li>移除旧节点。</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"updateChildren方法\"><a href=\"#updateChildren方法\" class=\"headerlink\" title=\"updateChildren方法\"></a>updateChildren方法</h5><p>updateChildren方法用来给新旧VNode都有子节点的情况打补丁。可以将新旧VNode理解成两个数组，以旧数组为基础，通过删除、移动、插入的方式，将旧数组的值转换成新数组的值。</p>\n<p>⚠️这里的值指的不是两个数组所在的存储地址，只是数组项的值。而且每次删除、移动、插入的时候都会操作真实DOM。</p>\n<h6 id=\"匹配过程\"><a href=\"#匹配过程\" class=\"headerlink\" title=\"匹配过程\"></a>匹配过程</h6><p>旧数组：[oldS，…，oldE]</p>\n<p>新数组：[S, …, E]</p>\n<p>其中oldS和oldE是待匹配旧节点的开始子节点和结束子节点，S和E是待匹配新节点的开始子节点和结束子节点。这里的oldS、oldE、S和E在diff过程中是会变的，可以理解成一个变量或者一个代号。因为在diff过程中，如果新旧子节点已经匹配过了，会从待匹配的新旧节点列表中移除。</p>\n<p> 可以分为5个匹配方式来对比是否是sameVNode，来按顺序完成匹配：</p>\n<ol>\n<li><p>旧首新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的开始子节点；</p>\n</li>\n<li><p>旧尾旧尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的新旧节点列表中的结束子节点；</p>\n</li>\n<li><p>旧首新尾对比：匹配成功会将旧开始子节点移动到真实DOM中目前可供选择位置的最后，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的开始子节点和新节点列表中的结束子节点；</p>\n</li>\n<li><p>旧尾新首对比：匹配成功会将旧结束子节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配的旧节点列表中的结束子节点和新节点列表中的开始子节点；</p>\n</li>\n<li><p>如果上面四种没有匹配成功会分成两种情况：</p>\n<ul>\n<li>如果新旧子节点都存在key，会根据旧节点的key生成一张hash表，用S的key与hash表做匹配，判断是否时为sameVNode。<ol>\n<li>匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的key的节点和待匹配新节点中的S；</li>\n<li>匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。</li>\n</ol>\n</li>\n<li>如果没有key，将直接将遍历待匹配旧节点列表。<ol>\n<li>匹配成功：将匹配成功的节点移动到真实DOM中目前可供选择位置的最前，因为不能影响到已经patch好的子节点位置，然后移除待匹配旧节点中已经匹配到S的节点和待匹配新节点中的S；</li>\n<li>匹配失败：将S生成真实DOM节点，插入到目前可供选择位置的最前，也就是oldS的位置，然后然后移除待匹配新节点中的S。</li>\n</ol>\n</li>\n</ul>\n<p>⚠️ 常见场景解析：</p>\n<ul>\n<li><p>v-for的时候设置key，就是为了如果首首、尾尾、首尾、尾首这四种匹配方式没匹配到的时候，可以使用key来更快地寻找可复用的节点，而不是只能用遍历的方式。</p>\n</li>\n<li><p>不能用index索引来做key的原因也是这个，因为用index索引来做key，并不能找到想要复用的旧节点，甚至可能会导致一个子节点都复用不了，起到负面作用。</p>\n<p>举个🌰：一个数组长度是偶数的数组用index做key，被反序后，会给每一个子节点匹配到一个错误的不可复用的子节点，使diff的效率比没加key更低。</p>\n</li>\n</ul>\n</li>\n<li><p>循环上面的过程，不断的将待匹配节点列表向内部收缩。当待匹配的新旧节点列表有一个先被清空的话，将执行下面判断。</p>\n<p>⚠️ 这里说的待匹配列表只是为了帮助理解来提出的一个概念，并没有一个真实的变量来存储这个待匹配列表。真实在数组中描述待匹配列表，是通过移动开始节点和结束节点的指针位置来实现。</p>\n<ol>\n<li>待匹配的旧节点列表被清空，也就是oldStartIdx &gt; oldEndIdx，说明旧节点都被patch了，还有新节点没被处理到，批量新增待匹配的新节点；</li>\n<li>待匹配的新节点列表被清空，也就是newStartIdx &gt; newEndIdx，说明新节点都被patch了，还有多余的旧节点没被处理到，批量删除待匹配的旧节点。</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h6><p>完成这一些复杂的匹配，就是为了更快更多地复用DOM的旧节点，因为DOM节点的创建开销是很大的。其实更快和更多是矛盾的，Vue找到了一个平衡点，比较只会在同层级进行, 不会跨层级。</p>\n<h4 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h4><h5 id=\"首次渲染\"><a href=\"#首次渲染\" class=\"headerlink\" title=\"首次渲染\"></a>首次渲染</h5><p>父子组件在加载的时候，生命周期执行的顺序为：</p>\n<p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted。</p>\n<p>下面从首次渲染的流程角度，来分析为什么是这个顺序。</p>\n<p>首次渲染时，父组件render生成父组件的VDOM，然后会执行父组件的patch方法，目的是将VDOM渲染成DOM。</p>\n<p>在执行父组件patch方法解析到子组件VNode的时候，子组件VNode是被父组件的render函数生成的组件类型的VNode。在生成组件类型的组件过程中，完成了构造子类构造函数、安装组件钩子函数和实例化VNode，生成的子组件是没有children的，这个时候不知道子组件的细节。</p>\n<p>patch到子组件VNode时，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，然后执行子组件的patch。</p>\n<p>解析子组件VNode这个过程，以深度优先的算法，将所有的子孙组件挂载到根实例上。有子组件就先完成子组件的完整挂载过程，等子组件完成挂载后再回到父组件完成父组件的挂载。从这个逻辑来理解，上面的生命周期执行顺序就很好理解了。</p>\n<p>首次渲染patch过程比较简单，就是简单的插入，因为旧节点为空。</p>\n<p>完成patch之后 ，将更新后的VNode数据赋值给oldVNode。</p>\n<h5 id=\"数据更新的时候\"><a href=\"#数据更新的时候\" class=\"headerlink\" title=\"数据更新的时候\"></a>数据更新的时候</h5><p>数据更新触发渲染watcher更新的时候，会重新生成render函数，生成新的VNode，供patch方法为旧DOM打补丁使用。即使数据更新发生在很多组件上，每次执行渲染watcher更新，重新patch的时候关注的都只是当前组件。</p>\n<p>⚠️ 每个组件都有自己的渲染watcher。</p>\n<p>数据更新时patch过程就会相对复杂，会更充分使用到diff算法的细节。oldVNode就是上次渲染时的VNode，VNode就是本次重新生成的VNode，通过diff算法，一边一边比较一边给真实的DOM打补丁。</p>\n<p>完成patch之后 ，将更新后的VNode数据赋值给oldVNode。</p>\n"},{"title":"Vue2.x的render方法","_content":"\n#### 基本介绍\n\nrender方法将Vue实例渲染成一个虚拟Node，在生成VNode的时候完成了渲染watcher的依赖的收集。\n\npatch方法将VNode转换为真正的DOM节点。\n\n\n\n#### 前情提要\n\n在Vue实例挂载的时候，执行render方法来生成VNode。而在开发的时候，开发者大多数情况并不是自己手写的render函数，而是写的template模版或者el。在mounted的方法中，会将template模版编译成render方法，如果是el会多一个步骤，得先从el中提取出template模版。\n\n\n\n#### 本集看点\n\n##### render渲染VNode主要步骤\n\n1. 将children参数规范化：由于生成VNode的参数中children必须是VNode类型的，而下面几种情况下children不符合条件，所以在根据参数实例化VNode之前需要将children规范化成一个类型为VNode的Array。\n\n   * render函数是编译生成的，理论上编译生成的children已经是VNode类型的，但是当组件是函数式组件时，返回的是一个数组而不是一个根结点，所以需要用Array.prototype.concat方法将整个children数组打平，让深度只有一层。\n\n     ⚠️只有这一种情况，调用simpleNormalizeChildren方法来实现children规范化。\n\n   * 1. render函数是用户手写的，当children只有一个基础类型节点的时候，会调用createTextVNode方法创建一个文本节点的VNode；\n     2. render函数是手写的，当编译slot或者v-for的时候。\n\n     ⚠️只有这两种情况，调用normalizeChildren方法来实现children规范化。\n\n     \n\n2. 创建VNode实例\n\n   为每一个html标签创建一个VNode，顺序是先子后父，从上到下。可以理解成按照标签闭合的顺序，依次创建VNode，一个template模版中的根标签生成的就是当前组件的VNode树，也称为VDOM。\n\n   对tag进行判断，创建不同类型的VNode：\n\n   * 如果是字符串类型且是内置的节点，直接创建普通VNode;\n   * 如果是字符串类型且是已注册的组件名，则通过createComponent方法创建一个组件类型的VNode;\n   * 如果是字符串类型，又不是上面两种情况，创建一个未知标签的VNode;\n   * 如果是组件类型，则通过createComponent方法创建一个组件类型的VNode。\n\n\n\n\n\n##### 创建组件类型VNode主要步骤\n\nrender渲染VNode可能会生成3种类型的VNode：\n\n1. 普通类型VNode;\n2. 未知标签VNode;\n3. 组件类型VNode。\n\n\n\n因为前面两种都比较简单，这里着重分析组件类型VNode。通过createComponent方法将组件渲染成VNode主要做了3个事情：\n\n1. 构造子类构造函数：开发者在写组件的时候，通常都是创建一个普通的对象，Vue内部使用Vue.extend将这个普通对象做了扩展，使这个对象可以像Vue实例一样可以完成初始化、挂载、渲染等一系列功能。\n\n   Vue.extend的作用是构造一个Vue的子类，使用一种非常经典的原型继承的方式把一个纯对象转换成了一个继承于Vue的构造器Sub并返回，然后对Sub对象本身扩展一些属性，如扩展options、添加全局API，并且对配置做一些初始化工作。\n\n   最后对这个Sub构造函数做了缓存，避免多次执行Vue.extend的时候对同一个子组件重复构造。在执行父组件patch方法解析到组件VNode的时候，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，再走到子组件初始化逻辑。\n\n\n\n2. 安装组件钩子函数：将组件特有的几个钩子和Vue实例的生命周期钩子合并。\n\n   在实例化Vue的时候，Vue的挂载是在初始化完成的时候，这个是一个同步的事件，有一个固定的地方可以执行这块逻辑，不需要钩子函数来回调Vue的挂载操作。\n\n   而子组件的挂载时机，是在父组件patch的过程中。子组件为了更好的管理自己的生命周期，添加了init、prepatch、insert和destroy四个生命周期钩子，分别对应初始化、更新、挂载完成、销毁。\n\n   在父组件VNode执行执行patch的时候会执行上面的钩子函数，这就可以实现组件的渲染。这里需要注意的一点是Vue实例原有的几种生命钩子是可以正常使用的，如mounted钩子函数会在insert钩子执行的时候被调用。\n\n\n\n3. 实例化VNode：实例化一个VNode，不过需要注意的是组件的VNode是没有children的。因为父组件render方法中，是看不到子组件内部结构的，只会为子组件生成一个组件VNode。\n\n   父组件render方法生成VDOM之后，会执行到patch方法，在patch过程中会将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，在这个子组件render方法生成的VDOM中，才会有children。\n\n   也就是说render方法在解析子组件的时候，只会将子组件生成一个组件VNode，不会关心子组件是否有子组件，子组件是否有子组件，这个事情由子组件来关心。\n\n\n\n","source":"_posts/Vue2.x的render方法.md","raw":"---\ntitle: Vue2.x的render方法\n\ntags: [render]\n\ncategories: vue\n---\n\n#### 基本介绍\n\nrender方法将Vue实例渲染成一个虚拟Node，在生成VNode的时候完成了渲染watcher的依赖的收集。\n\npatch方法将VNode转换为真正的DOM节点。\n\n\n\n#### 前情提要\n\n在Vue实例挂载的时候，执行render方法来生成VNode。而在开发的时候，开发者大多数情况并不是自己手写的render函数，而是写的template模版或者el。在mounted的方法中，会将template模版编译成render方法，如果是el会多一个步骤，得先从el中提取出template模版。\n\n\n\n#### 本集看点\n\n##### render渲染VNode主要步骤\n\n1. 将children参数规范化：由于生成VNode的参数中children必须是VNode类型的，而下面几种情况下children不符合条件，所以在根据参数实例化VNode之前需要将children规范化成一个类型为VNode的Array。\n\n   * render函数是编译生成的，理论上编译生成的children已经是VNode类型的，但是当组件是函数式组件时，返回的是一个数组而不是一个根结点，所以需要用Array.prototype.concat方法将整个children数组打平，让深度只有一层。\n\n     ⚠️只有这一种情况，调用simpleNormalizeChildren方法来实现children规范化。\n\n   * 1. render函数是用户手写的，当children只有一个基础类型节点的时候，会调用createTextVNode方法创建一个文本节点的VNode；\n     2. render函数是手写的，当编译slot或者v-for的时候。\n\n     ⚠️只有这两种情况，调用normalizeChildren方法来实现children规范化。\n\n     \n\n2. 创建VNode实例\n\n   为每一个html标签创建一个VNode，顺序是先子后父，从上到下。可以理解成按照标签闭合的顺序，依次创建VNode，一个template模版中的根标签生成的就是当前组件的VNode树，也称为VDOM。\n\n   对tag进行判断，创建不同类型的VNode：\n\n   * 如果是字符串类型且是内置的节点，直接创建普通VNode;\n   * 如果是字符串类型且是已注册的组件名，则通过createComponent方法创建一个组件类型的VNode;\n   * 如果是字符串类型，又不是上面两种情况，创建一个未知标签的VNode;\n   * 如果是组件类型，则通过createComponent方法创建一个组件类型的VNode。\n\n\n\n\n\n##### 创建组件类型VNode主要步骤\n\nrender渲染VNode可能会生成3种类型的VNode：\n\n1. 普通类型VNode;\n2. 未知标签VNode;\n3. 组件类型VNode。\n\n\n\n因为前面两种都比较简单，这里着重分析组件类型VNode。通过createComponent方法将组件渲染成VNode主要做了3个事情：\n\n1. 构造子类构造函数：开发者在写组件的时候，通常都是创建一个普通的对象，Vue内部使用Vue.extend将这个普通对象做了扩展，使这个对象可以像Vue实例一样可以完成初始化、挂载、渲染等一系列功能。\n\n   Vue.extend的作用是构造一个Vue的子类，使用一种非常经典的原型继承的方式把一个纯对象转换成了一个继承于Vue的构造器Sub并返回，然后对Sub对象本身扩展一些属性，如扩展options、添加全局API，并且对配置做一些初始化工作。\n\n   最后对这个Sub构造函数做了缓存，避免多次执行Vue.extend的时候对同一个子组件重复构造。在执行父组件patch方法解析到组件VNode的时候，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，再走到子组件初始化逻辑。\n\n\n\n2. 安装组件钩子函数：将组件特有的几个钩子和Vue实例的生命周期钩子合并。\n\n   在实例化Vue的时候，Vue的挂载是在初始化完成的时候，这个是一个同步的事件，有一个固定的地方可以执行这块逻辑，不需要钩子函数来回调Vue的挂载操作。\n\n   而子组件的挂载时机，是在父组件patch的过程中。子组件为了更好的管理自己的生命周期，添加了init、prepatch、insert和destroy四个生命周期钩子，分别对应初始化、更新、挂载完成、销毁。\n\n   在父组件VNode执行执行patch的时候会执行上面的钩子函数，这就可以实现组件的渲染。这里需要注意的一点是Vue实例原有的几种生命钩子是可以正常使用的，如mounted钩子函数会在insert钩子执行的时候被调用。\n\n\n\n3. 实例化VNode：实例化一个VNode，不过需要注意的是组件的VNode是没有children的。因为父组件render方法中，是看不到子组件内部结构的，只会为子组件生成一个组件VNode。\n\n   父组件render方法生成VDOM之后，会执行到patch方法，在patch过程中会将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，在这个子组件render方法生成的VDOM中，才会有children。\n\n   也就是说render方法在解析子组件的时候，只会将子组件生成一个组件VNode，不会关心子组件是否有子组件，子组件是否有子组件，这个事情由子组件来关心。\n\n\n\n","slug":"Vue2.x的render方法","published":1,"date":"2023-11-07T03:36:00.760Z","updated":"2023-11-07T03:36:00.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87r000ou17u41ylcd1i","content":"<h4 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h4><p>render方法将Vue实例渲染成一个虚拟Node，在生成VNode的时候完成了渲染watcher的依赖的收集。</p>\n<p>patch方法将VNode转换为真正的DOM节点。</p>\n<h4 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h4><p>在Vue实例挂载的时候，执行render方法来生成VNode。而在开发的时候，开发者大多数情况并不是自己手写的render函数，而是写的template模版或者el。在mounted的方法中，会将template模版编译成render方法，如果是el会多一个步骤，得先从el中提取出template模版。</p>\n<h4 id=\"本集看点\"><a href=\"#本集看点\" class=\"headerlink\" title=\"本集看点\"></a>本集看点</h4><h5 id=\"render渲染VNode主要步骤\"><a href=\"#render渲染VNode主要步骤\" class=\"headerlink\" title=\"render渲染VNode主要步骤\"></a>render渲染VNode主要步骤</h5><ol>\n<li><p>将children参数规范化：由于生成VNode的参数中children必须是VNode类型的，而下面几种情况下children不符合条件，所以在根据参数实例化VNode之前需要将children规范化成一个类型为VNode的Array。</p>\n<ul>\n<li><p>render函数是编译生成的，理论上编译生成的children已经是VNode类型的，但是当组件是函数式组件时，返回的是一个数组而不是一个根结点，所以需要用Array.prototype.concat方法将整个children数组打平，让深度只有一层。</p>\n<p>⚠️只有这一种情况，调用simpleNormalizeChildren方法来实现children规范化。</p>\n</li>\n<li><ol>\n<li>render函数是用户手写的，当children只有一个基础类型节点的时候，会调用createTextVNode方法创建一个文本节点的VNode；</li>\n<li>render函数是手写的，当编译slot或者v-for的时候。</li>\n</ol>\n<p>⚠️只有这两种情况，调用normalizeChildren方法来实现children规范化。</p>\n</li>\n</ul>\n</li>\n<li><p>创建VNode实例</p>\n<p>为每一个html标签创建一个VNode，顺序是先子后父，从上到下。可以理解成按照标签闭合的顺序，依次创建VNode，一个template模版中的根标签生成的就是当前组件的VNode树，也称为VDOM。</p>\n<p>对tag进行判断，创建不同类型的VNode：</p>\n<ul>\n<li>如果是字符串类型且是内置的节点，直接创建普通VNode;</li>\n<li>如果是字符串类型且是已注册的组件名，则通过createComponent方法创建一个组件类型的VNode;</li>\n<li>如果是字符串类型，又不是上面两种情况，创建一个未知标签的VNode;</li>\n<li>如果是组件类型，则通过createComponent方法创建一个组件类型的VNode。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"创建组件类型VNode主要步骤\"><a href=\"#创建组件类型VNode主要步骤\" class=\"headerlink\" title=\"创建组件类型VNode主要步骤\"></a>创建组件类型VNode主要步骤</h5><p>render渲染VNode可能会生成3种类型的VNode：</p>\n<ol>\n<li>普通类型VNode;</li>\n<li>未知标签VNode;</li>\n<li>组件类型VNode。</li>\n</ol>\n<p>因为前面两种都比较简单，这里着重分析组件类型VNode。通过createComponent方法将组件渲染成VNode主要做了3个事情：</p>\n<ol>\n<li><p>构造子类构造函数：开发者在写组件的时候，通常都是创建一个普通的对象，Vue内部使用Vue.extend将这个普通对象做了扩展，使这个对象可以像Vue实例一样可以完成初始化、挂载、渲染等一系列功能。</p>\n<p>Vue.extend的作用是构造一个Vue的子类，使用一种非常经典的原型继承的方式把一个纯对象转换成了一个继承于Vue的构造器Sub并返回，然后对Sub对象本身扩展一些属性，如扩展options、添加全局API，并且对配置做一些初始化工作。</p>\n<p>最后对这个Sub构造函数做了缓存，避免多次执行Vue.extend的时候对同一个子组件重复构造。在执行父组件patch方法解析到组件VNode的时候，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，再走到子组件初始化逻辑。</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>安装组件钩子函数：将组件特有的几个钩子和Vue实例的生命周期钩子合并。</p>\n<p>在实例化Vue的时候，Vue的挂载是在初始化完成的时候，这个是一个同步的事件，有一个固定的地方可以执行这块逻辑，不需要钩子函数来回调Vue的挂载操作。</p>\n<p>而子组件的挂载时机，是在父组件patch的过程中。子组件为了更好的管理自己的生命周期，添加了init、prepatch、insert和destroy四个生命周期钩子，分别对应初始化、更新、挂载完成、销毁。</p>\n<p>在父组件VNode执行执行patch的时候会执行上面的钩子函数，这就可以实现组件的渲染。这里需要注意的一点是Vue实例原有的几种生命钩子是可以正常使用的，如mounted钩子函数会在insert钩子执行的时候被调用。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>实例化VNode：实例化一个VNode，不过需要注意的是组件的VNode是没有children的。因为父组件render方法中，是看不到子组件内部结构的，只会为子组件生成一个组件VNode。</p>\n<p>父组件render方法生成VDOM之后，会执行到patch方法，在patch过程中会将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，在这个子组件render方法生成的VDOM中，才会有children。</p>\n<p>也就是说render方法在解析子组件的时候，只会将子组件生成一个组件VNode，不会关心子组件是否有子组件，子组件是否有子组件，这个事情由子组件来关心。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h4><p>render方法将Vue实例渲染成一个虚拟Node，在生成VNode的时候完成了渲染watcher的依赖的收集。</p>\n<p>patch方法将VNode转换为真正的DOM节点。</p>\n<h4 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h4><p>在Vue实例挂载的时候，执行render方法来生成VNode。而在开发的时候，开发者大多数情况并不是自己手写的render函数，而是写的template模版或者el。在mounted的方法中，会将template模版编译成render方法，如果是el会多一个步骤，得先从el中提取出template模版。</p>\n<h4 id=\"本集看点\"><a href=\"#本集看点\" class=\"headerlink\" title=\"本集看点\"></a>本集看点</h4><h5 id=\"render渲染VNode主要步骤\"><a href=\"#render渲染VNode主要步骤\" class=\"headerlink\" title=\"render渲染VNode主要步骤\"></a>render渲染VNode主要步骤</h5><ol>\n<li><p>将children参数规范化：由于生成VNode的参数中children必须是VNode类型的，而下面几种情况下children不符合条件，所以在根据参数实例化VNode之前需要将children规范化成一个类型为VNode的Array。</p>\n<ul>\n<li><p>render函数是编译生成的，理论上编译生成的children已经是VNode类型的，但是当组件是函数式组件时，返回的是一个数组而不是一个根结点，所以需要用Array.prototype.concat方法将整个children数组打平，让深度只有一层。</p>\n<p>⚠️只有这一种情况，调用simpleNormalizeChildren方法来实现children规范化。</p>\n</li>\n<li><ol>\n<li>render函数是用户手写的，当children只有一个基础类型节点的时候，会调用createTextVNode方法创建一个文本节点的VNode；</li>\n<li>render函数是手写的，当编译slot或者v-for的时候。</li>\n</ol>\n<p>⚠️只有这两种情况，调用normalizeChildren方法来实现children规范化。</p>\n</li>\n</ul>\n</li>\n<li><p>创建VNode实例</p>\n<p>为每一个html标签创建一个VNode，顺序是先子后父，从上到下。可以理解成按照标签闭合的顺序，依次创建VNode，一个template模版中的根标签生成的就是当前组件的VNode树，也称为VDOM。</p>\n<p>对tag进行判断，创建不同类型的VNode：</p>\n<ul>\n<li>如果是字符串类型且是内置的节点，直接创建普通VNode;</li>\n<li>如果是字符串类型且是已注册的组件名，则通过createComponent方法创建一个组件类型的VNode;</li>\n<li>如果是字符串类型，又不是上面两种情况，创建一个未知标签的VNode;</li>\n<li>如果是组件类型，则通过createComponent方法创建一个组件类型的VNode。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"创建组件类型VNode主要步骤\"><a href=\"#创建组件类型VNode主要步骤\" class=\"headerlink\" title=\"创建组件类型VNode主要步骤\"></a>创建组件类型VNode主要步骤</h5><p>render渲染VNode可能会生成3种类型的VNode：</p>\n<ol>\n<li>普通类型VNode;</li>\n<li>未知标签VNode;</li>\n<li>组件类型VNode。</li>\n</ol>\n<p>因为前面两种都比较简单，这里着重分析组件类型VNode。通过createComponent方法将组件渲染成VNode主要做了3个事情：</p>\n<ol>\n<li><p>构造子类构造函数：开发者在写组件的时候，通常都是创建一个普通的对象，Vue内部使用Vue.extend将这个普通对象做了扩展，使这个对象可以像Vue实例一样可以完成初始化、挂载、渲染等一系列功能。</p>\n<p>Vue.extend的作用是构造一个Vue的子类，使用一种非常经典的原型继承的方式把一个纯对象转换成了一个继承于Vue的构造器Sub并返回，然后对Sub对象本身扩展一些属性，如扩展options、添加全局API，并且对配置做一些初始化工作。</p>\n<p>最后对这个Sub构造函数做了缓存，避免多次执行Vue.extend的时候对同一个子组件重复构造。在执行父组件patch方法解析到组件VNode的时候，会触发子组件生命周期中的init hook，在init hook中开始对子组件进行挂载，再走到子组件初始化逻辑。</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>安装组件钩子函数：将组件特有的几个钩子和Vue实例的生命周期钩子合并。</p>\n<p>在实例化Vue的时候，Vue的挂载是在初始化完成的时候，这个是一个同步的事件，有一个固定的地方可以执行这块逻辑，不需要钩子函数来回调Vue的挂载操作。</p>\n<p>而子组件的挂载时机，是在父组件patch的过程中。子组件为了更好的管理自己的生命周期，添加了init、prepatch、insert和destroy四个生命周期钩子，分别对应初始化、更新、挂载完成、销毁。</p>\n<p>在父组件VNode执行执行patch的时候会执行上面的钩子函数，这就可以实现组件的渲染。这里需要注意的一点是Vue实例原有的几种生命钩子是可以正常使用的，如mounted钩子函数会在insert钩子执行的时候被调用。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>实例化VNode：实例化一个VNode，不过需要注意的是组件的VNode是没有children的。因为父组件render方法中，是看不到子组件内部结构的，只会为子组件生成一个组件VNode。</p>\n<p>父组件render方法生成VDOM之后，会执行到patch方法，在patch过程中会将子组件当作一个新的Vue实例，重新进行初始化、render生成VDOM，在这个子组件render方法生成的VDOM中，才会有children。</p>\n<p>也就是说render方法在解析子组件的时候，只会将子组件生成一个组件VNode，不会关心子组件是否有子组件，子组件是否有子组件，这个事情由子组件来关心。</p>\n</li>\n</ol>\n"},{"title":"Vue2.x的v-model语法糖","_content":"\n#### 概念\n\n首先需要明确的一个概念，数据响应式不等于双向绑定。\n\n数据响应式：通过数据的改变去驱动视图的变化。\n\n双向绑定：除了数据的改变去改变视图的变化外，视图的变化反过来也影响数据。\n\n在Vue中，使用v-model这个语法糖来实现双向绑定。\n\n\n\n\n\n#### 应用场景\n\nv-model的应用场景有两个：\n\n1. 表单元素：填写表单时，视图变化更新数据；\n\n2. 组件：父组件通过v-model给子组件传值，子组件的触发父组件的自定义方法，更新传给子组件的值。\n\n   ⚠️ 这里子组件的触发父组件的自定义方法，父组件是不需要做额外操作的，开发者不需要在父组件去硬编码监听这个子组件的事件，更不需要为这个事件添加回调函数，因为这些都是v-model内部做的事情。\n\n\n\n##### 表单元素\n\n可以将表单元素看作一个子组件，父组件将响应式数据的值传给表单元素。\n\n根据表单元素的类型，编译过程中会给父组件添加自定义事件，当表单元素值变化的时候，会触发这个编译过程中生成的自定义事件。\n\n这个自定义事件的参数值就是表单元素变化后的值，开发者不需要额外处理，它会自己完成对父组件传给子组件值的更新。\n\n\n\n##### 组件\n\n父组件将响应式数据的值传给子组件。\n\n要实现双向绑定，子组件要做的两件事情：\n\n1. 接收props;\n2. 触发父组件的自定义方法。\n\n这里是有一个默认值的。如果父组件使用v-model来实现跟子组件的双向绑定，子组件默认可以接收到key为value的一个从父组件传过来的props属性，而且子组件可以通过触发父组件的input事件，并将value需要更新的值做为参数，是可以完成一个更新数据闭环的。\n\n子组件接收到的key值和触发父组件自定义事件的名称都是可以配置的，如果不配置就是用的value和input。配置方法：在子组件的model属性中给prop和event属性赋值就行。\n\n在这个场景下，父组件更新方法做的事情非常简单，数据是子组件调用方法的时候传递过来的，调用时机是子组件通知的，需要更新的就是v-model后面的响应式数据。因为这个方法做的事情太简单，所以就在编译v-model的时候内部完成了。\n\n\n\n##### 差异\n\n表单元素和组件的双向绑定最大的差异，就在子组件的双向绑定，需要子组件去触发父组件的自定义事件更新。\n\n其实也是根据应用场景不同来做的这个差异化，组件更新的时机本身就比较灵活，这个交予组件自己控制会更自由。而表单元素的应用场景比较简单，视图数据变化的时候自动触发父组件更新，这样用起来更简单。\n\n\n\n\n\n#### 语法糖\n\n语法糖主要做的事情有3个：\n\n1. 给子组件传值；\n\n2. 内部给父组件生成一个事件回调函数，用来更新传给子组件的值；\n\n   ⚠️ 这里稍微有点绕，子组件通知父组件更新父组件传给子组件的值。因为Vue是单向数据流，子组件是不能自己更新从父组件传过来的数据的。\n\n3. 如果是表单元素，数据变化会自动触发父组件事件回调函数。\n\n","source":"_posts/Vue2.x的v-model语法糖.md","raw":"---\ntitle: Vue2.x的v-model语法糖\n\ntags: [v-model,双向绑定]\n\ncategories: vue\n---\n\n#### 概念\n\n首先需要明确的一个概念，数据响应式不等于双向绑定。\n\n数据响应式：通过数据的改变去驱动视图的变化。\n\n双向绑定：除了数据的改变去改变视图的变化外，视图的变化反过来也影响数据。\n\n在Vue中，使用v-model这个语法糖来实现双向绑定。\n\n\n\n\n\n#### 应用场景\n\nv-model的应用场景有两个：\n\n1. 表单元素：填写表单时，视图变化更新数据；\n\n2. 组件：父组件通过v-model给子组件传值，子组件的触发父组件的自定义方法，更新传给子组件的值。\n\n   ⚠️ 这里子组件的触发父组件的自定义方法，父组件是不需要做额外操作的，开发者不需要在父组件去硬编码监听这个子组件的事件，更不需要为这个事件添加回调函数，因为这些都是v-model内部做的事情。\n\n\n\n##### 表单元素\n\n可以将表单元素看作一个子组件，父组件将响应式数据的值传给表单元素。\n\n根据表单元素的类型，编译过程中会给父组件添加自定义事件，当表单元素值变化的时候，会触发这个编译过程中生成的自定义事件。\n\n这个自定义事件的参数值就是表单元素变化后的值，开发者不需要额外处理，它会自己完成对父组件传给子组件值的更新。\n\n\n\n##### 组件\n\n父组件将响应式数据的值传给子组件。\n\n要实现双向绑定，子组件要做的两件事情：\n\n1. 接收props;\n2. 触发父组件的自定义方法。\n\n这里是有一个默认值的。如果父组件使用v-model来实现跟子组件的双向绑定，子组件默认可以接收到key为value的一个从父组件传过来的props属性，而且子组件可以通过触发父组件的input事件，并将value需要更新的值做为参数，是可以完成一个更新数据闭环的。\n\n子组件接收到的key值和触发父组件自定义事件的名称都是可以配置的，如果不配置就是用的value和input。配置方法：在子组件的model属性中给prop和event属性赋值就行。\n\n在这个场景下，父组件更新方法做的事情非常简单，数据是子组件调用方法的时候传递过来的，调用时机是子组件通知的，需要更新的就是v-model后面的响应式数据。因为这个方法做的事情太简单，所以就在编译v-model的时候内部完成了。\n\n\n\n##### 差异\n\n表单元素和组件的双向绑定最大的差异，就在子组件的双向绑定，需要子组件去触发父组件的自定义事件更新。\n\n其实也是根据应用场景不同来做的这个差异化，组件更新的时机本身就比较灵活，这个交予组件自己控制会更自由。而表单元素的应用场景比较简单，视图数据变化的时候自动触发父组件更新，这样用起来更简单。\n\n\n\n\n\n#### 语法糖\n\n语法糖主要做的事情有3个：\n\n1. 给子组件传值；\n\n2. 内部给父组件生成一个事件回调函数，用来更新传给子组件的值；\n\n   ⚠️ 这里稍微有点绕，子组件通知父组件更新父组件传给子组件的值。因为Vue是单向数据流，子组件是不能自己更新从父组件传过来的数据的。\n\n3. 如果是表单元素，数据变化会自动触发父组件事件回调函数。\n\n","slug":"Vue2.x的v-model语法糖","published":1,"date":"2023-11-07T03:36:00.761Z","updated":"2023-11-07T03:36:00.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87s000qu17uattze05x","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>首先需要明确的一个概念，数据响应式不等于双向绑定。</p>\n<p>数据响应式：通过数据的改变去驱动视图的变化。</p>\n<p>双向绑定：除了数据的改变去改变视图的变化外，视图的变化反过来也影响数据。</p>\n<p>在Vue中，使用v-model这个语法糖来实现双向绑定。</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>v-model的应用场景有两个：</p>\n<ol>\n<li><p>表单元素：填写表单时，视图变化更新数据；</p>\n</li>\n<li><p>组件：父组件通过v-model给子组件传值，子组件的触发父组件的自定义方法，更新传给子组件的值。</p>\n<p>⚠️ 这里子组件的触发父组件的自定义方法，父组件是不需要做额外操作的，开发者不需要在父组件去硬编码监听这个子组件的事件，更不需要为这个事件添加回调函数，因为这些都是v-model内部做的事情。</p>\n</li>\n</ol>\n<h5 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h5><p>可以将表单元素看作一个子组件，父组件将响应式数据的值传给表单元素。</p>\n<p>根据表单元素的类型，编译过程中会给父组件添加自定义事件，当表单元素值变化的时候，会触发这个编译过程中生成的自定义事件。</p>\n<p>这个自定义事件的参数值就是表单元素变化后的值，开发者不需要额外处理，它会自己完成对父组件传给子组件值的更新。</p>\n<h5 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h5><p>父组件将响应式数据的值传给子组件。</p>\n<p>要实现双向绑定，子组件要做的两件事情：</p>\n<ol>\n<li>接收props;</li>\n<li>触发父组件的自定义方法。</li>\n</ol>\n<p>这里是有一个默认值的。如果父组件使用v-model来实现跟子组件的双向绑定，子组件默认可以接收到key为value的一个从父组件传过来的props属性，而且子组件可以通过触发父组件的input事件，并将value需要更新的值做为参数，是可以完成一个更新数据闭环的。</p>\n<p>子组件接收到的key值和触发父组件自定义事件的名称都是可以配置的，如果不配置就是用的value和input。配置方法：在子组件的model属性中给prop和event属性赋值就行。</p>\n<p>在这个场景下，父组件更新方法做的事情非常简单，数据是子组件调用方法的时候传递过来的，调用时机是子组件通知的，需要更新的就是v-model后面的响应式数据。因为这个方法做的事情太简单，所以就在编译v-model的时候内部完成了。</p>\n<h5 id=\"差异\"><a href=\"#差异\" class=\"headerlink\" title=\"差异\"></a>差异</h5><p>表单元素和组件的双向绑定最大的差异，就在子组件的双向绑定，需要子组件去触发父组件的自定义事件更新。</p>\n<p>其实也是根据应用场景不同来做的这个差异化，组件更新的时机本身就比较灵活，这个交予组件自己控制会更自由。而表单元素的应用场景比较简单，视图数据变化的时候自动触发父组件更新，这样用起来更简单。</p>\n<h4 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h4><p>语法糖主要做的事情有3个：</p>\n<ol>\n<li><p>给子组件传值；</p>\n</li>\n<li><p>内部给父组件生成一个事件回调函数，用来更新传给子组件的值；</p>\n<p>⚠️ 这里稍微有点绕，子组件通知父组件更新父组件传给子组件的值。因为Vue是单向数据流，子组件是不能自己更新从父组件传过来的数据的。</p>\n</li>\n<li><p>如果是表单元素，数据变化会自动触发父组件事件回调函数。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>首先需要明确的一个概念，数据响应式不等于双向绑定。</p>\n<p>数据响应式：通过数据的改变去驱动视图的变化。</p>\n<p>双向绑定：除了数据的改变去改变视图的变化外，视图的变化反过来也影响数据。</p>\n<p>在Vue中，使用v-model这个语法糖来实现双向绑定。</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>v-model的应用场景有两个：</p>\n<ol>\n<li><p>表单元素：填写表单时，视图变化更新数据；</p>\n</li>\n<li><p>组件：父组件通过v-model给子组件传值，子组件的触发父组件的自定义方法，更新传给子组件的值。</p>\n<p>⚠️ 这里子组件的触发父组件的自定义方法，父组件是不需要做额外操作的，开发者不需要在父组件去硬编码监听这个子组件的事件，更不需要为这个事件添加回调函数，因为这些都是v-model内部做的事情。</p>\n</li>\n</ol>\n<h5 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h5><p>可以将表单元素看作一个子组件，父组件将响应式数据的值传给表单元素。</p>\n<p>根据表单元素的类型，编译过程中会给父组件添加自定义事件，当表单元素值变化的时候，会触发这个编译过程中生成的自定义事件。</p>\n<p>这个自定义事件的参数值就是表单元素变化后的值，开发者不需要额外处理，它会自己完成对父组件传给子组件值的更新。</p>\n<h5 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h5><p>父组件将响应式数据的值传给子组件。</p>\n<p>要实现双向绑定，子组件要做的两件事情：</p>\n<ol>\n<li>接收props;</li>\n<li>触发父组件的自定义方法。</li>\n</ol>\n<p>这里是有一个默认值的。如果父组件使用v-model来实现跟子组件的双向绑定，子组件默认可以接收到key为value的一个从父组件传过来的props属性，而且子组件可以通过触发父组件的input事件，并将value需要更新的值做为参数，是可以完成一个更新数据闭环的。</p>\n<p>子组件接收到的key值和触发父组件自定义事件的名称都是可以配置的，如果不配置就是用的value和input。配置方法：在子组件的model属性中给prop和event属性赋值就行。</p>\n<p>在这个场景下，父组件更新方法做的事情非常简单，数据是子组件调用方法的时候传递过来的，调用时机是子组件通知的，需要更新的就是v-model后面的响应式数据。因为这个方法做的事情太简单，所以就在编译v-model的时候内部完成了。</p>\n<h5 id=\"差异\"><a href=\"#差异\" class=\"headerlink\" title=\"差异\"></a>差异</h5><p>表单元素和组件的双向绑定最大的差异，就在子组件的双向绑定，需要子组件去触发父组件的自定义事件更新。</p>\n<p>其实也是根据应用场景不同来做的这个差异化，组件更新的时机本身就比较灵活，这个交予组件自己控制会更自由。而表单元素的应用场景比较简单，视图数据变化的时候自动触发父组件更新，这样用起来更简单。</p>\n<h4 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h4><p>语法糖主要做的事情有3个：</p>\n<ol>\n<li><p>给子组件传值；</p>\n</li>\n<li><p>内部给父组件生成一个事件回调函数，用来更新传给子组件的值；</p>\n<p>⚠️ 这里稍微有点绕，子组件通知父组件更新父组件传给子组件的值。因为Vue是单向数据流，子组件是不能自己更新从父组件传过来的数据的。</p>\n</li>\n<li><p>如果是表单元素，数据变化会自动触发父组件事件回调函数。</p>\n</li>\n</ol>\n"},{"title":"Vue2.x的事件中心","_content":"\nVue中通过EventBus事件中心进行兄弟节点之间的通信，是一个非常经典的发布订阅模式实现。\n\n\n\n#### 前置准备\n\n往Vue实例上添加一个_events属性，属性值是一个对象，用于以键值对的方式，分别存储事件名称，以及存储事件回调函数的数组。\n\n\n\n$on、$once、$emit、$off方法是定义在Vue原型上的，所有的Vue实例都可以调用这些方法。\n\n\n\n事件中心要运转起来，必须要基于同一个实例来调用这些方法，因为只有这样事件的存储空间才会被共用，事件的发布和订阅才能被串起来。在Vue中使用事件中心的时候，可以全局定义一个Vue实例，专门用于组件通信。\n\n\n\n\n\n#### $on\n\n$on方法接收两个参数，第一个参数可能是字符串类型的事件名和数组类型事件名数组，第二个参数是回调函数。\n\n这里用到了递归，如果参数的第一项是数组，就遍历数组，将数组项作为第一个参数，第二个参数不变，递归执行$on方法。直到第一个参数是一个字符串了，就可以接着执行订阅事件的逻辑。\n\n接下来判断当前_events对象里，$on方法的第一个参数作为key，所对应的值是否存在。\n\n1. 如果不存在，则先创建一个空数组，然后再往数组中添加回调函数；\n2. 如果存在，则说明值已经是一个数组类型了，直接往数组中添加回调函数。\n\n\n\n\n\n#### $once\n\n$once方法接收两个参数，第一个参数是字符串类型的事件名，第二个参数是回调函数。\n\n内部执行的就是on方法，并且当回调函数执行一次后，再通过off方法移除事件的回调，确保回调函数只执行一次。\n\n在once方法中新创建一个回调函数，作为on方法事件的回调，在新回调函数中执行off方法移除事件的回调，那么新回调函数就是只会被执行一次，在里面执行once的第二个参数就可以了。\n\n\n\n\n\n#### $emit\n\n$emit方法接收一个参数，是一个字符串类型的事件名。\n\n根据事件名找到事件名对应的所有的回调函数，然后执行所有的回调函数。\n\n\n\n#### $off\n\n$off方法接收参数是不固定个数的（0、1或2），用于移除事件回调。\n\n1. $off()：将_events对象赋值为空对象；\n2. $off([event, ...], fn)：这里也用到了递归，最后执行off(event, fn)，一个一个执行移除指定事件名event和指定fn；\n3. $off(event, fn)：用于移除指定事件名event和指定fn；\n4. $off(event)：用于移除指定事件名event对应所有的fn。\n\n","source":"_posts/Vue2.x的事件中心.md","raw":"---\ntitle: Vue2.x的事件中心\n\ntags: [事件中心]\n\ncategories: vue\n---\n\nVue中通过EventBus事件中心进行兄弟节点之间的通信，是一个非常经典的发布订阅模式实现。\n\n\n\n#### 前置准备\n\n往Vue实例上添加一个_events属性，属性值是一个对象，用于以键值对的方式，分别存储事件名称，以及存储事件回调函数的数组。\n\n\n\n$on、$once、$emit、$off方法是定义在Vue原型上的，所有的Vue实例都可以调用这些方法。\n\n\n\n事件中心要运转起来，必须要基于同一个实例来调用这些方法，因为只有这样事件的存储空间才会被共用，事件的发布和订阅才能被串起来。在Vue中使用事件中心的时候，可以全局定义一个Vue实例，专门用于组件通信。\n\n\n\n\n\n#### $on\n\n$on方法接收两个参数，第一个参数可能是字符串类型的事件名和数组类型事件名数组，第二个参数是回调函数。\n\n这里用到了递归，如果参数的第一项是数组，就遍历数组，将数组项作为第一个参数，第二个参数不变，递归执行$on方法。直到第一个参数是一个字符串了，就可以接着执行订阅事件的逻辑。\n\n接下来判断当前_events对象里，$on方法的第一个参数作为key，所对应的值是否存在。\n\n1. 如果不存在，则先创建一个空数组，然后再往数组中添加回调函数；\n2. 如果存在，则说明值已经是一个数组类型了，直接往数组中添加回调函数。\n\n\n\n\n\n#### $once\n\n$once方法接收两个参数，第一个参数是字符串类型的事件名，第二个参数是回调函数。\n\n内部执行的就是on方法，并且当回调函数执行一次后，再通过off方法移除事件的回调，确保回调函数只执行一次。\n\n在once方法中新创建一个回调函数，作为on方法事件的回调，在新回调函数中执行off方法移除事件的回调，那么新回调函数就是只会被执行一次，在里面执行once的第二个参数就可以了。\n\n\n\n\n\n#### $emit\n\n$emit方法接收一个参数，是一个字符串类型的事件名。\n\n根据事件名找到事件名对应的所有的回调函数，然后执行所有的回调函数。\n\n\n\n#### $off\n\n$off方法接收参数是不固定个数的（0、1或2），用于移除事件回调。\n\n1. $off()：将_events对象赋值为空对象；\n2. $off([event, ...], fn)：这里也用到了递归，最后执行off(event, fn)，一个一个执行移除指定事件名event和指定fn；\n3. $off(event, fn)：用于移除指定事件名event和指定fn；\n4. $off(event)：用于移除指定事件名event对应所有的fn。\n\n","slug":"Vue2.x的事件中心","published":1,"date":"2023-11-07T03:36:00.761Z","updated":"2023-11-07T03:36:00.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87u000uu17u30sgho73","content":"<p>Vue中通过EventBus事件中心进行兄弟节点之间的通信，是一个非常经典的发布订阅模式实现。</p>\n<h4 id=\"前置准备\"><a href=\"#前置准备\" class=\"headerlink\" title=\"前置准备\"></a>前置准备</h4><p>往Vue实例上添加一个_events属性，属性值是一个对象，用于以键值对的方式，分别存储事件名称，以及存储事件回调函数的数组。</p>\n<p>$on、$once、$emit、$off方法是定义在Vue原型上的，所有的Vue实例都可以调用这些方法。</p>\n<p>事件中心要运转起来，必须要基于同一个实例来调用这些方法，因为只有这样事件的存储空间才会被共用，事件的发布和订阅才能被串起来。在Vue中使用事件中心的时候，可以全局定义一个Vue实例，专门用于组件通信。</p>\n<h4 id=\"on\"><a href=\"#on\" class=\"headerlink\" title=\"$on\"></a>$on</h4><p>$on方法接收两个参数，第一个参数可能是字符串类型的事件名和数组类型事件名数组，第二个参数是回调函数。</p>\n<p>这里用到了递归，如果参数的第一项是数组，就遍历数组，将数组项作为第一个参数，第二个参数不变，递归执行$on方法。直到第一个参数是一个字符串了，就可以接着执行订阅事件的逻辑。</p>\n<p>接下来判断当前_events对象里，$on方法的第一个参数作为key，所对应的值是否存在。</p>\n<ol>\n<li>如果不存在，则先创建一个空数组，然后再往数组中添加回调函数；</li>\n<li>如果存在，则说明值已经是一个数组类型了，直接往数组中添加回调函数。</li>\n</ol>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"$once\"></a>$once</h4><p>$once方法接收两个参数，第一个参数是字符串类型的事件名，第二个参数是回调函数。</p>\n<p>内部执行的就是on方法，并且当回调函数执行一次后，再通过off方法移除事件的回调，确保回调函数只执行一次。</p>\n<p>在once方法中新创建一个回调函数，作为on方法事件的回调，在新回调函数中执行off方法移除事件的回调，那么新回调函数就是只会被执行一次，在里面执行once的第二个参数就可以了。</p>\n<h4 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"$emit\"></a>$emit</h4><p>$emit方法接收一个参数，是一个字符串类型的事件名。</p>\n<p>根据事件名找到事件名对应的所有的回调函数，然后执行所有的回调函数。</p>\n<h4 id=\"off\"><a href=\"#off\" class=\"headerlink\" title=\"$off\"></a>$off</h4><p>$off方法接收参数是不固定个数的（0、1或2），用于移除事件回调。</p>\n<ol>\n<li>$off()：将_events对象赋值为空对象；</li>\n<li>$off([event, …], fn)：这里也用到了递归，最后执行off(event, fn)，一个一个执行移除指定事件名event和指定fn；</li>\n<li>$off(event, fn)：用于移除指定事件名event和指定fn；</li>\n<li>$off(event)：用于移除指定事件名event对应所有的fn。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue中通过EventBus事件中心进行兄弟节点之间的通信，是一个非常经典的发布订阅模式实现。</p>\n<h4 id=\"前置准备\"><a href=\"#前置准备\" class=\"headerlink\" title=\"前置准备\"></a>前置准备</h4><p>往Vue实例上添加一个_events属性，属性值是一个对象，用于以键值对的方式，分别存储事件名称，以及存储事件回调函数的数组。</p>\n<p>$on、$once、$emit、$off方法是定义在Vue原型上的，所有的Vue实例都可以调用这些方法。</p>\n<p>事件中心要运转起来，必须要基于同一个实例来调用这些方法，因为只有这样事件的存储空间才会被共用，事件的发布和订阅才能被串起来。在Vue中使用事件中心的时候，可以全局定义一个Vue实例，专门用于组件通信。</p>\n<h4 id=\"on\"><a href=\"#on\" class=\"headerlink\" title=\"$on\"></a>$on</h4><p>$on方法接收两个参数，第一个参数可能是字符串类型的事件名和数组类型事件名数组，第二个参数是回调函数。</p>\n<p>这里用到了递归，如果参数的第一项是数组，就遍历数组，将数组项作为第一个参数，第二个参数不变，递归执行$on方法。直到第一个参数是一个字符串了，就可以接着执行订阅事件的逻辑。</p>\n<p>接下来判断当前_events对象里，$on方法的第一个参数作为key，所对应的值是否存在。</p>\n<ol>\n<li>如果不存在，则先创建一个空数组，然后再往数组中添加回调函数；</li>\n<li>如果存在，则说明值已经是一个数组类型了，直接往数组中添加回调函数。</li>\n</ol>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"$once\"></a>$once</h4><p>$once方法接收两个参数，第一个参数是字符串类型的事件名，第二个参数是回调函数。</p>\n<p>内部执行的就是on方法，并且当回调函数执行一次后，再通过off方法移除事件的回调，确保回调函数只执行一次。</p>\n<p>在once方法中新创建一个回调函数，作为on方法事件的回调，在新回调函数中执行off方法移除事件的回调，那么新回调函数就是只会被执行一次，在里面执行once的第二个参数就可以了。</p>\n<h4 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"$emit\"></a>$emit</h4><p>$emit方法接收一个参数，是一个字符串类型的事件名。</p>\n<p>根据事件名找到事件名对应的所有的回调函数，然后执行所有的回调函数。</p>\n<h4 id=\"off\"><a href=\"#off\" class=\"headerlink\" title=\"$off\"></a>$off</h4><p>$off方法接收参数是不固定个数的（0、1或2），用于移除事件回调。</p>\n<ol>\n<li>$off()：将_events对象赋值为空对象；</li>\n<li>$off([event, …], fn)：这里也用到了递归，最后执行off(event, fn)，一个一个执行移除指定事件名event和指定fn；</li>\n<li>$off(event, fn)：用于移除指定事件名event和指定fn；</li>\n<li>$off(event)：用于移除指定事件名event对应所有的fn。</li>\n</ol>\n"},{"title":"Vue2.x的依赖收集","_content":"\n#### 基本概念\n\nVue是一个实现了数据驱动的框架， 当数据改变的时候，需要通知到依赖这个数据的订阅者watcher。将数据和依赖数据的订阅者watcher联系起来的过程，称为依赖收集。\n\n\n\n#### 收集过程\n\n一般来讲，数据的订阅者watcher常见的类型有如下3种：\n\n1. computed watcher\n2. user watcher\n3. render watcher\n\n不同类型的watcher完成依赖收集是有顺序的，比如上面提到的3种类型watcher执行顺序就是：computed watcher -> user watcher -> render watcher。\n\n下面按顺序来分析3种watcher完成依赖收集的过程：\n\n##### computed watcher\n\n在初始化数据的时候，如果组件中有使用computed计算属性，会执行initComputed方法，一个computed属性对应生成一个computed watcher。computed watcher是惰性的，不会马上执行watcher实例的get方法，watcher实例的get方法是依赖收集的一个关键方法，也就是说初始化computed的时候是没有做依赖收集的。\n\n当后面使用到computed属性时，如template模版中第一次使用到计算属性，会执行computed对应watcher的get方法。\n\n在这里插入对依赖管理器的介绍，帮助理解后续的过程。对于每一个被用到的响应式数据，都需要有一个dep实例来管理依赖这个数据的watcher。构造函数Dep有一个静态属性target，可以理解成一个全局变量，开始当前watcher的依赖收集的时候，就将当前依赖收集的watcher赋值给target。结束当前watcher的依赖收集的时候，将target赋值为watcher栈里的最上层的一个watcher。从上面的描述中可以看出，在做依赖收集的时候，是按watcher顺序执行来完成依赖收集的。\n\n在get方法中会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。然后执行当前watcher实例的getter方法，也就是computed属性对应的计算方法，里面涉及到对响应式数据的取值操作，就会执行数据的getter方法（为了跟前面的get方法区别开，使用getter）。\n\n这里注意一下响应式数据，在执行initComputed之前，数据都是已经被数据劫持过的，使用的是Object.defineProperty方法。所以在对响应式数据取值的时候，才会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了computed watcher的压栈，所以这个时候的Dep.target是存在的，且值为computed watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，接着执行computed属性对应的计算方法，对使用到的响应式数据都完成依赖收集。完成依赖收集之后，将当前的watcher出栈。最后完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n##### user watcher\n\n在初始化数据的时候， 如果组件中有使用watch监听属性，会执行initWatch方法，一个watch属性对应生成一个user watcher。创建user watcher实例之后，会马上执行实例的get方法。\n\n在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。\n\n执行当前watcher实例的getter方法，这个getter方法是在创建实例的时候执行parsePath方法返回的一个方法，会从Vue实例中获取到当前watch属性的值。因为watch的属性都是响应式数据，所以取值的时候会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了user watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n##### render watcher\n\n初始化数据完成之后，对Vue实例进行挂载。将VNode渲染成DOM的方法作为创建watcher的第二个参数，创建了一个render watcher，一个组件实例对应一个render watcher。创建render watcher实例之后，会马上执行实例的get方法。\n\n在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。\n\n执行当前watcher实例的getter方法，也就是将VNode渲染成DOM的方法（创建watcher实例时传入的第二个参数），在创建DOM的时候，需要对响应式数据进行取值，这就会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了render watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n#### 差异\n\n这三种watcher的其实大同小异，主要差别在于两点：\n\n1. 实例的get方法执行时机不一样；\n2. 实例的getter方法不一样，可以根据需求自定义。\n\n","source":"_posts/Vue2.x的依赖收集.md","raw":"---\ntitle: Vue2.x的依赖收集\n\ntags: [依赖收集]\n\ncategories: vue\n---\n\n#### 基本概念\n\nVue是一个实现了数据驱动的框架， 当数据改变的时候，需要通知到依赖这个数据的订阅者watcher。将数据和依赖数据的订阅者watcher联系起来的过程，称为依赖收集。\n\n\n\n#### 收集过程\n\n一般来讲，数据的订阅者watcher常见的类型有如下3种：\n\n1. computed watcher\n2. user watcher\n3. render watcher\n\n不同类型的watcher完成依赖收集是有顺序的，比如上面提到的3种类型watcher执行顺序就是：computed watcher -> user watcher -> render watcher。\n\n下面按顺序来分析3种watcher完成依赖收集的过程：\n\n##### computed watcher\n\n在初始化数据的时候，如果组件中有使用computed计算属性，会执行initComputed方法，一个computed属性对应生成一个computed watcher。computed watcher是惰性的，不会马上执行watcher实例的get方法，watcher实例的get方法是依赖收集的一个关键方法，也就是说初始化computed的时候是没有做依赖收集的。\n\n当后面使用到computed属性时，如template模版中第一次使用到计算属性，会执行computed对应watcher的get方法。\n\n在这里插入对依赖管理器的介绍，帮助理解后续的过程。对于每一个被用到的响应式数据，都需要有一个dep实例来管理依赖这个数据的watcher。构造函数Dep有一个静态属性target，可以理解成一个全局变量，开始当前watcher的依赖收集的时候，就将当前依赖收集的watcher赋值给target。结束当前watcher的依赖收集的时候，将target赋值为watcher栈里的最上层的一个watcher。从上面的描述中可以看出，在做依赖收集的时候，是按watcher顺序执行来完成依赖收集的。\n\n在get方法中会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。然后执行当前watcher实例的getter方法，也就是computed属性对应的计算方法，里面涉及到对响应式数据的取值操作，就会执行数据的getter方法（为了跟前面的get方法区别开，使用getter）。\n\n这里注意一下响应式数据，在执行initComputed之前，数据都是已经被数据劫持过的，使用的是Object.defineProperty方法。所以在对响应式数据取值的时候，才会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了computed watcher的压栈，所以这个时候的Dep.target是存在的，且值为computed watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，接着执行computed属性对应的计算方法，对使用到的响应式数据都完成依赖收集。完成依赖收集之后，将当前的watcher出栈。最后完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n##### user watcher\n\n在初始化数据的时候， 如果组件中有使用watch监听属性，会执行initWatch方法，一个watch属性对应生成一个user watcher。创建user watcher实例之后，会马上执行实例的get方法。\n\n在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。\n\n执行当前watcher实例的getter方法，这个getter方法是在创建实例的时候执行parsePath方法返回的一个方法，会从Vue实例中获取到当前watch属性的值。因为watch的属性都是响应式数据，所以取值的时候会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了user watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n##### render watcher\n\n初始化数据完成之后，对Vue实例进行挂载。将VNode渲染成DOM的方法作为创建watcher的第二个参数，创建了一个render watcher，一个组件实例对应一个render watcher。创建render watcher实例之后，会马上执行实例的get方法。\n\n在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。\n\n执行当前watcher实例的getter方法，也就是将VNode渲染成DOM的方法（创建watcher实例时传入的第二个参数），在创建DOM的时候，需要对响应式数据进行取值，这就会执行数据的getter方法。\n\n在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。\n\n因为在前面的get方法中完成了render watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。\n\n在watcher.addDep方法中做了两件事，通过id来避免了重复收集：\n\n1. 判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；\n2. 判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。\n\nwatcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。\n\n\n\n#### 差异\n\n这三种watcher的其实大同小异，主要差别在于两点：\n\n1. 实例的get方法执行时机不一样；\n2. 实例的getter方法不一样，可以根据需求自定义。\n\n","slug":"Vue2.x的依赖收集","published":1,"date":"2023-11-07T03:36:00.761Z","updated":"2023-11-07T03:36:00.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87v000wu17u5msn1xi9","content":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>Vue是一个实现了数据驱动的框架， 当数据改变的时候，需要通知到依赖这个数据的订阅者watcher。将数据和依赖数据的订阅者watcher联系起来的过程，称为依赖收集。</p>\n<h4 id=\"收集过程\"><a href=\"#收集过程\" class=\"headerlink\" title=\"收集过程\"></a>收集过程</h4><p>一般来讲，数据的订阅者watcher常见的类型有如下3种：</p>\n<ol>\n<li>computed watcher</li>\n<li>user watcher</li>\n<li>render watcher</li>\n</ol>\n<p>不同类型的watcher完成依赖收集是有顺序的，比如上面提到的3种类型watcher执行顺序就是：computed watcher -&gt; user watcher -&gt; render watcher。</p>\n<p>下面按顺序来分析3种watcher完成依赖收集的过程：</p>\n<h5 id=\"computed-watcher\"><a href=\"#computed-watcher\" class=\"headerlink\" title=\"computed watcher\"></a>computed watcher</h5><p>在初始化数据的时候，如果组件中有使用computed计算属性，会执行initComputed方法，一个computed属性对应生成一个computed watcher。computed watcher是惰性的，不会马上执行watcher实例的get方法，watcher实例的get方法是依赖收集的一个关键方法，也就是说初始化computed的时候是没有做依赖收集的。</p>\n<p>当后面使用到computed属性时，如template模版中第一次使用到计算属性，会执行computed对应watcher的get方法。</p>\n<p>在这里插入对依赖管理器的介绍，帮助理解后续的过程。对于每一个被用到的响应式数据，都需要有一个dep实例来管理依赖这个数据的watcher。构造函数Dep有一个静态属性target，可以理解成一个全局变量，开始当前watcher的依赖收集的时候，就将当前依赖收集的watcher赋值给target。结束当前watcher的依赖收集的时候，将target赋值为watcher栈里的最上层的一个watcher。从上面的描述中可以看出，在做依赖收集的时候，是按watcher顺序执行来完成依赖收集的。</p>\n<p>在get方法中会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。然后执行当前watcher实例的getter方法，也就是computed属性对应的计算方法，里面涉及到对响应式数据的取值操作，就会执行数据的getter方法（为了跟前面的get方法区别开，使用getter）。</p>\n<p>这里注意一下响应式数据，在执行initComputed之前，数据都是已经被数据劫持过的，使用的是Object.defineProperty方法。所以在对响应式数据取值的时候，才会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了computed watcher的压栈，所以这个时候的Dep.target是存在的，且值为computed watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，接着执行computed属性对应的计算方法，对使用到的响应式数据都完成依赖收集。完成依赖收集之后，将当前的watcher出栈。最后完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h5 id=\"user-watcher\"><a href=\"#user-watcher\" class=\"headerlink\" title=\"user watcher\"></a>user watcher</h5><p>在初始化数据的时候， 如果组件中有使用watch监听属性，会执行initWatch方法，一个watch属性对应生成一个user watcher。创建user watcher实例之后，会马上执行实例的get方法。</p>\n<p>在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。</p>\n<p>执行当前watcher实例的getter方法，这个getter方法是在创建实例的时候执行parsePath方法返回的一个方法，会从Vue实例中获取到当前watch属性的值。因为watch的属性都是响应式数据，所以取值的时候会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了user watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h5 id=\"render-watcher\"><a href=\"#render-watcher\" class=\"headerlink\" title=\"render watcher\"></a>render watcher</h5><p>初始化数据完成之后，对Vue实例进行挂载。将VNode渲染成DOM的方法作为创建watcher的第二个参数，创建了一个render watcher，一个组件实例对应一个render watcher。创建render watcher实例之后，会马上执行实例的get方法。</p>\n<p>在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。</p>\n<p>执行当前watcher实例的getter方法，也就是将VNode渲染成DOM的方法（创建watcher实例时传入的第二个参数），在创建DOM的时候，需要对响应式数据进行取值，这就会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了render watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h4 id=\"差异\"><a href=\"#差异\" class=\"headerlink\" title=\"差异\"></a>差异</h4><p>这三种watcher的其实大同小异，主要差别在于两点：</p>\n<ol>\n<li>实例的get方法执行时机不一样；</li>\n<li>实例的getter方法不一样，可以根据需求自定义。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>Vue是一个实现了数据驱动的框架， 当数据改变的时候，需要通知到依赖这个数据的订阅者watcher。将数据和依赖数据的订阅者watcher联系起来的过程，称为依赖收集。</p>\n<h4 id=\"收集过程\"><a href=\"#收集过程\" class=\"headerlink\" title=\"收集过程\"></a>收集过程</h4><p>一般来讲，数据的订阅者watcher常见的类型有如下3种：</p>\n<ol>\n<li>computed watcher</li>\n<li>user watcher</li>\n<li>render watcher</li>\n</ol>\n<p>不同类型的watcher完成依赖收集是有顺序的，比如上面提到的3种类型watcher执行顺序就是：computed watcher -&gt; user watcher -&gt; render watcher。</p>\n<p>下面按顺序来分析3种watcher完成依赖收集的过程：</p>\n<h5 id=\"computed-watcher\"><a href=\"#computed-watcher\" class=\"headerlink\" title=\"computed watcher\"></a>computed watcher</h5><p>在初始化数据的时候，如果组件中有使用computed计算属性，会执行initComputed方法，一个computed属性对应生成一个computed watcher。computed watcher是惰性的，不会马上执行watcher实例的get方法，watcher实例的get方法是依赖收集的一个关键方法，也就是说初始化computed的时候是没有做依赖收集的。</p>\n<p>当后面使用到computed属性时，如template模版中第一次使用到计算属性，会执行computed对应watcher的get方法。</p>\n<p>在这里插入对依赖管理器的介绍，帮助理解后续的过程。对于每一个被用到的响应式数据，都需要有一个dep实例来管理依赖这个数据的watcher。构造函数Dep有一个静态属性target，可以理解成一个全局变量，开始当前watcher的依赖收集的时候，就将当前依赖收集的watcher赋值给target。结束当前watcher的依赖收集的时候，将target赋值为watcher栈里的最上层的一个watcher。从上面的描述中可以看出，在做依赖收集的时候，是按watcher顺序执行来完成依赖收集的。</p>\n<p>在get方法中会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。然后执行当前watcher实例的getter方法，也就是computed属性对应的计算方法，里面涉及到对响应式数据的取值操作，就会执行数据的getter方法（为了跟前面的get方法区别开，使用getter）。</p>\n<p>这里注意一下响应式数据，在执行initComputed之前，数据都是已经被数据劫持过的，使用的是Object.defineProperty方法。所以在对响应式数据取值的时候，才会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了computed watcher的压栈，所以这个时候的Dep.target是存在的，且值为computed watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，接着执行computed属性对应的计算方法，对使用到的响应式数据都完成依赖收集。完成依赖收集之后，将当前的watcher出栈。最后完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h5 id=\"user-watcher\"><a href=\"#user-watcher\" class=\"headerlink\" title=\"user watcher\"></a>user watcher</h5><p>在初始化数据的时候， 如果组件中有使用watch监听属性，会执行initWatch方法，一个watch属性对应生成一个user watcher。创建user watcher实例之后，会马上执行实例的get方法。</p>\n<p>在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。</p>\n<p>执行当前watcher实例的getter方法，这个getter方法是在创建实例的时候执行parsePath方法返回的一个方法，会从Vue实例中获取到当前watch属性的值。因为watch的属性都是响应式数据，所以取值的时候会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了user watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h5 id=\"render-watcher\"><a href=\"#render-watcher\" class=\"headerlink\" title=\"render watcher\"></a>render watcher</h5><p>初始化数据完成之后，对Vue实例进行挂载。将VNode渲染成DOM的方法作为创建watcher的第二个参数，创建了一个render watcher，一个组件实例对应一个render watcher。创建render watcher实例之后，会马上执行实例的get方法。</p>\n<p>在get方法中也会将当前的watcher压入watcher栈中，并将依赖管理器Dep的静态属性target赋值为当前watcher。</p>\n<p>执行当前watcher实例的getter方法，也就是将VNode渲染成DOM的方法（创建watcher实例时传入的第二个参数），在创建DOM的时候，需要对响应式数据进行取值，这就会执行数据的getter方法。</p>\n<p>在getter方法中，除了取值还做了依赖收集的工作。判断Dep.target是否存在，如果存在就执行dep实例的depend方法，而dep.depend方法中调用的是当前watcher的addDep方法。</p>\n<p>因为在前面的get方法中完成了render watcher的压栈，所以这个时候的Dep.target是存在的，且值为user watcher，会顺利执行到当前watcher的addDep方法。</p>\n<p>在watcher.addDep方法中做了两件事，通过id来避免了重复收集：</p>\n<ol>\n<li>判断当前的watcher是否有收集关于当前dep实例的信息，如果没有则收集到自己的属性中；</li>\n<li>判断当前的dep实例是否有收集当前watcher的信息，如果没有则收集到自己的属性中。</li>\n</ol>\n<p>watcher.addDep执行完成后，将当前的watcher出栈。最后也是完成一个细节，遍历deps属性移除旧的订阅，更新为新的订阅。一些列操作完成之后，开始下一个watcher的依赖收集。</p>\n<h4 id=\"差异\"><a href=\"#差异\" class=\"headerlink\" title=\"差异\"></a>差异</h4><p>这三种watcher的其实大同小异，主要差别在于两点：</p>\n<ol>\n<li>实例的get方法执行时机不一样；</li>\n<li>实例的getter方法不一样，可以根据需求自定义。</li>\n</ol>\n"},{"title":"Vue2.x的数组响应式","_content":"\n#### 数组响应式的限制\n\nVue对数组响应式的处理可以分为两个方面来理解：\n\n1. 对数组项的以下7个操作方法做了重写，当数组使用下面方法改变了数组的值，Vue会派发更新通知依赖数组的watcher。\n   * push\n   *  pop\n   *  shift\n   *  unshift\n   *  splice\n   *  sort\n   *  reverse\n2. 数组项的值如果是对象，会对对象属性进行数据劫持实现响应式，完全走的就是对普通对象属性进行依赖收集，派发更新那一套流程。\n\n\n\nVue中不能检测以下数组的变动：\n\n1. 利用索引直接设置一个数组项；\n2. 修改数组的长度。\n\nVue中的数据响应式，实际上是通过对对象属性进行的数据劫持，而且无论是数组还是对象，响应式都是在初始化的时候完成的。Vue希望开发者可以提前声明所有的响应式属性，可以让响应式更可控。\n\n1. 数组项并不是一个对象的属性，在Vue中是不具有响应式的，在对这个数组项直接赋值的时候，数组值会改变，但并不会触发数组的setter方法。\n\n   ⚠️如果这个数组项的值是一个对象，那这个对象里面的属性值是响应式的。\n\n2. 修改数组的长度，数组值会改变，但并不会触发数组的setter方法。新数组中只有数组项里还存在的对象属性是响应式的。\n\n与其说Vue不能检测上面两种方式的变化，不如说Vue不想检测，尤大给的原因是性能代价和获得的用户体验收益不成正比。其实也好理解，对数据项直接赋值和修改数组的长度这两种方式都太不可控了。\n\n\n\n#### 数组响应式的实现\n\n在对数组类型的数据进行响应式处理之前，先往数组上绑定了数原型上有的一些方法和属性。这些方法和属性中有7个方法是被Vue做了重写的。因为这7个方法会改变数组本身的值，而Vue根本就没有对数组项这个维度进行响应式处理，所以不会触发数组的setter方法。\n\n为了处理这种情况，使数组在用的这7种方法改变值的时候会触发依赖更新，Vue将这几个方法做了一个重写。\n\n其中pop、shift、sort、reverse四个方法，因为没有添加数组项，所以重写的步骤很简单，就是执行方法、手动派发更新和返回方法的结果值。\n\n而push、unshift和splice方法因为添加了数据项，所以重写的步骤多了一项，简单来讲就是执行方法、将新增的数据项进行响应式处理、手动派发更新和返回方法的结果值。\n\n往目标数组中绑定这些方法和属性时，根据浏览器是否支持__proto__，分为了两种处理方法。\n\n1. 支持__proto__：调用protoAugment方法通过原型式继承的方式，将目标数组的原型指向改造后的数组的实例，这个实例中既有数组的所有属性和方法，又有重写了的7个方法，这种方式是将方法和属性绑定在目标的原型链上。\n2. 不支持__proto__：调用copyAugment方法，通过def函数，遍历改造后的数组实例，将方法和属性挂在到目标数组的属性上。\n\n\n\n#### 总结\n\n出于对性能的考虑，没有直接用Object.defineProperty去监听数组，但是需要知道Object.defineProperty是具备这个能力的。Vue2.x通过对常见的7种方法进行了重写，来实现对数组项的监听。","source":"_posts/Vue2.x的数组响应式.md","raw":"---\ntitle: Vue2.x的数组响应式\n\ntags: [数组,响应式]\n\ncategories: vue\n---\n\n#### 数组响应式的限制\n\nVue对数组响应式的处理可以分为两个方面来理解：\n\n1. 对数组项的以下7个操作方法做了重写，当数组使用下面方法改变了数组的值，Vue会派发更新通知依赖数组的watcher。\n   * push\n   *  pop\n   *  shift\n   *  unshift\n   *  splice\n   *  sort\n   *  reverse\n2. 数组项的值如果是对象，会对对象属性进行数据劫持实现响应式，完全走的就是对普通对象属性进行依赖收集，派发更新那一套流程。\n\n\n\nVue中不能检测以下数组的变动：\n\n1. 利用索引直接设置一个数组项；\n2. 修改数组的长度。\n\nVue中的数据响应式，实际上是通过对对象属性进行的数据劫持，而且无论是数组还是对象，响应式都是在初始化的时候完成的。Vue希望开发者可以提前声明所有的响应式属性，可以让响应式更可控。\n\n1. 数组项并不是一个对象的属性，在Vue中是不具有响应式的，在对这个数组项直接赋值的时候，数组值会改变，但并不会触发数组的setter方法。\n\n   ⚠️如果这个数组项的值是一个对象，那这个对象里面的属性值是响应式的。\n\n2. 修改数组的长度，数组值会改变，但并不会触发数组的setter方法。新数组中只有数组项里还存在的对象属性是响应式的。\n\n与其说Vue不能检测上面两种方式的变化，不如说Vue不想检测，尤大给的原因是性能代价和获得的用户体验收益不成正比。其实也好理解，对数据项直接赋值和修改数组的长度这两种方式都太不可控了。\n\n\n\n#### 数组响应式的实现\n\n在对数组类型的数据进行响应式处理之前，先往数组上绑定了数原型上有的一些方法和属性。这些方法和属性中有7个方法是被Vue做了重写的。因为这7个方法会改变数组本身的值，而Vue根本就没有对数组项这个维度进行响应式处理，所以不会触发数组的setter方法。\n\n为了处理这种情况，使数组在用的这7种方法改变值的时候会触发依赖更新，Vue将这几个方法做了一个重写。\n\n其中pop、shift、sort、reverse四个方法，因为没有添加数组项，所以重写的步骤很简单，就是执行方法、手动派发更新和返回方法的结果值。\n\n而push、unshift和splice方法因为添加了数据项，所以重写的步骤多了一项，简单来讲就是执行方法、将新增的数据项进行响应式处理、手动派发更新和返回方法的结果值。\n\n往目标数组中绑定这些方法和属性时，根据浏览器是否支持__proto__，分为了两种处理方法。\n\n1. 支持__proto__：调用protoAugment方法通过原型式继承的方式，将目标数组的原型指向改造后的数组的实例，这个实例中既有数组的所有属性和方法，又有重写了的7个方法，这种方式是将方法和属性绑定在目标的原型链上。\n2. 不支持__proto__：调用copyAugment方法，通过def函数，遍历改造后的数组实例，将方法和属性挂在到目标数组的属性上。\n\n\n\n#### 总结\n\n出于对性能的考虑，没有直接用Object.defineProperty去监听数组，但是需要知道Object.defineProperty是具备这个能力的。Vue2.x通过对常见的7种方法进行了重写，来实现对数组项的监听。","slug":"Vue2.x的数组响应式","published":1,"date":"2023-11-07T03:36:00.761Z","updated":"2023-11-07T03:36:00.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87w000zu17u03go1xn6","content":"<h4 id=\"数组响应式的限制\"><a href=\"#数组响应式的限制\" class=\"headerlink\" title=\"数组响应式的限制\"></a>数组响应式的限制</h4><p>Vue对数组响应式的处理可以分为两个方面来理解：</p>\n<ol>\n<li>对数组项的以下7个操作方法做了重写，当数组使用下面方法改变了数组的值，Vue会派发更新通知依赖数组的watcher。<ul>\n<li>push</li>\n<li> pop</li>\n<li> shift</li>\n<li> unshift</li>\n<li> splice</li>\n<li> sort</li>\n<li> reverse</li>\n</ul>\n</li>\n<li>数组项的值如果是对象，会对对象属性进行数据劫持实现响应式，完全走的就是对普通对象属性进行依赖收集，派发更新那一套流程。</li>\n</ol>\n<p>Vue中不能检测以下数组的变动：</p>\n<ol>\n<li>利用索引直接设置一个数组项；</li>\n<li>修改数组的长度。</li>\n</ol>\n<p>Vue中的数据响应式，实际上是通过对对象属性进行的数据劫持，而且无论是数组还是对象，响应式都是在初始化的时候完成的。Vue希望开发者可以提前声明所有的响应式属性，可以让响应式更可控。</p>\n<ol>\n<li><p>数组项并不是一个对象的属性，在Vue中是不具有响应式的，在对这个数组项直接赋值的时候，数组值会改变，但并不会触发数组的setter方法。</p>\n<p>⚠️如果这个数组项的值是一个对象，那这个对象里面的属性值是响应式的。</p>\n</li>\n<li><p>修改数组的长度，数组值会改变，但并不会触发数组的setter方法。新数组中只有数组项里还存在的对象属性是响应式的。</p>\n</li>\n</ol>\n<p>与其说Vue不能检测上面两种方式的变化，不如说Vue不想检测，尤大给的原因是性能代价和获得的用户体验收益不成正比。其实也好理解，对数据项直接赋值和修改数组的长度这两种方式都太不可控了。</p>\n<h4 id=\"数组响应式的实现\"><a href=\"#数组响应式的实现\" class=\"headerlink\" title=\"数组响应式的实现\"></a>数组响应式的实现</h4><p>在对数组类型的数据进行响应式处理之前，先往数组上绑定了数原型上有的一些方法和属性。这些方法和属性中有7个方法是被Vue做了重写的。因为这7个方法会改变数组本身的值，而Vue根本就没有对数组项这个维度进行响应式处理，所以不会触发数组的setter方法。</p>\n<p>为了处理这种情况，使数组在用的这7种方法改变值的时候会触发依赖更新，Vue将这几个方法做了一个重写。</p>\n<p>其中pop、shift、sort、reverse四个方法，因为没有添加数组项，所以重写的步骤很简单，就是执行方法、手动派发更新和返回方法的结果值。</p>\n<p>而push、unshift和splice方法因为添加了数据项，所以重写的步骤多了一项，简单来讲就是执行方法、将新增的数据项进行响应式处理、手动派发更新和返回方法的结果值。</p>\n<p>往目标数组中绑定这些方法和属性时，根据浏览器是否支持__proto__，分为了两种处理方法。</p>\n<ol>\n<li>支持__proto__：调用protoAugment方法通过原型式继承的方式，将目标数组的原型指向改造后的数组的实例，这个实例中既有数组的所有属性和方法，又有重写了的7个方法，这种方式是将方法和属性绑定在目标的原型链上。</li>\n<li>不支持__proto__：调用copyAugment方法，通过def函数，遍历改造后的数组实例，将方法和属性挂在到目标数组的属性上。</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>出于对性能的考虑，没有直接用Object.defineProperty去监听数组，但是需要知道Object.defineProperty是具备这个能力的。Vue2.x通过对常见的7种方法进行了重写，来实现对数组项的监听。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"数组响应式的限制\"><a href=\"#数组响应式的限制\" class=\"headerlink\" title=\"数组响应式的限制\"></a>数组响应式的限制</h4><p>Vue对数组响应式的处理可以分为两个方面来理解：</p>\n<ol>\n<li>对数组项的以下7个操作方法做了重写，当数组使用下面方法改变了数组的值，Vue会派发更新通知依赖数组的watcher。<ul>\n<li>push</li>\n<li> pop</li>\n<li> shift</li>\n<li> unshift</li>\n<li> splice</li>\n<li> sort</li>\n<li> reverse</li>\n</ul>\n</li>\n<li>数组项的值如果是对象，会对对象属性进行数据劫持实现响应式，完全走的就是对普通对象属性进行依赖收集，派发更新那一套流程。</li>\n</ol>\n<p>Vue中不能检测以下数组的变动：</p>\n<ol>\n<li>利用索引直接设置一个数组项；</li>\n<li>修改数组的长度。</li>\n</ol>\n<p>Vue中的数据响应式，实际上是通过对对象属性进行的数据劫持，而且无论是数组还是对象，响应式都是在初始化的时候完成的。Vue希望开发者可以提前声明所有的响应式属性，可以让响应式更可控。</p>\n<ol>\n<li><p>数组项并不是一个对象的属性，在Vue中是不具有响应式的，在对这个数组项直接赋值的时候，数组值会改变，但并不会触发数组的setter方法。</p>\n<p>⚠️如果这个数组项的值是一个对象，那这个对象里面的属性值是响应式的。</p>\n</li>\n<li><p>修改数组的长度，数组值会改变，但并不会触发数组的setter方法。新数组中只有数组项里还存在的对象属性是响应式的。</p>\n</li>\n</ol>\n<p>与其说Vue不能检测上面两种方式的变化，不如说Vue不想检测，尤大给的原因是性能代价和获得的用户体验收益不成正比。其实也好理解，对数据项直接赋值和修改数组的长度这两种方式都太不可控了。</p>\n<h4 id=\"数组响应式的实现\"><a href=\"#数组响应式的实现\" class=\"headerlink\" title=\"数组响应式的实现\"></a>数组响应式的实现</h4><p>在对数组类型的数据进行响应式处理之前，先往数组上绑定了数原型上有的一些方法和属性。这些方法和属性中有7个方法是被Vue做了重写的。因为这7个方法会改变数组本身的值，而Vue根本就没有对数组项这个维度进行响应式处理，所以不会触发数组的setter方法。</p>\n<p>为了处理这种情况，使数组在用的这7种方法改变值的时候会触发依赖更新，Vue将这几个方法做了一个重写。</p>\n<p>其中pop、shift、sort、reverse四个方法，因为没有添加数组项，所以重写的步骤很简单，就是执行方法、手动派发更新和返回方法的结果值。</p>\n<p>而push、unshift和splice方法因为添加了数据项，所以重写的步骤多了一项，简单来讲就是执行方法、将新增的数据项进行响应式处理、手动派发更新和返回方法的结果值。</p>\n<p>往目标数组中绑定这些方法和属性时，根据浏览器是否支持__proto__，分为了两种处理方法。</p>\n<ol>\n<li>支持__proto__：调用protoAugment方法通过原型式继承的方式，将目标数组的原型指向改造后的数组的实例，这个实例中既有数组的所有属性和方法，又有重写了的7个方法，这种方式是将方法和属性绑定在目标的原型链上。</li>\n<li>不支持__proto__：调用copyAugment方法，通过def函数，遍历改造后的数组实例，将方法和属性挂在到目标数组的属性上。</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>出于对性能的考虑，没有直接用Object.defineProperty去监听数组，但是需要知道Object.defineProperty是具备这个能力的。Vue2.x通过对常见的7种方法进行了重写，来实现对数组项的监听。</p>\n"},{"title":"Vue2.x的派发更新","_content":"\n#### 基本概念\n\n响应式数据改变之后，执行对数据有依赖的watcher，这个过程称为派发更新。\n\n\n\n#### 更新过程\n\n响应式数据改变的时候，会执行数据的set方法。在set方法里面主要做了3件事：\n\n1. 更新数据的值；\n2. 调用observe方法处理新值，如果是对象或者VNode类型，则进行数据劫持；\n3. 调用dep.notify方法，开始派发更新。\n\n\n\ndep.notify方法中将数据依赖的watcher按创建顺序排序，遍历执行watcher实例的update方法。这里有3种情况（注意是if - else if - else）：\n\n1. computed watcher，只需要把watcher实例的dirty属性值设置为true。\n\n2. 同步的watcher，就直接执行watcher实例的run方法；\n\n3. 执行queueWatcher方法。\n\n\n\n第一种情况computed watcher在派发更新里做的事情比较简单，因为只是一个取值操作，并没有复杂回调。\n\n第二种情况也比较简单，后面会具体聊到run方法。\n\n这里重点了解一下第三种情况，因为一般数据更新都是这个情况。在queueWatcher方法中，主要做的事情有两个：\n\n1. 根据watcher实例的id从小到大顺序，往待执行的watcher队列里插入当前watcher，使用has对象保证同一个watcher只添加一次；\n2. 使用nextTick异步执行flushSchedulerQueue方法，通过waiting保证在一次派发更新过程中对nextTick方法只执行一次。\n\n\n\nflushSchedulerQueue主要做的3个事情：\n\n1. 对队列做了从⼩到⼤的排序，确保组件的更新由父到子，user watcher要优先于render watcher，computed watcher不会到这个队列来。\n\n2. 遍历队列依次执行watcher的run方法；\n\n3. 执行resetSchedulerState方法，将控制流程状态的变量恢复到初始状态，清空队列，这就完成了一次派发更新。\n\n   \n\nrun方法里先执行了watcher实例的get方法，得到当前的值，并重新进行依赖收集。如果满足新值和旧值不等、新值是对象类型、deep模式任何一个条件，执行watcher的回调。\n\n\n\n这里需要注意的是，render watcher 和 computed watcher都执行不到这个回调。render watcher 执行完get方法，重新收集依赖并更新视图之后，因为没有返回值满足不了判断条件，所以就结束了。computed watcher只是在需要获取计算属性的时候会执行一下getter方法，获取到最新值并收集依赖就结束了，都不会执行到判断条件这里来。\n\n\n\n#### 总结\n\n响应式数据变化的时候，并不会马上就去执行对数据有依赖的watcher，而是会将user watcher和render watcher放入到一个watcher队列里面，computed watcher会在程序需要读取计算属性的时候执行。当同步任务执行完，按照浏览器的事件循环机制，执行到这个nextTick里的回调函数的时候，就开始执行watcher队列。\n\n","source":"_posts/Vue2.x的派发更新.md","raw":"---\ntitle: Vue2.x的派发更新\n\ntags: [派发更新]\n\ncategories: vue\n---\n\n#### 基本概念\n\n响应式数据改变之后，执行对数据有依赖的watcher，这个过程称为派发更新。\n\n\n\n#### 更新过程\n\n响应式数据改变的时候，会执行数据的set方法。在set方法里面主要做了3件事：\n\n1. 更新数据的值；\n2. 调用observe方法处理新值，如果是对象或者VNode类型，则进行数据劫持；\n3. 调用dep.notify方法，开始派发更新。\n\n\n\ndep.notify方法中将数据依赖的watcher按创建顺序排序，遍历执行watcher实例的update方法。这里有3种情况（注意是if - else if - else）：\n\n1. computed watcher，只需要把watcher实例的dirty属性值设置为true。\n\n2. 同步的watcher，就直接执行watcher实例的run方法；\n\n3. 执行queueWatcher方法。\n\n\n\n第一种情况computed watcher在派发更新里做的事情比较简单，因为只是一个取值操作，并没有复杂回调。\n\n第二种情况也比较简单，后面会具体聊到run方法。\n\n这里重点了解一下第三种情况，因为一般数据更新都是这个情况。在queueWatcher方法中，主要做的事情有两个：\n\n1. 根据watcher实例的id从小到大顺序，往待执行的watcher队列里插入当前watcher，使用has对象保证同一个watcher只添加一次；\n2. 使用nextTick异步执行flushSchedulerQueue方法，通过waiting保证在一次派发更新过程中对nextTick方法只执行一次。\n\n\n\nflushSchedulerQueue主要做的3个事情：\n\n1. 对队列做了从⼩到⼤的排序，确保组件的更新由父到子，user watcher要优先于render watcher，computed watcher不会到这个队列来。\n\n2. 遍历队列依次执行watcher的run方法；\n\n3. 执行resetSchedulerState方法，将控制流程状态的变量恢复到初始状态，清空队列，这就完成了一次派发更新。\n\n   \n\nrun方法里先执行了watcher实例的get方法，得到当前的值，并重新进行依赖收集。如果满足新值和旧值不等、新值是对象类型、deep模式任何一个条件，执行watcher的回调。\n\n\n\n这里需要注意的是，render watcher 和 computed watcher都执行不到这个回调。render watcher 执行完get方法，重新收集依赖并更新视图之后，因为没有返回值满足不了判断条件，所以就结束了。computed watcher只是在需要获取计算属性的时候会执行一下getter方法，获取到最新值并收集依赖就结束了，都不会执行到判断条件这里来。\n\n\n\n#### 总结\n\n响应式数据变化的时候，并不会马上就去执行对数据有依赖的watcher，而是会将user watcher和render watcher放入到一个watcher队列里面，computed watcher会在程序需要读取计算属性的时候执行。当同步任务执行完，按照浏览器的事件循环机制，执行到这个nextTick里的回调函数的时候，就开始执行watcher队列。\n\n","slug":"Vue2.x的派发更新","published":1,"date":"2023-11-07T03:36:00.762Z","updated":"2023-11-07T03:36:00.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87x0012u17u1i7z6a68","content":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>响应式数据改变之后，执行对数据有依赖的watcher，这个过程称为派发更新。</p>\n<h4 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h4><p>响应式数据改变的时候，会执行数据的set方法。在set方法里面主要做了3件事：</p>\n<ol>\n<li>更新数据的值；</li>\n<li>调用observe方法处理新值，如果是对象或者VNode类型，则进行数据劫持；</li>\n<li>调用dep.notify方法，开始派发更新。</li>\n</ol>\n<p>dep.notify方法中将数据依赖的watcher按创建顺序排序，遍历执行watcher实例的update方法。这里有3种情况（注意是if - else if - else）：</p>\n<ol>\n<li><p>computed watcher，只需要把watcher实例的dirty属性值设置为true。</p>\n</li>\n<li><p>同步的watcher，就直接执行watcher实例的run方法；</p>\n</li>\n<li><p>执行queueWatcher方法。</p>\n</li>\n</ol>\n<p>第一种情况computed watcher在派发更新里做的事情比较简单，因为只是一个取值操作，并没有复杂回调。</p>\n<p>第二种情况也比较简单，后面会具体聊到run方法。</p>\n<p>这里重点了解一下第三种情况，因为一般数据更新都是这个情况。在queueWatcher方法中，主要做的事情有两个：</p>\n<ol>\n<li>根据watcher实例的id从小到大顺序，往待执行的watcher队列里插入当前watcher，使用has对象保证同一个watcher只添加一次；</li>\n<li>使用nextTick异步执行flushSchedulerQueue方法，通过waiting保证在一次派发更新过程中对nextTick方法只执行一次。</li>\n</ol>\n<p>flushSchedulerQueue主要做的3个事情：</p>\n<ol>\n<li><p>对队列做了从⼩到⼤的排序，确保组件的更新由父到子，user watcher要优先于render watcher，computed watcher不会到这个队列来。</p>\n</li>\n<li><p>遍历队列依次执行watcher的run方法；</p>\n</li>\n<li><p>执行resetSchedulerState方法，将控制流程状态的变量恢复到初始状态，清空队列，这就完成了一次派发更新。</p>\n</li>\n</ol>\n<p>run方法里先执行了watcher实例的get方法，得到当前的值，并重新进行依赖收集。如果满足新值和旧值不等、新值是对象类型、deep模式任何一个条件，执行watcher的回调。</p>\n<p>这里需要注意的是，render watcher 和 computed watcher都执行不到这个回调。render watcher 执行完get方法，重新收集依赖并更新视图之后，因为没有返回值满足不了判断条件，所以就结束了。computed watcher只是在需要获取计算属性的时候会执行一下getter方法，获取到最新值并收集依赖就结束了，都不会执行到判断条件这里来。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>响应式数据变化的时候，并不会马上就去执行对数据有依赖的watcher，而是会将user watcher和render watcher放入到一个watcher队列里面，computed watcher会在程序需要读取计算属性的时候执行。当同步任务执行完，按照浏览器的事件循环机制，执行到这个nextTick里的回调函数的时候，就开始执行watcher队列。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>响应式数据改变之后，执行对数据有依赖的watcher，这个过程称为派发更新。</p>\n<h4 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h4><p>响应式数据改变的时候，会执行数据的set方法。在set方法里面主要做了3件事：</p>\n<ol>\n<li>更新数据的值；</li>\n<li>调用observe方法处理新值，如果是对象或者VNode类型，则进行数据劫持；</li>\n<li>调用dep.notify方法，开始派发更新。</li>\n</ol>\n<p>dep.notify方法中将数据依赖的watcher按创建顺序排序，遍历执行watcher实例的update方法。这里有3种情况（注意是if - else if - else）：</p>\n<ol>\n<li><p>computed watcher，只需要把watcher实例的dirty属性值设置为true。</p>\n</li>\n<li><p>同步的watcher，就直接执行watcher实例的run方法；</p>\n</li>\n<li><p>执行queueWatcher方法。</p>\n</li>\n</ol>\n<p>第一种情况computed watcher在派发更新里做的事情比较简单，因为只是一个取值操作，并没有复杂回调。</p>\n<p>第二种情况也比较简单，后面会具体聊到run方法。</p>\n<p>这里重点了解一下第三种情况，因为一般数据更新都是这个情况。在queueWatcher方法中，主要做的事情有两个：</p>\n<ol>\n<li>根据watcher实例的id从小到大顺序，往待执行的watcher队列里插入当前watcher，使用has对象保证同一个watcher只添加一次；</li>\n<li>使用nextTick异步执行flushSchedulerQueue方法，通过waiting保证在一次派发更新过程中对nextTick方法只执行一次。</li>\n</ol>\n<p>flushSchedulerQueue主要做的3个事情：</p>\n<ol>\n<li><p>对队列做了从⼩到⼤的排序，确保组件的更新由父到子，user watcher要优先于render watcher，computed watcher不会到这个队列来。</p>\n</li>\n<li><p>遍历队列依次执行watcher的run方法；</p>\n</li>\n<li><p>执行resetSchedulerState方法，将控制流程状态的变量恢复到初始状态，清空队列，这就完成了一次派发更新。</p>\n</li>\n</ol>\n<p>run方法里先执行了watcher实例的get方法，得到当前的值，并重新进行依赖收集。如果满足新值和旧值不等、新值是对象类型、deep模式任何一个条件，执行watcher的回调。</p>\n<p>这里需要注意的是，render watcher 和 computed watcher都执行不到这个回调。render watcher 执行完get方法，重新收集依赖并更新视图之后，因为没有返回值满足不了判断条件，所以就结束了。computed watcher只是在需要获取计算属性的时候会执行一下getter方法，获取到最新值并收集依赖就结束了，都不会执行到判断条件这里来。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>响应式数据变化的时候，并不会马上就去执行对数据有依赖的watcher，而是会将user watcher和render watcher放入到一个watcher队列里面，computed watcher会在程序需要读取计算属性的时候执行。当同步任务执行完，按照浏览器的事件循环机制，执行到这个nextTick里的回调函数的时候，就开始执行watcher队列。</p>\n"},{"title":"Vue2.x的渲染过程","_content":"new Vue 之后执行一系列的初始化操作，如合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化inject、props、method、data、computed、watch、privide等等。\n\n初始化完成之后，对Vue实例进行挂载。挂载时会判断是否有render函数，如果是el和template转换成render方法，执行render方法会生成VNode tree，也就是VDOM。\n\n最后再调用patch方法，将VNode渲染成DOM并完成挂载，实际上整个渲染过程调用的就是原生的DOM API。","source":"_posts/Vue2.x的渲染过程.md","raw":"---\ntitle: Vue2.x的渲染过程\n\ntags: [渲染]\n\ncategories: vue\n---\nnew Vue 之后执行一系列的初始化操作，如合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化inject、props、method、data、computed、watch、privide等等。\n\n初始化完成之后，对Vue实例进行挂载。挂载时会判断是否有render函数，如果是el和template转换成render方法，执行render方法会生成VNode tree，也就是VDOM。\n\n最后再调用patch方法，将VNode渲染成DOM并完成挂载，实际上整个渲染过程调用的就是原生的DOM API。","slug":"Vue2.x的渲染过程","published":1,"date":"2023-11-07T03:36:00.762Z","updated":"2023-11-07T03:36:00.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87y0015u17u39x6fj4i","content":"<p>new Vue 之后执行一系列的初始化操作，如合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化inject、props、method、data、computed、watch、privide等等。</p>\n<p>初始化完成之后，对Vue实例进行挂载。挂载时会判断是否有render函数，如果是el和template转换成render方法，执行render方法会生成VNode tree，也就是VDOM。</p>\n<p>最后再调用patch方法，将VNode渲染成DOM并完成挂载，实际上整个渲染过程调用的就是原生的DOM API。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>new Vue 之后执行一系列的初始化操作，如合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化inject、props、method、data、computed、watch、privide等等。</p>\n<p>初始化完成之后，对Vue实例进行挂载。挂载时会判断是否有render函数，如果是el和template转换成render方法，执行render方法会生成VNode tree，也就是VDOM。</p>\n<p>最后再调用patch方法，将VNode渲染成DOM并完成挂载，实际上整个渲染过程调用的就是原生的DOM API。</p>\n"},{"title":"Vue2.x的组件通信","_content":"\n#### 父->子\n\n##### 方式\n\n父组件通过属性的方式给子组件传值，子组件通过props来接受父组件的值。\n\n##### 注意\n\n1. 如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新，可以用watch深拷贝deep:true监听到变化；\n\n2. 如果你传进来的是个对象，同时你又需要在子组件中操作传进来的这个数据，那么在父组件中的这个数据也会改变，因为传递的只是个引用，可通过将对象做深拷贝创建一个副本解决这个问题。\n\n##### 可以但不建议的操作\n\n1. 直接用ref调用子组件函数直接把数据以参数的形式传给子组件；\n\n2. $children是一个数组，是直接儿子的集合，不保证顺序，也不是响应式。\n\n\n\n#### 子->父\n\n##### 方式\n\n子组件通过$emit的操作触发父组件的自定义事件，父组件中监听这个事件并在回调中写相关逻辑。\n\n##### 可以但不建议的操作\n\n1. 可以在子组件中定义一种专供父组件调用的函数，当父组件想要获取子组件数据就直接主动调用ref执行这个函数获取数据；\n\n2. $parent是当前组件树的根 Vue 实例，如果当前实例没有父实例，此实例将会是其自己。\n\n\n\n#### 兄->弟\n\n##### 方式\n\n1. 路由URL参数：把需要跨页面传递的数据放到url后面，跳转到另外页面时获取url字符串获取想要的参数即可。局限性：只适合传递比较小的数据。\n\n2. EventBus：在组件之外定义一个event-bus.js作为组件间通信的桥梁，也可称之为事件总线。EventBus实现了发布订阅模式，往事件总线里订阅事件用的是on，发布事件用的是emit。\n\n```\n// event-bus.js\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n```\n\n\n\n#### 祖先->后代\n\n##### 方式\n\n1. provide/inject，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。\n\n2. $attrs：在子组件中添加v-bind='$​attrs'，就把父组件传来的子组件没props接收的数据全部传到孙组件，子组件和孙组件都可以用this.$attrs获取。\n\n##### 注意\n\nprovide 和 inject 绑定并不是可响应的。如果数据类型是对象Object，其对象的属性还是可响应的，因为对象格式数据存储的是指针而不是数据，操作的是同一个对象。\n\n\n\n#### 通用\n\n##### 方式\n\n1.Vuex集中状态管理：类似与一个共享数据仓库，所有的组件都可以去操作；\n\n2.localStorage，sessionStorage，cooikes之类的存在本地也能做到组件间的通信。\n\n","source":"_posts/Vue2.x的组件通信.md","raw":"---\ntitle: Vue2.x的组件通信\n\ntags: [组件通信]\n\ncategories: vue\n---\n\n#### 父->子\n\n##### 方式\n\n父组件通过属性的方式给子组件传值，子组件通过props来接受父组件的值。\n\n##### 注意\n\n1. 如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新，可以用watch深拷贝deep:true监听到变化；\n\n2. 如果你传进来的是个对象，同时你又需要在子组件中操作传进来的这个数据，那么在父组件中的这个数据也会改变，因为传递的只是个引用，可通过将对象做深拷贝创建一个副本解决这个问题。\n\n##### 可以但不建议的操作\n\n1. 直接用ref调用子组件函数直接把数据以参数的形式传给子组件；\n\n2. $children是一个数组，是直接儿子的集合，不保证顺序，也不是响应式。\n\n\n\n#### 子->父\n\n##### 方式\n\n子组件通过$emit的操作触发父组件的自定义事件，父组件中监听这个事件并在回调中写相关逻辑。\n\n##### 可以但不建议的操作\n\n1. 可以在子组件中定义一种专供父组件调用的函数，当父组件想要获取子组件数据就直接主动调用ref执行这个函数获取数据；\n\n2. $parent是当前组件树的根 Vue 实例，如果当前实例没有父实例，此实例将会是其自己。\n\n\n\n#### 兄->弟\n\n##### 方式\n\n1. 路由URL参数：把需要跨页面传递的数据放到url后面，跳转到另外页面时获取url字符串获取想要的参数即可。局限性：只适合传递比较小的数据。\n\n2. EventBus：在组件之外定义一个event-bus.js作为组件间通信的桥梁，也可称之为事件总线。EventBus实现了发布订阅模式，往事件总线里订阅事件用的是on，发布事件用的是emit。\n\n```\n// event-bus.js\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n```\n\n\n\n#### 祖先->后代\n\n##### 方式\n\n1. provide/inject，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。\n\n2. $attrs：在子组件中添加v-bind='$​attrs'，就把父组件传来的子组件没props接收的数据全部传到孙组件，子组件和孙组件都可以用this.$attrs获取。\n\n##### 注意\n\nprovide 和 inject 绑定并不是可响应的。如果数据类型是对象Object，其对象的属性还是可响应的，因为对象格式数据存储的是指针而不是数据，操作的是同一个对象。\n\n\n\n#### 通用\n\n##### 方式\n\n1.Vuex集中状态管理：类似与一个共享数据仓库，所有的组件都可以去操作；\n\n2.localStorage，sessionStorage，cooikes之类的存在本地也能做到组件间的通信。\n\n","slug":"Vue2.x的组件通信","published":1,"date":"2023-11-07T03:36:00.762Z","updated":"2023-11-07T03:36:00.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz87z0017u17u80og4rim","content":"<h4 id=\"父-gt-子\"><a href=\"#父-gt-子\" class=\"headerlink\" title=\"父-&gt;子\"></a>父-&gt;子</h4><h5 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>父组件通过属性的方式给子组件传值，子组件通过props来接受父组件的值。</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ol>\n<li><p>如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新，可以用watch深拷贝deep:true监听到变化；</p>\n</li>\n<li><p>如果你传进来的是个对象，同时你又需要在子组件中操作传进来的这个数据，那么在父组件中的这个数据也会改变，因为传递的只是个引用，可通过将对象做深拷贝创建一个副本解决这个问题。</p>\n</li>\n</ol>\n<h5 id=\"可以但不建议的操作\"><a href=\"#可以但不建议的操作\" class=\"headerlink\" title=\"可以但不建议的操作\"></a>可以但不建议的操作</h5><ol>\n<li><p>直接用ref调用子组件函数直接把数据以参数的形式传给子组件；</p>\n</li>\n<li><p>$children是一个数组，是直接儿子的集合，不保证顺序，也不是响应式。</p>\n</li>\n</ol>\n<h4 id=\"子-gt-父\"><a href=\"#子-gt-父\" class=\"headerlink\" title=\"子-&gt;父\"></a>子-&gt;父</h4><h5 id=\"方式-1\"><a href=\"#方式-1\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>子组件通过$emit的操作触发父组件的自定义事件，父组件中监听这个事件并在回调中写相关逻辑。</p>\n<h5 id=\"可以但不建议的操作-1\"><a href=\"#可以但不建议的操作-1\" class=\"headerlink\" title=\"可以但不建议的操作\"></a>可以但不建议的操作</h5><ol>\n<li><p>可以在子组件中定义一种专供父组件调用的函数，当父组件想要获取子组件数据就直接主动调用ref执行这个函数获取数据；</p>\n</li>\n<li><p>$parent是当前组件树的根 Vue 实例，如果当前实例没有父实例，此实例将会是其自己。</p>\n</li>\n</ol>\n<h4 id=\"兄-gt-弟\"><a href=\"#兄-gt-弟\" class=\"headerlink\" title=\"兄-&gt;弟\"></a>兄-&gt;弟</h4><h5 id=\"方式-2\"><a href=\"#方式-2\" class=\"headerlink\" title=\"方式\"></a>方式</h5><ol>\n<li><p>路由URL参数：把需要跨页面传递的数据放到url后面，跳转到另外页面时获取url字符串获取想要的参数即可。局限性：只适合传递比较小的数据。</p>\n</li>\n<li><p>EventBus：在组件之外定义一个event-bus.js作为组件间通信的桥梁，也可称之为事件总线。EventBus实现了发布订阅模式，往事件总线里订阅事件用的是on，发布事件用的是emit。</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// event-bus.js</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">export const EventBus = new Vue()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"祖先-gt-后代\"><a href=\"#祖先-gt-后代\" class=\"headerlink\" title=\"祖先-&gt;后代\"></a>祖先-&gt;后代</h4><h5 id=\"方式-3\"><a href=\"#方式-3\" class=\"headerlink\" title=\"方式\"></a>方式</h5><ol>\n<li><p>provide/inject，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p>\n</li>\n<li><p>$attrs：在子组件中添加v-bind=’$​attrs’，就把父组件传来的子组件没props接收的数据全部传到孙组件，子组件和孙组件都可以用this.$attrs获取。</p>\n</li>\n</ol>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>provide 和 inject 绑定并不是可响应的。如果数据类型是对象Object，其对象的属性还是可响应的，因为对象格式数据存储的是指针而不是数据，操作的是同一个对象。</p>\n<h4 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h4><h5 id=\"方式-4\"><a href=\"#方式-4\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>1.Vuex集中状态管理：类似与一个共享数据仓库，所有的组件都可以去操作；</p>\n<p>2.localStorage，sessionStorage，cooikes之类的存在本地也能做到组件间的通信。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"父-gt-子\"><a href=\"#父-gt-子\" class=\"headerlink\" title=\"父-&gt;子\"></a>父-&gt;子</h4><h5 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>父组件通过属性的方式给子组件传值，子组件通过props来接受父组件的值。</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ol>\n<li><p>如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新，可以用watch深拷贝deep:true监听到变化；</p>\n</li>\n<li><p>如果你传进来的是个对象，同时你又需要在子组件中操作传进来的这个数据，那么在父组件中的这个数据也会改变，因为传递的只是个引用，可通过将对象做深拷贝创建一个副本解决这个问题。</p>\n</li>\n</ol>\n<h5 id=\"可以但不建议的操作\"><a href=\"#可以但不建议的操作\" class=\"headerlink\" title=\"可以但不建议的操作\"></a>可以但不建议的操作</h5><ol>\n<li><p>直接用ref调用子组件函数直接把数据以参数的形式传给子组件；</p>\n</li>\n<li><p>$children是一个数组，是直接儿子的集合，不保证顺序，也不是响应式。</p>\n</li>\n</ol>\n<h4 id=\"子-gt-父\"><a href=\"#子-gt-父\" class=\"headerlink\" title=\"子-&gt;父\"></a>子-&gt;父</h4><h5 id=\"方式-1\"><a href=\"#方式-1\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>子组件通过$emit的操作触发父组件的自定义事件，父组件中监听这个事件并在回调中写相关逻辑。</p>\n<h5 id=\"可以但不建议的操作-1\"><a href=\"#可以但不建议的操作-1\" class=\"headerlink\" title=\"可以但不建议的操作\"></a>可以但不建议的操作</h5><ol>\n<li><p>可以在子组件中定义一种专供父组件调用的函数，当父组件想要获取子组件数据就直接主动调用ref执行这个函数获取数据；</p>\n</li>\n<li><p>$parent是当前组件树的根 Vue 实例，如果当前实例没有父实例，此实例将会是其自己。</p>\n</li>\n</ol>\n<h4 id=\"兄-gt-弟\"><a href=\"#兄-gt-弟\" class=\"headerlink\" title=\"兄-&gt;弟\"></a>兄-&gt;弟</h4><h5 id=\"方式-2\"><a href=\"#方式-2\" class=\"headerlink\" title=\"方式\"></a>方式</h5><ol>\n<li><p>路由URL参数：把需要跨页面传递的数据放到url后面，跳转到另外页面时获取url字符串获取想要的参数即可。局限性：只适合传递比较小的数据。</p>\n</li>\n<li><p>EventBus：在组件之外定义一个event-bus.js作为组件间通信的桥梁，也可称之为事件总线。EventBus实现了发布订阅模式，往事件总线里订阅事件用的是on，发布事件用的是emit。</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// event-bus.js</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">export const EventBus = new Vue()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"祖先-gt-后代\"><a href=\"#祖先-gt-后代\" class=\"headerlink\" title=\"祖先-&gt;后代\"></a>祖先-&gt;后代</h4><h5 id=\"方式-3\"><a href=\"#方式-3\" class=\"headerlink\" title=\"方式\"></a>方式</h5><ol>\n<li><p>provide/inject，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p>\n</li>\n<li><p>$attrs：在子组件中添加v-bind=’$​attrs’，就把父组件传来的子组件没props接收的数据全部传到孙组件，子组件和孙组件都可以用this.$attrs获取。</p>\n</li>\n</ol>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>provide 和 inject 绑定并不是可响应的。如果数据类型是对象Object，其对象的属性还是可响应的，因为对象格式数据存储的是指针而不是数据，操作的是同一个对象。</p>\n<h4 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h4><h5 id=\"方式-4\"><a href=\"#方式-4\" class=\"headerlink\" title=\"方式\"></a>方式</h5><p>1.Vuex集中状态管理：类似与一个共享数据仓库，所有的组件都可以去操作；</p>\n<p>2.localStorage，sessionStorage，cooikes之类的存在本地也能做到组件间的通信。</p>\n"},{"title":"Vue2.x的编译过程","_content":"\n#### 编译过程\n\n主要三个步骤：parse -> optimize -> codegen。\n\n将模版template经过上面三个步骤，编译成render函数。\n\n\n\n#### parse\n\nparse方法对模版做解析生成AST抽象语法树，AST是源代码抽象语法结构的树状表示，可以简单理解为是将源代码按照一定规则转换成一种树状结构。\n\n解析HTML模版的时候，使用正则做各种匹配，如注释节点、文档类型节点、开始标签、结束标签等，对于不同情况进行不同的处理，直到整个template被解析完成。\n\n在处理标签的时候为每一个标签创建了一个AST元素，建立起父子关系生成AST树。AST元素节点一共有3种类型，type为1表示是普通类型，为2表示表达式，为3表示纯文本。\n\n⚠️ 在parse过程中，还完成了对指令的解析。\n\n\n\n#### optimize\n\noptimize做的事情就是优化AST树。\n\n由于Vue是响应式的，但是模板中并不是所有的数据都是响应式的，很多数据是首次渲染后就永远不会变化，可以在编译阶段将一些AST节点优化成静态节点，可以在数据更新patch的时候跳过这些节点的比对，提高渲染速度。\n\n整个optimize过程中就干了两件事情：\n\n1. 标记静态节点\n2. 标记静态根 \n\n\n\n#### codegen\n\n优化后的AST抽象语法树通过generate函数生成render函数字符串。在compileToFunctions中，会将这个render函数字符串转换成函数。","source":"_posts/Vue2.x的编译过程.md","raw":"---\ntitle: Vue2.x的编译过程\n\ntags: [编译]\n\ncategories: vue\n---\n\n#### 编译过程\n\n主要三个步骤：parse -> optimize -> codegen。\n\n将模版template经过上面三个步骤，编译成render函数。\n\n\n\n#### parse\n\nparse方法对模版做解析生成AST抽象语法树，AST是源代码抽象语法结构的树状表示，可以简单理解为是将源代码按照一定规则转换成一种树状结构。\n\n解析HTML模版的时候，使用正则做各种匹配，如注释节点、文档类型节点、开始标签、结束标签等，对于不同情况进行不同的处理，直到整个template被解析完成。\n\n在处理标签的时候为每一个标签创建了一个AST元素，建立起父子关系生成AST树。AST元素节点一共有3种类型，type为1表示是普通类型，为2表示表达式，为3表示纯文本。\n\n⚠️ 在parse过程中，还完成了对指令的解析。\n\n\n\n#### optimize\n\noptimize做的事情就是优化AST树。\n\n由于Vue是响应式的，但是模板中并不是所有的数据都是响应式的，很多数据是首次渲染后就永远不会变化，可以在编译阶段将一些AST节点优化成静态节点，可以在数据更新patch的时候跳过这些节点的比对，提高渲染速度。\n\n整个optimize过程中就干了两件事情：\n\n1. 标记静态节点\n2. 标记静态根 \n\n\n\n#### codegen\n\n优化后的AST抽象语法树通过generate函数生成render函数字符串。在compileToFunctions中，会将这个render函数字符串转换成函数。","slug":"Vue2.x的编译过程","published":1,"date":"2023-11-07T03:36:00.762Z","updated":"2023-11-07T03:36:00.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz880001bu17ubb3o93ue","content":"<h4 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h4><p>主要三个步骤：parse -&gt; optimize -&gt; codegen。</p>\n<p>将模版template经过上面三个步骤，编译成render函数。</p>\n<h4 id=\"parse\"><a href=\"#parse\" class=\"headerlink\" title=\"parse\"></a>parse</h4><p>parse方法对模版做解析生成AST抽象语法树，AST是源代码抽象语法结构的树状表示，可以简单理解为是将源代码按照一定规则转换成一种树状结构。</p>\n<p>解析HTML模版的时候，使用正则做各种匹配，如注释节点、文档类型节点、开始标签、结束标签等，对于不同情况进行不同的处理，直到整个template被解析完成。</p>\n<p>在处理标签的时候为每一个标签创建了一个AST元素，建立起父子关系生成AST树。AST元素节点一共有3种类型，type为1表示是普通类型，为2表示表达式，为3表示纯文本。</p>\n<p>⚠️ 在parse过程中，还完成了对指令的解析。</p>\n<h4 id=\"optimize\"><a href=\"#optimize\" class=\"headerlink\" title=\"optimize\"></a>optimize</h4><p>optimize做的事情就是优化AST树。</p>\n<p>由于Vue是响应式的，但是模板中并不是所有的数据都是响应式的，很多数据是首次渲染后就永远不会变化，可以在编译阶段将一些AST节点优化成静态节点，可以在数据更新patch的时候跳过这些节点的比对，提高渲染速度。</p>\n<p>整个optimize过程中就干了两件事情：</p>\n<ol>\n<li>标记静态节点</li>\n<li>标记静态根 </li>\n</ol>\n<h4 id=\"codegen\"><a href=\"#codegen\" class=\"headerlink\" title=\"codegen\"></a>codegen</h4><p>优化后的AST抽象语法树通过generate函数生成render函数字符串。在compileToFunctions中，会将这个render函数字符串转换成函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h4><p>主要三个步骤：parse -&gt; optimize -&gt; codegen。</p>\n<p>将模版template经过上面三个步骤，编译成render函数。</p>\n<h4 id=\"parse\"><a href=\"#parse\" class=\"headerlink\" title=\"parse\"></a>parse</h4><p>parse方法对模版做解析生成AST抽象语法树，AST是源代码抽象语法结构的树状表示，可以简单理解为是将源代码按照一定规则转换成一种树状结构。</p>\n<p>解析HTML模版的时候，使用正则做各种匹配，如注释节点、文档类型节点、开始标签、结束标签等，对于不同情况进行不同的处理，直到整个template被解析完成。</p>\n<p>在处理标签的时候为每一个标签创建了一个AST元素，建立起父子关系生成AST树。AST元素节点一共有3种类型，type为1表示是普通类型，为2表示表达式，为3表示纯文本。</p>\n<p>⚠️ 在parse过程中，还完成了对指令的解析。</p>\n<h4 id=\"optimize\"><a href=\"#optimize\" class=\"headerlink\" title=\"optimize\"></a>optimize</h4><p>optimize做的事情就是优化AST树。</p>\n<p>由于Vue是响应式的，但是模板中并不是所有的数据都是响应式的，很多数据是首次渲染后就永远不会变化，可以在编译阶段将一些AST节点优化成静态节点，可以在数据更新patch的时候跳过这些节点的比对，提高渲染速度。</p>\n<p>整个optimize过程中就干了两件事情：</p>\n<ol>\n<li>标记静态节点</li>\n<li>标记静态根 </li>\n</ol>\n<h4 id=\"codegen\"><a href=\"#codegen\" class=\"headerlink\" title=\"codegen\"></a>codegen</h4><p>优化后的AST抽象语法树通过generate函数生成render函数字符串。在compileToFunctions中，会将这个render函数字符串转换成函数。</p>\n"},{"title":"typeof和instanceof区别","date":"2021-08-04T16:00:00.000Z","_content":"\ntypeof和instanceof都是用来判断变量类型的，两者的区别在于：\n\n- typeof判断所有变量的类型，返回值有number，boolean，string，function，object，undefined。（这里需要注意一下，js中基本数据类型常用的有六种，其中简单一点的有五个：String、Number、Boolean、Undefined、Null，一个复杂的数据类型：Object。ES6中新增了一个Symbol用于生成唯一标识符，ES10中新增了BigInt可以表示任意大的整数）。\n- typeof对于丰富的对象实例，只能返回\"object\"字符串。\n\n- instanceof用来判断对象，代码形式为obj1 instanceof obj2（obj1是否是obj2的实例），obj2必须为对象，否则会报错！其返回值为布尔值。\n\n\n\n语法： object instanceof constructor\n\nobject（要检测的对象），constructor（某个构造函数），instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。\n\n\n\n简而言之，A instanceof B ， 是判断对象实例A是否是构造函数B的实例。更准确一点的说法是，构造函数B的原型，是否存在与对象实例A的原型链上。\n\n","source":"_posts/typeof和instanceof区别.md","raw":"---\ntitle: typeof和instanceof区别\n\ndate: 2021-08-05\n\ntags: [typeof,instanceof]\n\ncategories: javascript\n---\n\ntypeof和instanceof都是用来判断变量类型的，两者的区别在于：\n\n- typeof判断所有变量的类型，返回值有number，boolean，string，function，object，undefined。（这里需要注意一下，js中基本数据类型常用的有六种，其中简单一点的有五个：String、Number、Boolean、Undefined、Null，一个复杂的数据类型：Object。ES6中新增了一个Symbol用于生成唯一标识符，ES10中新增了BigInt可以表示任意大的整数）。\n- typeof对于丰富的对象实例，只能返回\"object\"字符串。\n\n- instanceof用来判断对象，代码形式为obj1 instanceof obj2（obj1是否是obj2的实例），obj2必须为对象，否则会报错！其返回值为布尔值。\n\n\n\n语法： object instanceof constructor\n\nobject（要检测的对象），constructor（某个构造函数），instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。\n\n\n\n简而言之，A instanceof B ， 是判断对象实例A是否是构造函数B的实例。更准确一点的说法是，构造函数B的原型，是否存在与对象实例A的原型链上。\n\n","slug":"typeof和instanceof区别","published":1,"updated":"2023-11-07T03:36:00.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz881001eu17uan6oanmz","content":"<p>typeof和instanceof都是用来判断变量类型的，两者的区别在于：</p>\n<ul>\n<li><p>typeof判断所有变量的类型，返回值有number，boolean，string，function，object，undefined。（这里需要注意一下，js中基本数据类型常用的有六种，其中简单一点的有五个：String、Number、Boolean、Undefined、Null，一个复杂的数据类型：Object。ES6中新增了一个Symbol用于生成唯一标识符，ES10中新增了BigInt可以表示任意大的整数）。</p>\n</li>\n<li><p>typeof对于丰富的对象实例，只能返回”object”字符串。</p>\n</li>\n<li><p>instanceof用来判断对象，代码形式为obj1 instanceof obj2（obj1是否是obj2的实例），obj2必须为对象，否则会报错！其返回值为布尔值。</p>\n</li>\n</ul>\n<p>语法： object instanceof constructor</p>\n<p>object（要检测的对象），constructor（某个构造函数），instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。</p>\n<p>简而言之，A instanceof B ， 是判断对象实例A是否是构造函数B的实例。更准确一点的说法是，构造函数B的原型，是否存在与对象实例A的原型链上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>typeof和instanceof都是用来判断变量类型的，两者的区别在于：</p>\n<ul>\n<li><p>typeof判断所有变量的类型，返回值有number，boolean，string，function，object，undefined。（这里需要注意一下，js中基本数据类型常用的有六种，其中简单一点的有五个：String、Number、Boolean、Undefined、Null，一个复杂的数据类型：Object。ES6中新增了一个Symbol用于生成唯一标识符，ES10中新增了BigInt可以表示任意大的整数）。</p>\n</li>\n<li><p>typeof对于丰富的对象实例，只能返回”object”字符串。</p>\n</li>\n<li><p>instanceof用来判断对象，代码形式为obj1 instanceof obj2（obj1是否是obj2的实例），obj2必须为对象，否则会报错！其返回值为布尔值。</p>\n</li>\n</ul>\n<p>语法： object instanceof constructor</p>\n<p>object（要检测的对象），constructor（某个构造函数），instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。</p>\n<p>简而言之，A instanceof B ， 是判断对象实例A是否是构造函数B的实例。更准确一点的说法是，构造函数B的原型，是否存在与对象实例A的原型链上。</p>\n"},{"title":"webpack之前端性能优化","_content":"\n### 开发环境优化\n\n#### 优化打包速度\n\n##### HMR \n\n模块热替换，一个模块发生变化，只会重新打包这一个文件，而不是打包所有文件，提升构建速度。\n\n1. HTML文件：默认不能使用HMR功能，开启HMR功能之后会导致HTML文件不能热更新了。解决方法是修改entry入口，将HTML文件引入。\n\n2. CSS文件：可以使用HMR功能，因为style-loader内部实现了。\n\n3. JS文件：默认不能使用，得手动处理热替换。\n\n   ```javascript\n   if (module.hot) {\n       // 一旦module.hot为true，说明开启了HMR功能\n       module.hot.accept('./XXX.js', () => {\n         // 监听XXX.js文件的变化，执行下面逻辑代码\n         ...\n       })\n   }\n   ```\n\n\n\n\n\n#### 优化代码调试\n\n##### source-map\n\n一种提供构建后代码到源代码映射的技术，如果构建后代码出错了，通过映射可以追踪源代码错误。\n\n``` javascript\n组合方式：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\n```\n\n开发环境推荐使用：eval-source-map / eval-cheap-module-source-map\n\n\n\n\n\n\n\n### 生产环境优化\n\n#### 优化打包速度\n\n##### oneof\n\n找到了匹配的loader之后，后面的loader就不去匹配了，一个文件在oneOf里只会匹配一个loader。\n\n\n\n##### babel缓存\n\n开启缓存后，babel运行的结果会保存起来。如果js文件没有变化，就可以直接使用babel的缓存，不需要重新去编译。\n\n\n\n##### 多进程打包\n\n可以使用thread-loader对后面的loader开启多进程打包。\n\n需要注意的是进程的启动大概600ms，通信也需要时间，只有消耗时间长的工作使用多进程打包才有优化效果，如babel-loader。\n\n\n\n##### externals\n\n配置忽略打包的库，在入口文件中以CDN的方式引入，来优化打包速度。\n\n\n\n##### dll\n\n将一些不常更新的第三方库单独打包，在构建的时候将第三方库打包后的文件引入，每次打包只打包项目自身的代码。\n\n\n\n\n\n#### 优化代码调试\n\n##### source-map\n\n生产环境隐藏源代码推荐使用：\n\n1. nosources-source-map 全部隐藏\n2. hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n\n生产环境不隐藏源代码推荐使用：source-map / cheap-module-source-map\n\n\n\n##### 缓存\n\n在服务端将静态资源设置缓存时间，当用户在缓存时间内请求相同的静态文件的时候，会直接从cookie里去获取。这里的缓存方案，处理场景是在缓存时间内对静态资源有改动，使用户只从服务器获取改动的静态文件，没改动的文件还是从cookie里获取。\n\n打包文件名添加使用hash值，类似于打包文件版本号。文件hash值一旦改变，说明改文件有变动。\n\n1. hash：每次打包都会生成一个唯一hash值；\n2. chunkhash：打包来自于同一个入口，属于同一个chunk，就公用一个hash值；\n3. contenthash：根据文件内容生成hash值；\n\n\n\n##### tree shaking\n\n去除应用程序中没有用到的代码和库，让打包后的代码体积更小，从而提升程序执行速度。\n\nSideEffect: 让 webpack 去除 tree shaking 带来副作用的代码。\n\n使用方式：\n\n1. 使用ES6 module（webpack4.X需要使用ES6 module，webpack5也支持CommonJS）\n2. 开启生产模式\n\n\n\n##### code split\n\n###### optimization\n\n1. 可以将node-modules中代码单独打包成一个chunk最终输出；\n2. 自动分析多入口chunk中，有没有公共文件，如果有会打包成单独的一个chunk。\n\n###### import\n\nimport动态导入语法，能将某个文件单独打包成一个chunk。\n\n``` javascript\n// 给打包文件重命名\nimport(/* webpackChunkName: 'XXX' */'./XXX.js')\n  .then(() => {\n  \t...\n\t}).catch(() => {\n    ... \n  })\n```\n\n\n\n##### 懒加载/预加载\n\n懒加载：使用的时候才去加载，优点是不白加载，缺点是如果加载文件体积过大会卡顿；\n\n预加载：当其他资源加载完了再去加载，优点是使用时流畅，缺点是兼容性不好。\n\n\n\n##### PWA\n\n一种理念，使用多种技术来增强webapp的功能，是网站的体验变得更好。能够模拟一些原生功能，如离线也可以访问。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/webpack之前端性能优化.md","raw":"---\ntitle: webpack之前端性能优化\n\ntags: [webpack,性能优化]\n\ncategories: webpack\n---\n\n### 开发环境优化\n\n#### 优化打包速度\n\n##### HMR \n\n模块热替换，一个模块发生变化，只会重新打包这一个文件，而不是打包所有文件，提升构建速度。\n\n1. HTML文件：默认不能使用HMR功能，开启HMR功能之后会导致HTML文件不能热更新了。解决方法是修改entry入口，将HTML文件引入。\n\n2. CSS文件：可以使用HMR功能，因为style-loader内部实现了。\n\n3. JS文件：默认不能使用，得手动处理热替换。\n\n   ```javascript\n   if (module.hot) {\n       // 一旦module.hot为true，说明开启了HMR功能\n       module.hot.accept('./XXX.js', () => {\n         // 监听XXX.js文件的变化，执行下面逻辑代码\n         ...\n       })\n   }\n   ```\n\n\n\n\n\n#### 优化代码调试\n\n##### source-map\n\n一种提供构建后代码到源代码映射的技术，如果构建后代码出错了，通过映射可以追踪源代码错误。\n\n``` javascript\n组合方式：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\n```\n\n开发环境推荐使用：eval-source-map / eval-cheap-module-source-map\n\n\n\n\n\n\n\n### 生产环境优化\n\n#### 优化打包速度\n\n##### oneof\n\n找到了匹配的loader之后，后面的loader就不去匹配了，一个文件在oneOf里只会匹配一个loader。\n\n\n\n##### babel缓存\n\n开启缓存后，babel运行的结果会保存起来。如果js文件没有变化，就可以直接使用babel的缓存，不需要重新去编译。\n\n\n\n##### 多进程打包\n\n可以使用thread-loader对后面的loader开启多进程打包。\n\n需要注意的是进程的启动大概600ms，通信也需要时间，只有消耗时间长的工作使用多进程打包才有优化效果，如babel-loader。\n\n\n\n##### externals\n\n配置忽略打包的库，在入口文件中以CDN的方式引入，来优化打包速度。\n\n\n\n##### dll\n\n将一些不常更新的第三方库单独打包，在构建的时候将第三方库打包后的文件引入，每次打包只打包项目自身的代码。\n\n\n\n\n\n#### 优化代码调试\n\n##### source-map\n\n生产环境隐藏源代码推荐使用：\n\n1. nosources-source-map 全部隐藏\n2. hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n\n生产环境不隐藏源代码推荐使用：source-map / cheap-module-source-map\n\n\n\n##### 缓存\n\n在服务端将静态资源设置缓存时间，当用户在缓存时间内请求相同的静态文件的时候，会直接从cookie里去获取。这里的缓存方案，处理场景是在缓存时间内对静态资源有改动，使用户只从服务器获取改动的静态文件，没改动的文件还是从cookie里获取。\n\n打包文件名添加使用hash值，类似于打包文件版本号。文件hash值一旦改变，说明改文件有变动。\n\n1. hash：每次打包都会生成一个唯一hash值；\n2. chunkhash：打包来自于同一个入口，属于同一个chunk，就公用一个hash值；\n3. contenthash：根据文件内容生成hash值；\n\n\n\n##### tree shaking\n\n去除应用程序中没有用到的代码和库，让打包后的代码体积更小，从而提升程序执行速度。\n\nSideEffect: 让 webpack 去除 tree shaking 带来副作用的代码。\n\n使用方式：\n\n1. 使用ES6 module（webpack4.X需要使用ES6 module，webpack5也支持CommonJS）\n2. 开启生产模式\n\n\n\n##### code split\n\n###### optimization\n\n1. 可以将node-modules中代码单独打包成一个chunk最终输出；\n2. 自动分析多入口chunk中，有没有公共文件，如果有会打包成单独的一个chunk。\n\n###### import\n\nimport动态导入语法，能将某个文件单独打包成一个chunk。\n\n``` javascript\n// 给打包文件重命名\nimport(/* webpackChunkName: 'XXX' */'./XXX.js')\n  .then(() => {\n  \t...\n\t}).catch(() => {\n    ... \n  })\n```\n\n\n\n##### 懒加载/预加载\n\n懒加载：使用的时候才去加载，优点是不白加载，缺点是如果加载文件体积过大会卡顿；\n\n预加载：当其他资源加载完了再去加载，优点是使用时流畅，缺点是兼容性不好。\n\n\n\n##### PWA\n\n一种理念，使用多种技术来增强webapp的功能，是网站的体验变得更好。能够模拟一些原生功能，如离线也可以访问。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"webpack之前端性能优化","published":1,"date":"2023-11-07T03:36:00.763Z","updated":"2023-11-07T03:36:00.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz882001iu17u7nnpc1tq","content":"<h3 id=\"开发环境优化\"><a href=\"#开发环境优化\" class=\"headerlink\" title=\"开发环境优化\"></a>开发环境优化</h3><h4 id=\"优化打包速度\"><a href=\"#优化打包速度\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h4><h5 id=\"HMR\"><a href=\"#HMR\" class=\"headerlink\" title=\"HMR\"></a>HMR</h5><p>模块热替换，一个模块发生变化，只会重新打包这一个文件，而不是打包所有文件，提升构建速度。</p>\n<ol>\n<li><p>HTML文件：默认不能使用HMR功能，开启HMR功能之后会导致HTML文件不能热更新了。解决方法是修改entry入口，将HTML文件引入。</p>\n</li>\n<li><p>CSS文件：可以使用HMR功能，因为style-loader内部实现了。</p>\n</li>\n<li><p>JS文件：默认不能使用，得手动处理热替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一旦module.hot为true，说明开启了HMR功能</span></span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>.<span class=\"title function_\">accept</span>(<span class=\"string\">&#x27;./XXX.js&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听XXX.js文件的变化，执行下面逻辑代码</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"优化代码调试\"><a href=\"#优化代码调试\" class=\"headerlink\" title=\"优化代码调试\"></a>优化代码调试</h4><h5 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source-map\"></a>source-map</h5><p>一种提供构建后代码到源代码映射的技术，如果构建后代码出错了，通过映射可以追踪源代码错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组合方式：[inline-|hidden-|<span class=\"built_in\">eval</span>-][nosources-][cheap-[<span class=\"variable language_\">module</span>-]]source-map</span><br></pre></td></tr></table></figure>\n\n<p>开发环境推荐使用：eval-source-map / eval-cheap-module-source-map</p>\n<h3 id=\"生产环境优化\"><a href=\"#生产环境优化\" class=\"headerlink\" title=\"生产环境优化\"></a>生产环境优化</h3><h4 id=\"优化打包速度-1\"><a href=\"#优化打包速度-1\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h4><h5 id=\"oneof\"><a href=\"#oneof\" class=\"headerlink\" title=\"oneof\"></a>oneof</h5><p>找到了匹配的loader之后，后面的loader就不去匹配了，一个文件在oneOf里只会匹配一个loader。</p>\n<h5 id=\"babel缓存\"><a href=\"#babel缓存\" class=\"headerlink\" title=\"babel缓存\"></a>babel缓存</h5><p>开启缓存后，babel运行的结果会保存起来。如果js文件没有变化，就可以直接使用babel的缓存，不需要重新去编译。</p>\n<h5 id=\"多进程打包\"><a href=\"#多进程打包\" class=\"headerlink\" title=\"多进程打包\"></a>多进程打包</h5><p>可以使用thread-loader对后面的loader开启多进程打包。</p>\n<p>需要注意的是进程的启动大概600ms，通信也需要时间，只有消耗时间长的工作使用多进程打包才有优化效果，如babel-loader。</p>\n<h5 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h5><p>配置忽略打包的库，在入口文件中以CDN的方式引入，来优化打包速度。</p>\n<h5 id=\"dll\"><a href=\"#dll\" class=\"headerlink\" title=\"dll\"></a>dll</h5><p>将一些不常更新的第三方库单独打包，在构建的时候将第三方库打包后的文件引入，每次打包只打包项目自身的代码。</p>\n<h4 id=\"优化代码调试-1\"><a href=\"#优化代码调试-1\" class=\"headerlink\" title=\"优化代码调试\"></a>优化代码调试</h4><h5 id=\"source-map-1\"><a href=\"#source-map-1\" class=\"headerlink\" title=\"source-map\"></a>source-map</h5><p>生产环境隐藏源代码推荐使用：</p>\n<ol>\n<li>nosources-source-map 全部隐藏</li>\n<li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li>\n</ol>\n<p>生产环境不隐藏源代码推荐使用：source-map / cheap-module-source-map</p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>在服务端将静态资源设置缓存时间，当用户在缓存时间内请求相同的静态文件的时候，会直接从cookie里去获取。这里的缓存方案，处理场景是在缓存时间内对静态资源有改动，使用户只从服务器获取改动的静态文件，没改动的文件还是从cookie里获取。</p>\n<p>打包文件名添加使用hash值，类似于打包文件版本号。文件hash值一旦改变，说明改文件有变动。</p>\n<ol>\n<li>hash：每次打包都会生成一个唯一hash值；</li>\n<li>chunkhash：打包来自于同一个入口，属于同一个chunk，就公用一个hash值；</li>\n<li>contenthash：根据文件内容生成hash值；</li>\n</ol>\n<h5 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree shaking\"></a>tree shaking</h5><p>去除应用程序中没有用到的代码和库，让打包后的代码体积更小，从而提升程序执行速度。</p>\n<p>SideEffect: 让 webpack 去除 tree shaking 带来副作用的代码。</p>\n<p>使用方式：</p>\n<ol>\n<li>使用ES6 module（webpack4.X需要使用ES6 module，webpack5也支持CommonJS）</li>\n<li>开启生产模式</li>\n</ol>\n<h5 id=\"code-split\"><a href=\"#code-split\" class=\"headerlink\" title=\"code split\"></a>code split</h5><h6 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h6><ol>\n<li>可以将node-modules中代码单独打包成一个chunk最终输出；</li>\n<li>自动分析多入口chunk中，有没有公共文件，如果有会打包成单独的一个chunk。</li>\n</ol>\n<h6 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h6><p>import动态导入语法，能将某个文件单独打包成一个chunk。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给打包文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &#x27;XXX&#x27; */</span><span class=\"string\">&#x27;./XXX.js&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">\t&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"懒加载-预加载\"><a href=\"#懒加载-预加载\" class=\"headerlink\" title=\"懒加载/预加载\"></a>懒加载/预加载</h5><p>懒加载：使用的时候才去加载，优点是不白加载，缺点是如果加载文件体积过大会卡顿；</p>\n<p>预加载：当其他资源加载完了再去加载，优点是使用时流畅，缺点是兼容性不好。</p>\n<h5 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h5><p>一种理念，使用多种技术来增强webapp的功能，是网站的体验变得更好。能够模拟一些原生功能，如离线也可以访问。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开发环境优化\"><a href=\"#开发环境优化\" class=\"headerlink\" title=\"开发环境优化\"></a>开发环境优化</h3><h4 id=\"优化打包速度\"><a href=\"#优化打包速度\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h4><h5 id=\"HMR\"><a href=\"#HMR\" class=\"headerlink\" title=\"HMR\"></a>HMR</h5><p>模块热替换，一个模块发生变化，只会重新打包这一个文件，而不是打包所有文件，提升构建速度。</p>\n<ol>\n<li><p>HTML文件：默认不能使用HMR功能，开启HMR功能之后会导致HTML文件不能热更新了。解决方法是修改entry入口，将HTML文件引入。</p>\n</li>\n<li><p>CSS文件：可以使用HMR功能，因为style-loader内部实现了。</p>\n</li>\n<li><p>JS文件：默认不能使用，得手动处理热替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一旦module.hot为true，说明开启了HMR功能</span></span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>.<span class=\"title function_\">accept</span>(<span class=\"string\">&#x27;./XXX.js&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听XXX.js文件的变化，执行下面逻辑代码</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"优化代码调试\"><a href=\"#优化代码调试\" class=\"headerlink\" title=\"优化代码调试\"></a>优化代码调试</h4><h5 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source-map\"></a>source-map</h5><p>一种提供构建后代码到源代码映射的技术，如果构建后代码出错了，通过映射可以追踪源代码错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组合方式：[inline-|hidden-|<span class=\"built_in\">eval</span>-][nosources-][cheap-[<span class=\"variable language_\">module</span>-]]source-map</span><br></pre></td></tr></table></figure>\n\n<p>开发环境推荐使用：eval-source-map / eval-cheap-module-source-map</p>\n<h3 id=\"生产环境优化\"><a href=\"#生产环境优化\" class=\"headerlink\" title=\"生产环境优化\"></a>生产环境优化</h3><h4 id=\"优化打包速度-1\"><a href=\"#优化打包速度-1\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h4><h5 id=\"oneof\"><a href=\"#oneof\" class=\"headerlink\" title=\"oneof\"></a>oneof</h5><p>找到了匹配的loader之后，后面的loader就不去匹配了，一个文件在oneOf里只会匹配一个loader。</p>\n<h5 id=\"babel缓存\"><a href=\"#babel缓存\" class=\"headerlink\" title=\"babel缓存\"></a>babel缓存</h5><p>开启缓存后，babel运行的结果会保存起来。如果js文件没有变化，就可以直接使用babel的缓存，不需要重新去编译。</p>\n<h5 id=\"多进程打包\"><a href=\"#多进程打包\" class=\"headerlink\" title=\"多进程打包\"></a>多进程打包</h5><p>可以使用thread-loader对后面的loader开启多进程打包。</p>\n<p>需要注意的是进程的启动大概600ms，通信也需要时间，只有消耗时间长的工作使用多进程打包才有优化效果，如babel-loader。</p>\n<h5 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h5><p>配置忽略打包的库，在入口文件中以CDN的方式引入，来优化打包速度。</p>\n<h5 id=\"dll\"><a href=\"#dll\" class=\"headerlink\" title=\"dll\"></a>dll</h5><p>将一些不常更新的第三方库单独打包，在构建的时候将第三方库打包后的文件引入，每次打包只打包项目自身的代码。</p>\n<h4 id=\"优化代码调试-1\"><a href=\"#优化代码调试-1\" class=\"headerlink\" title=\"优化代码调试\"></a>优化代码调试</h4><h5 id=\"source-map-1\"><a href=\"#source-map-1\" class=\"headerlink\" title=\"source-map\"></a>source-map</h5><p>生产环境隐藏源代码推荐使用：</p>\n<ol>\n<li>nosources-source-map 全部隐藏</li>\n<li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li>\n</ol>\n<p>生产环境不隐藏源代码推荐使用：source-map / cheap-module-source-map</p>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>在服务端将静态资源设置缓存时间，当用户在缓存时间内请求相同的静态文件的时候，会直接从cookie里去获取。这里的缓存方案，处理场景是在缓存时间内对静态资源有改动，使用户只从服务器获取改动的静态文件，没改动的文件还是从cookie里获取。</p>\n<p>打包文件名添加使用hash值，类似于打包文件版本号。文件hash值一旦改变，说明改文件有变动。</p>\n<ol>\n<li>hash：每次打包都会生成一个唯一hash值；</li>\n<li>chunkhash：打包来自于同一个入口，属于同一个chunk，就公用一个hash值；</li>\n<li>contenthash：根据文件内容生成hash值；</li>\n</ol>\n<h5 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree shaking\"></a>tree shaking</h5><p>去除应用程序中没有用到的代码和库，让打包后的代码体积更小，从而提升程序执行速度。</p>\n<p>SideEffect: 让 webpack 去除 tree shaking 带来副作用的代码。</p>\n<p>使用方式：</p>\n<ol>\n<li>使用ES6 module（webpack4.X需要使用ES6 module，webpack5也支持CommonJS）</li>\n<li>开启生产模式</li>\n</ol>\n<h5 id=\"code-split\"><a href=\"#code-split\" class=\"headerlink\" title=\"code split\"></a>code split</h5><h6 id=\"optimization\"><a href=\"#optimization\" class=\"headerlink\" title=\"optimization\"></a>optimization</h6><ol>\n<li>可以将node-modules中代码单独打包成一个chunk最终输出；</li>\n<li>自动分析多入口chunk中，有没有公共文件，如果有会打包成单独的一个chunk。</li>\n</ol>\n<h6 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h6><p>import动态导入语法，能将某个文件单独打包成一个chunk。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给打包文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &#x27;XXX&#x27; */</span><span class=\"string\">&#x27;./XXX.js&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">\t&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"懒加载-预加载\"><a href=\"#懒加载-预加载\" class=\"headerlink\" title=\"懒加载/预加载\"></a>懒加载/预加载</h5><p>懒加载：使用的时候才去加载，优点是不白加载，缺点是如果加载文件体积过大会卡顿；</p>\n<p>预加载：当其他资源加载完了再去加载，优点是使用时流畅，缺点是兼容性不好。</p>\n<h5 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h5><p>一种理念，使用多种技术来增强webapp的功能，是网站的体验变得更好。能够模拟一些原生功能，如离线也可以访问。</p>\n"},{"title":"三次握手和四次挥手","date":"2021-07-26T16:00:00.000Z","_content":"\n### 模拟过程\n\nA：听得到吗？\n\nB：听得到，你呢？（B在回复的时候，说明A发送信息没问题，B接收信息没问题）\n\nA：听得到。（A在回复的时候，说明B发送信息没问题，A接收信息没问题）\n\n。。。\n\n。。。\n\n。。。\n\nA：我要闭嘴了，确认请挥手。\n\nB：🙋‍♂️。（B这里挥手示意收到A消息，说明A发送信息没问题，B接收信息没问题）\n\nB：我也要闭嘴了，确认请挥手。（这里B回复A，跟B挥手示意不是一次进行，是因为在B在收到A消息的时候，可能手上的事情还没做完，等做完了再回复）\n\nA：🙋‍♂️。（这里A挥手，说明B发送信息没问题，A接收信息没问题）\n\n### \n\n### 科普\n\nTCP 协议通过三次握手的形式建立一个可靠的连接，建立成功之后开始发送数据。发送数据完了之后，会以四次挥手的形式来终止连接。\n\n\n\n### 一、描述一下 TCP 连接三次握手的过程？\n\n- 第一次握手：客户端尝试连接服务器，向服务器发送 SYN （Synchronization 的缩写）包，并且设置一个序列号 seq（Sequence 的缩写），假设 seq=m；发送完成之后，客户端进入 SYN_SEND 状态等待服务器确认；\n- 第二次握手：服务端接收客户端 syn 包，做出回应；服务端会回送 SYN 和 ACK 给客户端。ACK 的全写是 acknowledgment ，意为答复，ACK 的值是根据客户端发送过来的 seq 来决定的，发给给客户端时，ACK 的值是根据客户端发送的 syn=m 来确认的（假设在 m 的基础上 +1），这样客户端收到回应的时候就能准确知道是服务端的回应了；服务端回应里里的 seq = n 是服务端自己生成的，给客户端进行回应使用的。发送完成之后，服务器进入 SYN_RCVD 状态；\n\n- 第三次握手：客户端收到服务端的 SYN+ACK 包，向服务端发送确认包 ACK（ack=n+1，根据刚刚收到的服务端发送的 seq = n 确定的），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，表示连接成功，完成三次握手，这个时候就可以传输数据了。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png)\n\n### 二、为什么握手需要三次，两次不行吗？\n\n三次握手的目的是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\n\n\n\n“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。—— 谢希仁版《计算机网络》\n\n\n\n### 三、描述一下四次挥手的过程？\n\n- 第一次挥手（FIN=1，seq=x）：假设客户端想要关闭连接，客户端发送一个 FIN （Finish 的缩写，表示结束）标志位 置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入 FIN_WAIT_1 状态。\n- 第二次挥手（ACK=1，ACKnum=x+1）：服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。\n\n- 第三次挥手（FIN=1，seq=y）：服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。\n- 第四次挥手（ACK=1，ACKnum=y+1）：客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。\n\n- 最后，客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png)\n\n### 四、为什么挥手需要四次，三次不行吗？\n\n握手的时候，客户端和服务端打个招呼，服务端可以直接把自己的 SYN 信息和对客户端的回应 ACK 信息一起带上，但是挥手的时候，客户端说我要断开了，服务端还没发完最后的数据，因此需要先回应一下客户端：我收到你的断开的请求了，但是你要等我把最后的内容给你，所以这里分开了 2 步：\n\n- 回应客户端；\n- 发送自己的最后一个数据。\n\n\n\n### 五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？\n\n客户端在发送完 ACK 报文段后，再经过 2MSL 时间，就可以使连接持续的时间所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求的报文段。\n","source":"_posts/三次握手和四次挥手.md","raw":"---\ntitle: 三次握手和四次挥手\n\ndate: 2021-07-27\n\ntags: [三次握手,四次挥手]\n\ncategories: tcp\n---\n\n### 模拟过程\n\nA：听得到吗？\n\nB：听得到，你呢？（B在回复的时候，说明A发送信息没问题，B接收信息没问题）\n\nA：听得到。（A在回复的时候，说明B发送信息没问题，A接收信息没问题）\n\n。。。\n\n。。。\n\n。。。\n\nA：我要闭嘴了，确认请挥手。\n\nB：🙋‍♂️。（B这里挥手示意收到A消息，说明A发送信息没问题，B接收信息没问题）\n\nB：我也要闭嘴了，确认请挥手。（这里B回复A，跟B挥手示意不是一次进行，是因为在B在收到A消息的时候，可能手上的事情还没做完，等做完了再回复）\n\nA：🙋‍♂️。（这里A挥手，说明B发送信息没问题，A接收信息没问题）\n\n### \n\n### 科普\n\nTCP 协议通过三次握手的形式建立一个可靠的连接，建立成功之后开始发送数据。发送数据完了之后，会以四次挥手的形式来终止连接。\n\n\n\n### 一、描述一下 TCP 连接三次握手的过程？\n\n- 第一次握手：客户端尝试连接服务器，向服务器发送 SYN （Synchronization 的缩写）包，并且设置一个序列号 seq（Sequence 的缩写），假设 seq=m；发送完成之后，客户端进入 SYN_SEND 状态等待服务器确认；\n- 第二次握手：服务端接收客户端 syn 包，做出回应；服务端会回送 SYN 和 ACK 给客户端。ACK 的全写是 acknowledgment ，意为答复，ACK 的值是根据客户端发送过来的 seq 来决定的，发给给客户端时，ACK 的值是根据客户端发送的 syn=m 来确认的（假设在 m 的基础上 +1），这样客户端收到回应的时候就能准确知道是服务端的回应了；服务端回应里里的 seq = n 是服务端自己生成的，给客户端进行回应使用的。发送完成之后，服务器进入 SYN_RCVD 状态；\n\n- 第三次握手：客户端收到服务端的 SYN+ACK 包，向服务端发送确认包 ACK（ack=n+1，根据刚刚收到的服务端发送的 seq = n 确定的），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，表示连接成功，完成三次握手，这个时候就可以传输数据了。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png)\n\n### 二、为什么握手需要三次，两次不行吗？\n\n三次握手的目的是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\n\n\n\n“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。—— 谢希仁版《计算机网络》\n\n\n\n### 三、描述一下四次挥手的过程？\n\n- 第一次挥手（FIN=1，seq=x）：假设客户端想要关闭连接，客户端发送一个 FIN （Finish 的缩写，表示结束）标志位 置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入 FIN_WAIT_1 状态。\n- 第二次挥手（ACK=1，ACKnum=x+1）：服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。\n\n- 第三次挥手（FIN=1，seq=y）：服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。\n- 第四次挥手（ACK=1，ACKnum=y+1）：客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。\n\n- 最后，客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png)\n\n### 四、为什么挥手需要四次，三次不行吗？\n\n握手的时候，客户端和服务端打个招呼，服务端可以直接把自己的 SYN 信息和对客户端的回应 ACK 信息一起带上，但是挥手的时候，客户端说我要断开了，服务端还没发完最后的数据，因此需要先回应一下客户端：我收到你的断开的请求了，但是你要等我把最后的内容给你，所以这里分开了 2 步：\n\n- 回应客户端；\n- 发送自己的最后一个数据。\n\n\n\n### 五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？\n\n客户端在发送完 ACK 报文段后，再经过 2MSL 时间，就可以使连接持续的时间所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求的报文段。\n","slug":"三次握手和四次挥手","published":1,"updated":"2023-11-07T03:36:00.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz883001lu17u9mn18r29","content":"<h3 id=\"模拟过程\"><a href=\"#模拟过程\" class=\"headerlink\" title=\"模拟过程\"></a>模拟过程</h3><p>A：听得到吗？</p>\n<p>B：听得到，你呢？（B在回复的时候，说明A发送信息没问题，B接收信息没问题）</p>\n<p>A：听得到。（A在回复的时候，说明B发送信息没问题，A接收信息没问题）</p>\n<p>。。。</p>\n<p>。。。</p>\n<p>。。。</p>\n<p>A：我要闭嘴了，确认请挥手。</p>\n<p>B：🙋‍♂️。（B这里挥手示意收到A消息，说明A发送信息没问题，B接收信息没问题）</p>\n<p>B：我也要闭嘴了，确认请挥手。（这里B回复A，跟B挥手示意不是一次进行，是因为在B在收到A消息的时候，可能手上的事情还没做完，等做完了再回复）</p>\n<p>A：🙋‍♂️。（这里A挥手，说明B发送信息没问题，A接收信息没问题）</p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h3 id=\"科普\"><a href=\"#科普\" class=\"headerlink\" title=\"科普\"></a>科普</h3><p>TCP 协议通过三次握手的形式建立一个可靠的连接，建立成功之后开始发送数据。发送数据完了之后，会以四次挥手的形式来终止连接。</p>\n<h3 id=\"一、描述一下-TCP-连接三次握手的过程？\"><a href=\"#一、描述一下-TCP-连接三次握手的过程？\" class=\"headerlink\" title=\"一、描述一下 TCP 连接三次握手的过程？\"></a>一、描述一下 TCP 连接三次握手的过程？</h3><ul>\n<li><p>第一次握手：客户端尝试连接服务器，向服务器发送 SYN （Synchronization 的缩写）包，并且设置一个序列号 seq（Sequence 的缩写），假设 seq=m；发送完成之后，客户端进入 SYN_SEND 状态等待服务器确认；</p>\n</li>\n<li><p>第二次握手：服务端接收客户端 syn 包，做出回应；服务端会回送 SYN 和 ACK 给客户端。ACK 的全写是 acknowledgment ，意为答复，ACK 的值是根据客户端发送过来的 seq 来决定的，发给给客户端时，ACK 的值是根据客户端发送的 syn=m 来确认的（假设在 m 的基础上 +1），这样客户端收到回应的时候就能准确知道是服务端的回应了；服务端回应里里的 seq = n 是服务端自己生成的，给客户端进行回应使用的。发送完成之后，服务器进入 SYN_RCVD 状态；</p>\n</li>\n<li><p>第三次握手：客户端收到服务端的 SYN+ACK 包，向服务端发送确认包 ACK（ack=n+1，根据刚刚收到的服务端发送的 seq = n 确定的），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，表示连接成功，完成三次握手，这个时候就可以传输数据了。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"img\"></p>\n<h3 id=\"二、为什么握手需要三次，两次不行吗？\"><a href=\"#二、为什么握手需要三次，两次不行吗？\" class=\"headerlink\" title=\"二、为什么握手需要三次，两次不行吗？\"></a>二、为什么握手需要三次，两次不行吗？</h3><p>三次握手的目的是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n<p>“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。—— 谢希仁版《计算机网络》</p>\n<h3 id=\"三、描述一下四次挥手的过程？\"><a href=\"#三、描述一下四次挥手的过程？\" class=\"headerlink\" title=\"三、描述一下四次挥手的过程？\"></a>三、描述一下四次挥手的过程？</h3><ul>\n<li><p>第一次挥手（FIN=1，seq=x）：假设客户端想要关闭连接，客户端发送一个 FIN （Finish 的缩写，表示结束）标志位 置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入 FIN_WAIT_1 状态。</p>\n</li>\n<li><p>第二次挥手（ACK=1，ACKnum=x+1）：服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p>\n</li>\n<li><p>第三次挥手（FIN=1，seq=y）：服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。</p>\n</li>\n<li><p>第四次挥手（ACK=1，ACKnum=y+1）：客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p>\n</li>\n<li><p>最后，客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"img\"></p>\n<h3 id=\"四、为什么挥手需要四次，三次不行吗？\"><a href=\"#四、为什么挥手需要四次，三次不行吗？\" class=\"headerlink\" title=\"四、为什么挥手需要四次，三次不行吗？\"></a>四、为什么挥手需要四次，三次不行吗？</h3><p>握手的时候，客户端和服务端打个招呼，服务端可以直接把自己的 SYN 信息和对客户端的回应 ACK 信息一起带上，但是挥手的时候，客户端说我要断开了，服务端还没发完最后的数据，因此需要先回应一下客户端：我收到你的断开的请求了，但是你要等我把最后的内容给你，所以这里分开了 2 步：</p>\n<ul>\n<li>回应客户端；</li>\n<li>发送自己的最后一个数据。</li>\n</ul>\n<h3 id=\"五、为什么四次挥手里，客户端进入-TIME-WAIT-状态后，需要等待最大报文段生存的时间后，才能关闭？\"><a href=\"#五、为什么四次挥手里，客户端进入-TIME-WAIT-状态后，需要等待最大报文段生存的时间后，才能关闭？\" class=\"headerlink\" title=\"五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？\"></a>五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？</h3><p>客户端在发送完 ACK 报文段后，再经过 2MSL 时间，就可以使连接持续的时间所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求的报文段。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"模拟过程\"><a href=\"#模拟过程\" class=\"headerlink\" title=\"模拟过程\"></a>模拟过程</h3><p>A：听得到吗？</p>\n<p>B：听得到，你呢？（B在回复的时候，说明A发送信息没问题，B接收信息没问题）</p>\n<p>A：听得到。（A在回复的时候，说明B发送信息没问题，A接收信息没问题）</p>\n<p>。。。</p>\n<p>。。。</p>\n<p>。。。</p>\n<p>A：我要闭嘴了，确认请挥手。</p>\n<p>B：🙋‍♂️。（B这里挥手示意收到A消息，说明A发送信息没问题，B接收信息没问题）</p>\n<p>B：我也要闭嘴了，确认请挥手。（这里B回复A，跟B挥手示意不是一次进行，是因为在B在收到A消息的时候，可能手上的事情还没做完，等做完了再回复）</p>\n<p>A：🙋‍♂️。（这里A挥手，说明B发送信息没问题，A接收信息没问题）</p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h3 id=\"科普\"><a href=\"#科普\" class=\"headerlink\" title=\"科普\"></a>科普</h3><p>TCP 协议通过三次握手的形式建立一个可靠的连接，建立成功之后开始发送数据。发送数据完了之后，会以四次挥手的形式来终止连接。</p>\n<h3 id=\"一、描述一下-TCP-连接三次握手的过程？\"><a href=\"#一、描述一下-TCP-连接三次握手的过程？\" class=\"headerlink\" title=\"一、描述一下 TCP 连接三次握手的过程？\"></a>一、描述一下 TCP 连接三次握手的过程？</h3><ul>\n<li><p>第一次握手：客户端尝试连接服务器，向服务器发送 SYN （Synchronization 的缩写）包，并且设置一个序列号 seq（Sequence 的缩写），假设 seq=m；发送完成之后，客户端进入 SYN_SEND 状态等待服务器确认；</p>\n</li>\n<li><p>第二次握手：服务端接收客户端 syn 包，做出回应；服务端会回送 SYN 和 ACK 给客户端。ACK 的全写是 acknowledgment ，意为答复，ACK 的值是根据客户端发送过来的 seq 来决定的，发给给客户端时，ACK 的值是根据客户端发送的 syn=m 来确认的（假设在 m 的基础上 +1），这样客户端收到回应的时候就能准确知道是服务端的回应了；服务端回应里里的 seq = n 是服务端自己生成的，给客户端进行回应使用的。发送完成之后，服务器进入 SYN_RCVD 状态；</p>\n</li>\n<li><p>第三次握手：客户端收到服务端的 SYN+ACK 包，向服务端发送确认包 ACK（ack=n+1，根据刚刚收到的服务端发送的 seq = n 确定的），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，表示连接成功，完成三次握手，这个时候就可以传输数据了。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"img\"></p>\n<h3 id=\"二、为什么握手需要三次，两次不行吗？\"><a href=\"#二、为什么握手需要三次，两次不行吗？\" class=\"headerlink\" title=\"二、为什么握手需要三次，两次不行吗？\"></a>二、为什么握手需要三次，两次不行吗？</h3><p>三次握手的目的是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n<p>“已失效的连接请求报文段”的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。—— 谢希仁版《计算机网络》</p>\n<h3 id=\"三、描述一下四次挥手的过程？\"><a href=\"#三、描述一下四次挥手的过程？\" class=\"headerlink\" title=\"三、描述一下四次挥手的过程？\"></a>三、描述一下四次挥手的过程？</h3><ul>\n<li><p>第一次挥手（FIN=1，seq=x）：假设客户端想要关闭连接，客户端发送一个 FIN （Finish 的缩写，表示结束）标志位 置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入 FIN_WAIT_1 状态。</p>\n</li>\n<li><p>第二次挥手（ACK=1，ACKnum=x+1）：服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p>\n</li>\n<li><p>第三次挥手（FIN=1，seq=y）：服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。</p>\n</li>\n<li><p>第四次挥手（ACK=1，ACKnum=y+1）：客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p>\n</li>\n<li><p>最后，客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"img\"></p>\n<h3 id=\"四、为什么挥手需要四次，三次不行吗？\"><a href=\"#四、为什么挥手需要四次，三次不行吗？\" class=\"headerlink\" title=\"四、为什么挥手需要四次，三次不行吗？\"></a>四、为什么挥手需要四次，三次不行吗？</h3><p>握手的时候，客户端和服务端打个招呼，服务端可以直接把自己的 SYN 信息和对客户端的回应 ACK 信息一起带上，但是挥手的时候，客户端说我要断开了，服务端还没发完最后的数据，因此需要先回应一下客户端：我收到你的断开的请求了，但是你要等我把最后的内容给你，所以这里分开了 2 步：</p>\n<ul>\n<li>回应客户端；</li>\n<li>发送自己的最后一个数据。</li>\n</ul>\n<h3 id=\"五、为什么四次挥手里，客户端进入-TIME-WAIT-状态后，需要等待最大报文段生存的时间后，才能关闭？\"><a href=\"#五、为什么四次挥手里，客户端进入-TIME-WAIT-状态后，需要等待最大报文段生存的时间后，才能关闭？\" class=\"headerlink\" title=\"五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？\"></a>五、为什么四次挥手里，客户端进入 TIME_WAIT 状态后，需要等待最大报文段生存的时间后，才能关闭？</h3><p>客户端在发送完 ACK 报文段后，再经过 2MSL 时间，就可以使连接持续的时间所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求的报文段。</p>\n"},{"title":"事件委托","date":"2021-07-23T16:00:00.000Z","_content":"**关键词：事件冒泡和目标元素。**\n\n**科普：**\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\n\n事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。\n\n目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。\n\n\n**使用**：\n\n把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。\n\n\n**优点：**\n\n1. 可以大量节省内存占用，减少事件注册；\n\n2. 在DOM更新后无需重新绑定事件处理器。\n\n\n**缺点：**\n\n1. 事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；\n\n2. 不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理；\n3. 从浏览器的角度，相当于将父元素标记了一个非快速滚动区域，浏览器合成线程中将注册了事件浏览器的区域标记为非快速滚动区域。当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无需主线程的参与来合成一个新的帧。输入事件代表着来自于用户的任何手势动作，所以用户滚动页面、触碰屏幕以及鼠标移动等操作都是输入事件。当用户的输入事件不是需要主线程处理的，比如在非快速滚动区域做了一个滚动的操作，合成线程每次都会告知主线程并且等主线程处理完才开始干活，用户体验流畅度会有影响。为了减轻这种情况的发生，可以为事件监听器传递pass: true选项。这个选项会告诉浏览器仍要在主线程中监听事件，合成线程页可以继续合成新的帧。\n\n","source":"_posts/事件委托.md","raw":"---\ntitle: 事件委托\n\ndate: 2021-07-24\n\ntags: [事件委托]\n\ncategories: javascript\n---\n**关键词：事件冒泡和目标元素。**\n\n**科普：**\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\n\n事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。\n\n目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。\n\n\n**使用**：\n\n把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。\n\n\n**优点：**\n\n1. 可以大量节省内存占用，减少事件注册；\n\n2. 在DOM更新后无需重新绑定事件处理器。\n\n\n**缺点：**\n\n1. 事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；\n\n2. 不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理；\n3. 从浏览器的角度，相当于将父元素标记了一个非快速滚动区域，浏览器合成线程中将注册了事件浏览器的区域标记为非快速滚动区域。当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无需主线程的参与来合成一个新的帧。输入事件代表着来自于用户的任何手势动作，所以用户滚动页面、触碰屏幕以及鼠标移动等操作都是输入事件。当用户的输入事件不是需要主线程处理的，比如在非快速滚动区域做了一个滚动的操作，合成线程每次都会告知主线程并且等主线程处理完才开始干活，用户体验流畅度会有影响。为了减轻这种情况的发生，可以为事件监听器传递pass: true选项。这个选项会告诉浏览器仍要在主线程中监听事件，合成线程页可以继续合成新的帧。\n\n","slug":"事件委托","published":1,"updated":"2023-11-07T03:36:00.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz884001pu17u7x8pb6oc","content":"<p><strong>关键词：事件冒泡和目标元素。</strong></p>\n<p><strong>科普：</strong></p>\n<p>一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>\n<p>事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。</p>\n<p>目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。</p>\n<p><strong>使用</strong>：</p>\n<p>把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>可以大量节省内存占用，减少事件注册；</p>\n</li>\n<li><p>在DOM更新后无需重新绑定事件处理器。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；</p>\n</li>\n<li><p>不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理；</p>\n</li>\n<li><p>从浏览器的角度，相当于将父元素标记了一个非快速滚动区域，浏览器合成线程中将注册了事件浏览器的区域标记为非快速滚动区域。当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无需主线程的参与来合成一个新的帧。输入事件代表着来自于用户的任何手势动作，所以用户滚动页面、触碰屏幕以及鼠标移动等操作都是输入事件。当用户的输入事件不是需要主线程处理的，比如在非快速滚动区域做了一个滚动的操作，合成线程每次都会告知主线程并且等主线程处理完才开始干活，用户体验流畅度会有影响。为了减轻这种情况的发生，可以为事件监听器传递pass: true选项。这个选项会告诉浏览器仍要在主线程中监听事件，合成线程页可以继续合成新的帧。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>关键词：事件冒泡和目标元素。</strong></p>\n<p><strong>科普：</strong></p>\n<p>一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>\n<p>事件冒泡： 当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有的祖先元素中被触发。这个事件从事件的原始元素开始一直冒泡到DOM树最上层。</p>\n<p>目标元素：任何事件的目标元素都是最开始的那个元素，在老IE下，目标元素是window.event.srcElement，其他浏览器event.target。</p>\n<p><strong>使用</strong>：</p>\n<p>把事件处理器添加到一个父级元素上，等待一个事件从它的子级里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>可以大量节省内存占用，减少事件注册；</p>\n</li>\n<li><p>在DOM更新后无需重新绑定事件处理器。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时；</p>\n</li>\n<li><p>不是所有的事件都是能冒泡的，如blur、focus、load和unload。也不是所有事件都适合用事件代理的，如mousemove事件触发非常频繁会导致性能瓶颈，mouseout怪异的表现很难用事件代理来管理；</p>\n</li>\n<li><p>从浏览器的角度，相当于将父元素标记了一个非快速滚动区域，浏览器合成线程中将注册了事件浏览器的区域标记为非快速滚动区域。当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无需主线程的参与来合成一个新的帧。输入事件代表着来自于用户的任何手势动作，所以用户滚动页面、触碰屏幕以及鼠标移动等操作都是输入事件。当用户的输入事件不是需要主线程处理的，比如在非快速滚动区域做了一个滚动的操作，合成线程每次都会告知主线程并且等主线程处理完才开始干活，用户体验流畅度会有影响。为了减轻这种情况的发生，可以为事件监听器传递pass: true选项。这个选项会告诉浏览器仍要在主线程中监听事件，合成线程页可以继续合成新的帧。</p>\n</li>\n</ol>\n"},{"title":"从输入url到页面加载完成发生了什么","date":"2021-07-25T16:00:00.000Z","_content":"\n1. DNS 域名解析；\n2. 建立 TCP 连接（三次握手）；\n\n3. 发送 HTTP 请求；\n\n4. 服务器处理请求；\n\n5. 返回响应结果；\n\n6. 关闭 TCP 连接（四次挥手）；\n\n7. 浏览器解析 HTML；\n\n8. 浏览器布局渲染（重排和重绘）；","source":"_posts/从输入url到页面加载完成发生了什么.md","raw":"---\ntitle: 从输入url到页面加载完成发生了什么\n\ndate: 2021-07-26\n\ntags: [页面加载]\n\ncategories: 浏览器\n---\n\n1. DNS 域名解析；\n2. 建立 TCP 连接（三次握手）；\n\n3. 发送 HTTP 请求；\n\n4. 服务器处理请求；\n\n5. 返回响应结果；\n\n6. 关闭 TCP 连接（四次挥手）；\n\n7. 浏览器解析 HTML；\n\n8. 浏览器布局渲染（重排和重绘）；","slug":"从输入url到页面加载完成发生了什么","published":1,"updated":"2023-11-07T03:36:00.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz884001ru17ub6y7fmhe","content":"<ol>\n<li><p>DNS 域名解析；</p>\n</li>\n<li><p>建立 TCP 连接（三次握手）；</p>\n</li>\n<li><p>发送 HTTP 请求；</p>\n</li>\n<li><p>服务器处理请求；</p>\n</li>\n<li><p>返回响应结果；</p>\n</li>\n<li><p>关闭 TCP 连接（四次挥手）；</p>\n</li>\n<li><p>浏览器解析 HTML；</p>\n</li>\n<li><p>浏览器布局渲染（重排和重绘）；</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>DNS 域名解析；</p>\n</li>\n<li><p>建立 TCP 连接（三次握手）；</p>\n</li>\n<li><p>发送 HTTP 请求；</p>\n</li>\n<li><p>服务器处理请求；</p>\n</li>\n<li><p>返回响应结果；</p>\n</li>\n<li><p>关闭 TCP 连接（四次挥手）；</p>\n</li>\n<li><p>浏览器解析 HTML；</p>\n</li>\n<li><p>浏览器布局渲染（重排和重绘）；</p>\n</li>\n</ol>\n"},{"title":"八大数据结构分类","date":"2021-07-14T16:00:00.000Z","_content":"### 数组\n\n数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。\n\n优点：\n\n1. 按照索引查询元素速度快；\n2. 按照索引遍历数组方便。\n\n缺点：\n\n1. 数组的大小固定后就无法扩容了；\n2. 数组只能存储一种类型的数据；\n\n1. 添加，删除的操作慢，因为要移动其他的元素。\n\n适用场景：\n\n频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n\n\n### 栈\n\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n\n适用场景：\n\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n\n\n### 队列\n\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。\n\n适用场景：\n\n因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n\n\n### 链表\n\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n\n优点：\n\n1. 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n2. 添加或者删除元素时只需要改变结点的指针域指向地址即可，所以添加，删除很快。\n\n缺点：\n\n1. 因为含有大量的指针域，占用空间较大；\n2. 查找元素需要遍历链表来查找，非常耗时。\n\n适用场景：\n\n数据量较小，需要频繁增加，删除操作的场景。\n\n\n\n### 树\n\n是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。\n\n特点：\n\n- 每个节点有零个或多个子节点；\n- 没有父节点的节点称为根节点；\n\n- 每一个非根节点有且只有一个父节点；\n- 除了根节点外，每个子节点可以分为多个不相交的子树。\n\n\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n\n- 即使某结点只有一个子树，也要区分左右子树。\n\n优点：\n\n既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n\n\n### 散列表\n\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后将该数字对数组长度进行取余，取余结果当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n\n\n### 堆\n\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫最大堆或大根堆，根节点最小的堆叫最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A0%86.png)\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n\n\n### 图\n\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n根据图的边是否有方向，可分为有向图和无向图。根据图的边是否有权重，可分为带权图和无权图。当然，也可以把两个维度结合起来描述，比如有向带权图，无向无权图等等。\n\n","source":"_posts/八大数据结构分类.md","raw":"---\ntitle: 八大数据结构分类\n\ndate: 2021-07-15\n\ntags: [数据结构]\n\ncategories: 算法\n---\n### 数组\n\n数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。\n\n优点：\n\n1. 按照索引查询元素速度快；\n2. 按照索引遍历数组方便。\n\n缺点：\n\n1. 数组的大小固定后就无法扩容了；\n2. 数组只能存储一种类型的数据；\n\n1. 添加，删除的操作慢，因为要移动其他的元素。\n\n适用场景：\n\n频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n\n\n### 栈\n\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n\n适用场景：\n\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n\n\n### 队列\n\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。\n\n适用场景：\n\n因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n\n\n### 链表\n\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n\n优点：\n\n1. 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n2. 添加或者删除元素时只需要改变结点的指针域指向地址即可，所以添加，删除很快。\n\n缺点：\n\n1. 因为含有大量的指针域，占用空间较大；\n2. 查找元素需要遍历链表来查找，非常耗时。\n\n适用场景：\n\n数据量较小，需要频繁增加，删除操作的场景。\n\n\n\n### 树\n\n是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。\n\n特点：\n\n- 每个节点有零个或多个子节点；\n- 没有父节点的节点称为根节点；\n\n- 每一个非根节点有且只有一个父节点；\n- 除了根节点外，每个子节点可以分为多个不相交的子树。\n\n\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n\n- 即使某结点只有一个子树，也要区分左右子树。\n\n优点：\n\n既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n\n\n### 散列表\n\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后将该数字对数组长度进行取余，取余结果当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n\n\n### 堆\n\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫最大堆或大根堆，根节点最小的堆叫最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A0%86.png)\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n\n\n### 图\n\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n根据图的边是否有方向，可分为有向图和无向图。根据图的边是否有权重，可分为带权图和无权图。当然，也可以把两个维度结合起来描述，比如有向带权图，无向无权图等等。\n\n","slug":"八大数据结构分类","published":1,"updated":"2023-11-07T03:36:00.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz885001wu17u5t4d2su0","content":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。</p>\n<p>优点：</p>\n<ol>\n<li>按照索引查询元素速度快；</li>\n<li>按照索引遍历数组方便。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>数组的大小固定后就无法扩容了；</p>\n</li>\n<li><p>数组只能存储一种类型的数据；</p>\n</li>\n<li><p>添加，删除的操作慢，因为要移动其他的元素。</p>\n</li>\n</ol>\n<p>适用场景：</p>\n<p>频繁查询，对存储空间要求不大，很少增加和删除的情况。</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<p>适用场景：</p>\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。</p>\n<p>适用场景：</p>\n<p>因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n<p>优点：</p>\n<ol>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变结点的指针域指向地址即可，所以添加，删除很快。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ol>\n<p>适用场景：</p>\n<p>数据量较小，需要频繁增加，删除操作的场景。</p>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p>\n<p>特点：</p>\n<ul>\n<li><p>每个节点有零个或多个子节点；</p>\n</li>\n<li><p>没有父节点的节点称为根节点；</p>\n</li>\n<li><p>每一个非根节点有且只有一个父节点；</p>\n</li>\n<li><p>除了根节点外，每个子节点可以分为多个不相交的子树。</p>\n</li>\n</ul>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li><p>每个结点最多有两颗子树，结点的度最大为2。</p>\n</li>\n<li><p>左子树和右子树是有顺序的，次序不能颠倒。</p>\n</li>\n<li><p>即使某结点只有一个子树，也要区分左右子树。</p>\n</li>\n</ul>\n<p>优点：</p>\n<p>既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<h3 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h3><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后将该数字对数组长度进行取余，取余结果当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫最大堆或大根堆，根节点最小的堆叫最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A0%86.png\" alt=\"img\"></p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>根据图的边是否有方向，可分为有向图和无向图。根据图的边是否有权重，可分为带权图和无权图。当然，也可以把两个维度结合起来描述，比如有向带权图，无向无权图等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。</p>\n<p>优点：</p>\n<ol>\n<li>按照索引查询元素速度快；</li>\n<li>按照索引遍历数组方便。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li><p>数组的大小固定后就无法扩容了；</p>\n</li>\n<li><p>数组只能存储一种类型的数据；</p>\n</li>\n<li><p>添加，删除的操作慢，因为要移动其他的元素。</p>\n</li>\n</ol>\n<p>适用场景：</p>\n<p>频繁查询，对存储空间要求不大，很少增加和删除的情况。</p>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<p>适用场景：</p>\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。</p>\n<p>适用场景：</p>\n<p>因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n<p>优点：</p>\n<ol>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变结点的指针域指向地址即可，所以添加，删除很快。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ol>\n<p>适用场景：</p>\n<p>数据量较小，需要频繁增加，删除操作的场景。</p>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p>\n<p>特点：</p>\n<ul>\n<li><p>每个节点有零个或多个子节点；</p>\n</li>\n<li><p>没有父节点的节点称为根节点；</p>\n</li>\n<li><p>每一个非根节点有且只有一个父节点；</p>\n</li>\n<li><p>除了根节点外，每个子节点可以分为多个不相交的子树。</p>\n</li>\n</ul>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li><p>每个结点最多有两颗子树，结点的度最大为2。</p>\n</li>\n<li><p>左子树和右子树是有顺序的，次序不能颠倒。</p>\n</li>\n<li><p>即使某结点只有一个子树，也要区分左右子树。</p>\n</li>\n</ul>\n<p>优点：</p>\n<p>既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<h3 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h3><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后将该数字对数组长度进行取余，取余结果当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫最大堆或大根堆，根节点最小的堆叫最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A0%86.png\" alt=\"img\"></p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>根据图的边是否有方向，可分为有向图和无向图。根据图的边是否有权重，可分为带权图和无权图。当然，也可以把两个维度结合起来描述，比如有向带权图，无向无权图等等。</p>\n"},{"title":"如何理解语义化","date":"2021-07-20T16:00:00.000Z","_content":"\n1. 用正确的标签做正确的事情；\n2. HTML 语义化让页面的内容结构化，结构更清晰，便于对浏览器，搜索引擎解析；\n\n3. 即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的；\n\n4. 搜索引擎的爬虫也依赖于 HTML 标记确定上下文和各个关键字的权重，利于 SEO;\n\n5. 使阅读源代码的人更容易将网站分块，便于阅读维护理解。\n","source":"_posts/如何理解语义化.md","raw":"---\ntitle: 如何理解语义化\n\ndate: 2021-07-21\n\ntags: [语义化]\n\ncategories: html\n---\n\n1. 用正确的标签做正确的事情；\n2. HTML 语义化让页面的内容结构化，结构更清晰，便于对浏览器，搜索引擎解析；\n\n3. 即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的；\n\n4. 搜索引擎的爬虫也依赖于 HTML 标记确定上下文和各个关键字的权重，利于 SEO;\n\n5. 使阅读源代码的人更容易将网站分块，便于阅读维护理解。\n","slug":"如何理解语义化","published":1,"updated":"2023-11-07T03:36:00.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz886001yu17u888fbtxn","content":"<ol>\n<li><p>用正确的标签做正确的事情；</p>\n</li>\n<li><p>HTML 语义化让页面的内容结构化，结构更清晰，便于对浏览器，搜索引擎解析；</p>\n</li>\n<li><p>即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的；</p>\n</li>\n<li><p>搜索引擎的爬虫也依赖于 HTML 标记确定上下文和各个关键字的权重，利于 SEO;</p>\n</li>\n<li><p>使阅读源代码的人更容易将网站分块，便于阅读维护理解。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>用正确的标签做正确的事情；</p>\n</li>\n<li><p>HTML 语义化让页面的内容结构化，结构更清晰，便于对浏览器，搜索引擎解析；</p>\n</li>\n<li><p>即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的；</p>\n</li>\n<li><p>搜索引擎的爬虫也依赖于 HTML 标记确定上下文和各个关键字的权重，利于 SEO;</p>\n</li>\n<li><p>使阅读源代码的人更容易将网站分块，便于阅读维护理解。</p>\n</li>\n</ol>\n"},{"title":"常见排序算法","date":"2021-07-17T16:00:00.000Z","_content":"\n### 冒泡排序\n\n```javascript\nfunction bubbleSort (arr) {\n    let length = arr.length\n    for(let i = 0; i < length; i++) {\n        for(let j = 0; j < length - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\n            }\n        }\n    }\n    return arr\n}\n```\n\n\n\n### 选择排序\n\n```javascript\nfunction selectSort (arr) {\n    let length = arr.length\n    for(let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (arr[j] < arr[i]) {\n                [arr[i], arr[j]] = [arr[j], arr[i]]\n            }\n        }\n    }\n    return arr\n}\n```\n\n\n\n### 快速排序\n\n```javascript\nfunction quickSort (arr) {\n    if (arr.length <= 1) { return arr }\n    let midIndex = Math.floor(arr.length / 2)\n    let midValue = arr.splice(midIndex, 1)\n    let left = []\n    let right = []\n    for (let i = 0; i< arr.length; i++) {\n        arr[i] < midValue ? left.push(arr[i]) : right.push(arr[i])\n    }\n    return quickSort(left).concat(midValue, quickSort(right))\n}\n```\n\n\n\n### 插入排序\n\n```javascript\nfunction insertionSort(arr) {\n    var length = arr.length;\n    var preIndex, current;\n    for(var i=1; i<length; i++){\n        preIndex = i-1;\n        current = arr[i];\n        while (preIndex>=0 && arr[preIndex]>current){\n            arr[preIndex+1] = arr[preIndex]\n            preIndex--\n        }\n        arr[preIndex+1] = current\n    }\n    return arr;\n}\n```\n","source":"_posts/常见排序算法.md","raw":"---\ntitle: 常见排序算法\n\ndate: 2021-07-18\n\ntags: [排序]\n\ncategories: 算法\n---\n\n### 冒泡排序\n\n```javascript\nfunction bubbleSort (arr) {\n    let length = arr.length\n    for(let i = 0; i < length; i++) {\n        for(let j = 0; j < length - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\n            }\n        }\n    }\n    return arr\n}\n```\n\n\n\n### 选择排序\n\n```javascript\nfunction selectSort (arr) {\n    let length = arr.length\n    for(let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if (arr[j] < arr[i]) {\n                [arr[i], arr[j]] = [arr[j], arr[i]]\n            }\n        }\n    }\n    return arr\n}\n```\n\n\n\n### 快速排序\n\n```javascript\nfunction quickSort (arr) {\n    if (arr.length <= 1) { return arr }\n    let midIndex = Math.floor(arr.length / 2)\n    let midValue = arr.splice(midIndex, 1)\n    let left = []\n    let right = []\n    for (let i = 0; i< arr.length; i++) {\n        arr[i] < midValue ? left.push(arr[i]) : right.push(arr[i])\n    }\n    return quickSort(left).concat(midValue, quickSort(right))\n}\n```\n\n\n\n### 插入排序\n\n```javascript\nfunction insertionSort(arr) {\n    var length = arr.length;\n    var preIndex, current;\n    for(var i=1; i<length; i++){\n        preIndex = i-1;\n        current = arr[i];\n        while (preIndex>=0 && arr[preIndex]>current){\n            arr[preIndex+1] = arr[preIndex]\n            preIndex--\n        }\n        arr[preIndex+1] = current\n    }\n    return arr;\n}\n```\n","slug":"常见排序算法","published":1,"updated":"2023-11-07T03:36:00.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz8870022u17u4w06b5kc","content":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                [arr[j], arr[j + <span class=\"number\">1</span>]] = [arr[j + <span class=\"number\">1</span>], arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">                [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span> arr &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midValue = arr.<span class=\"title function_\">splice</span>(midIndex, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] &lt; midValue ? left.<span class=\"title function_\">push</span>(arr[i]) : right.<span class=\"title function_\">push</span>(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">quickSort</span>(left).<span class=\"title function_\">concat</span>(midValue, <span class=\"title function_\">quickSort</span>(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        preIndex = i-<span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (preIndex&gt;=<span class=\"number\">0</span> &amp;&amp; arr[preIndex]&gt;current)&#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex]</span><br><span class=\"line\">            preIndex--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                [arr[j], arr[j + <span class=\"number\">1</span>]] = [arr[j + <span class=\"number\">1</span>], arr[j]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">                [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span> (arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span> arr &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midValue = arr.<span class=\"title function_\">splice</span>(midIndex, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] &lt; midValue ? left.<span class=\"title function_\">push</span>(arr[i]) : right.<span class=\"title function_\">push</span>(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">quickSort</span>(left).<span class=\"title function_\">concat</span>(midValue, <span class=\"title function_\">quickSort</span>(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        preIndex = i-<span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (preIndex&gt;=<span class=\"number\">0</span> &amp;&amp; arr[preIndex]&gt;current)&#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex]</span><br><span class=\"line\">            preIndex--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"引用文件夹下所有js","date":"2021-12-30T16:00:00.000Z","_content":"\n在index.js中export同级js文件中暴露的数据:\n\n```javascript\n// index.js \nconst hooks = {}\nconst context = require.context('./', false, /\\.js$/)\nconst keys = context.keys().filter(item => item !== './index.js')\nkeys.forEach(filePath => {\n    const file = context(filePath).default\n    Object.assign(hooks, { [file.name]: file })\n})\nexport default hooks\n```\n\n\n\n使用方式:\n\n``` javascript\nimport hooks from 'xxx/xxx/index.js' \nconst { xxx, xxx, xxx } = hooks\n```\n\n","source":"_posts/引用文件夹下所有js.md","raw":"---\ntitle: 引用文件夹下所有js\n\ndate: 2021-12-31\n\ntags: [import]\n\ncategories: javascript\n---\n\n在index.js中export同级js文件中暴露的数据:\n\n```javascript\n// index.js \nconst hooks = {}\nconst context = require.context('./', false, /\\.js$/)\nconst keys = context.keys().filter(item => item !== './index.js')\nkeys.forEach(filePath => {\n    const file = context(filePath).default\n    Object.assign(hooks, { [file.name]: file })\n})\nexport default hooks\n```\n\n\n\n使用方式:\n\n``` javascript\nimport hooks from 'xxx/xxx/index.js' \nconst { xxx, xxx, xxx } = hooks\n```\n\n","slug":"引用文件夹下所有js","published":1,"updated":"2023-11-07T03:36:00.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz8880025u17u6ugs044j","content":"<p>在index.js中export同级js文件中暴露的数据:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hooks = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&#x27;./&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = context.<span class=\"title function_\">keys</span>().<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== <span class=\"string\">&#x27;./index.js&#x27;</span>)</span><br><span class=\"line\">keys.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">filePath</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"title function_\">context</span>(filePath).<span class=\"property\">default</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(hooks, &#123; [file.<span class=\"property\">name</span>]: file &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hooks</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hooks <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx/xxx/index.js&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xxx, xxx, xxx &#125; = hooks</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在index.js中export同级js文件中暴露的数据:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hooks = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&#x27;./&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = context.<span class=\"title function_\">keys</span>().<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== <span class=\"string\">&#x27;./index.js&#x27;</span>)</span><br><span class=\"line\">keys.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">filePath</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"title function_\">context</span>(filePath).<span class=\"property\">default</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(hooks, &#123; [file.<span class=\"property\">name</span>]: file &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hooks</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hooks <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xxx/xxx/index.js&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xxx, xxx, xxx &#125; = hooks</span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个Plugin","date":"2021-08-19T16:00:00.000Z","_content":"\n### 1.配置文件中使用插件\n\nwebpack.config.js\n\n``` javascript\nconst CopyWebpackPlugin = require('./plugins/CopyWebpackPlugin.js')\nmodule.exports = {\n  ...\n  plugins: [\n    new CopyWebpackPlugin({\n      from: 'public',\n      to: '',\n      /**\n       * '**'可以匹配任意数量的字符，包括/\n       * 因为ignore是作为参数传给globby，所以规则在globby中定义\n       */ \n      ignore: '**/index.html'\n    }),\n  ],\n  ...\n}\n\n```\n\n\n\n### 2.plugin文件 \n\nCopyWebpackPlugin.js：将静态文件打包到dist目录\n\n``` javascript\nconst globby = require('globby')\nconst path = require('path')\nconst fs = require('fs')\nconst util = require('util')\nconst webpack = require('webpack')\n\n// 将文件资源转化成webpack compilation可以识别的格式\nconst { RawSource } = webpack.sources\n// 将读取文件函数基于Promise再次封装\nconst readFilePromise = util.promisify(fs.readFile)\n\n// 插件都是一个类\nclass CopyWebpackPlugin {\n    constructor (options) {\n        // 从构造函数参数中获取webpack.config.js中的配置\n        // options: '{ from: 'public', to: '', ignore: '**/index.html' }'\n        this.options = options\n    }\n\n    /**\n     * apply函数中根据需求在合适的生命周期注册回调函数\n     * 函数接收的参数是一个Compiler实例，Compiler扩展自Tapable。\n     * \n     * Tapable实现了发布订阅模式:\n     * 1.实例属性hooks是一个对象，key为事件名称， value可以指定该事件数组的执行方式（同步并行/异步并行/...）；\n     * 2.使用tap/tapAsync/tapPromise往hooks里的事件注册回调；\n     * 3.使用call/callAsync/promise触发hooks里的事件。\n     * \n     * 在webpack中Tapable创建了各种钩子，插件将自己的方法注册到对应的钩子上，\n     * 相当于往实例的hooks里的事件注册回调，交给webpcak，\n     * webpack编译时，不同的生命周期触发不同的事件。\n     */\n    apply (compiler) {\n        /**\n         * thisCompilation钩子：\n         * 生命周期：初始化compilation时调用，在触发compilation事件之前调用\n         * 事件数组执行方式：SyncHook 串行同步，出没出错都往下执行\n         * 回调参数：compilation，compilationParams\n         */\n        compiler.hooks.thisCompilation.tap('CopyWebpackPlugin', (compilation) => {\n            /**\n             * Compilation模块会被Compiler用来创建新的编译（或新的构建）\n             * compilation实例的additionalAssets钩子：\n             * 生命周期：可以为compilation创建额外asset\n             * 事件数组执行方式：AsyncSeriesHook 串行异步\n             * cb: 调用表示任务完成\n             */\n            compilation.hooks.additionalAssets.tapAsync('CopyWebpackPlugin', async callback => {\n                const { from, to = '', ignore } = this.options || {}\n\n                // 筛选需要拷贝的所有文件的绝对路径\n                const absoluteFromPath = path.resolve(compiler.options.context, from)\n                /**\n                 * globby函数第一个参数是匹配的绝对路径，第二个参数是配置对象。\n                 * 下面配置了ignore属性，设置可以忽略的文件\n                 */\n                const paths = await globby(absoluteFromPath, { ignore })\n                console.log(absoluteFromPath)\n\n                // 判断文件分类，先简单分为三类：js、css、images \n                const judgeType = (path) => {\n                    let middle = ''\n                    if (/\\.js$/.test(path)) {\n                        middle = 'js'\n                    } else if (/\\.css$/.test(path)) {\n                        middle = 'css'\n                    } else if (/\\w(\\.gif|\\.jpeg|\\.png|\\.jpg|\\.bmp)/i.test(path)) {\n                        middle = 'image'\n                    }\n                    return middle\n                }\n\n                try {\n                    const files = await Promise.all(\n                        // 遍历文件内容\n                        paths.map(async absolutePath => {\n                            // 获取文件内容\n                            const source = await readFilePromise(absolutePath)\n                            // 文件名称：webpack.config.js中配置的to + 文件分类 + 获取path的最后一部分\n                            const baseName = path.basename(absolutePath)\n                            const fileName = path.join(to, judgeType(absolutePath), baseName )\n                            // 将资源转成compilation可识别的格式\n                            const rawSource = new RawSource(source)\n                            // 输出文件\n                            compilation.emitAsset(fileName, rawSource)\n                        })\n                    )\n                    // 成功回调\n                    callback()\n                } catch {\n                    // 抛出异常\n                    callback(new Error('[CopyWebpackPlugin] loading error'))\n                } \n            })\n        })\n    }\n}\n\nmodule.exports = CopyWebpackPlugin\n```\n\n\n\n###  3.调试技巧\n\n1. Package.json: 配置执行脚本\n\n``` javascript\n \"scripts\": {\n    ...\n    \"debug\": \"node --inspect-brk ./node_modules/webpack/bin/webpack.js --mode development\"\n    ...\n  },\n```\n\n\n\n2. CopyWebpackPlugin.js: 在需要断点的地方添加debugger\n\n``` javascript\n compiler.hooks.thisCompilation.tap('CopyWebpackPlugin', (compilation) => {\n     debugger\n     console.log(compilation)\n     ...\n })\n```\n\n\n\n3. 控制台执行\n\n``` shell\nnpm run debug\n```\n\n\n\n4. 打开网页:  https://nodejs.org/en/docs/inspector\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/node_debug.png)\n\n\n\n5. 开始调试\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/debugger.png)\n","source":"_posts/手写一个PLugin.md","raw":"---\ntitle: 手写一个Plugin\n\ndate: 2021-08-20\n\ntags: [plugin]\n\ncategories: webpack\n---\n\n### 1.配置文件中使用插件\n\nwebpack.config.js\n\n``` javascript\nconst CopyWebpackPlugin = require('./plugins/CopyWebpackPlugin.js')\nmodule.exports = {\n  ...\n  plugins: [\n    new CopyWebpackPlugin({\n      from: 'public',\n      to: '',\n      /**\n       * '**'可以匹配任意数量的字符，包括/\n       * 因为ignore是作为参数传给globby，所以规则在globby中定义\n       */ \n      ignore: '**/index.html'\n    }),\n  ],\n  ...\n}\n\n```\n\n\n\n### 2.plugin文件 \n\nCopyWebpackPlugin.js：将静态文件打包到dist目录\n\n``` javascript\nconst globby = require('globby')\nconst path = require('path')\nconst fs = require('fs')\nconst util = require('util')\nconst webpack = require('webpack')\n\n// 将文件资源转化成webpack compilation可以识别的格式\nconst { RawSource } = webpack.sources\n// 将读取文件函数基于Promise再次封装\nconst readFilePromise = util.promisify(fs.readFile)\n\n// 插件都是一个类\nclass CopyWebpackPlugin {\n    constructor (options) {\n        // 从构造函数参数中获取webpack.config.js中的配置\n        // options: '{ from: 'public', to: '', ignore: '**/index.html' }'\n        this.options = options\n    }\n\n    /**\n     * apply函数中根据需求在合适的生命周期注册回调函数\n     * 函数接收的参数是一个Compiler实例，Compiler扩展自Tapable。\n     * \n     * Tapable实现了发布订阅模式:\n     * 1.实例属性hooks是一个对象，key为事件名称， value可以指定该事件数组的执行方式（同步并行/异步并行/...）；\n     * 2.使用tap/tapAsync/tapPromise往hooks里的事件注册回调；\n     * 3.使用call/callAsync/promise触发hooks里的事件。\n     * \n     * 在webpack中Tapable创建了各种钩子，插件将自己的方法注册到对应的钩子上，\n     * 相当于往实例的hooks里的事件注册回调，交给webpcak，\n     * webpack编译时，不同的生命周期触发不同的事件。\n     */\n    apply (compiler) {\n        /**\n         * thisCompilation钩子：\n         * 生命周期：初始化compilation时调用，在触发compilation事件之前调用\n         * 事件数组执行方式：SyncHook 串行同步，出没出错都往下执行\n         * 回调参数：compilation，compilationParams\n         */\n        compiler.hooks.thisCompilation.tap('CopyWebpackPlugin', (compilation) => {\n            /**\n             * Compilation模块会被Compiler用来创建新的编译（或新的构建）\n             * compilation实例的additionalAssets钩子：\n             * 生命周期：可以为compilation创建额外asset\n             * 事件数组执行方式：AsyncSeriesHook 串行异步\n             * cb: 调用表示任务完成\n             */\n            compilation.hooks.additionalAssets.tapAsync('CopyWebpackPlugin', async callback => {\n                const { from, to = '', ignore } = this.options || {}\n\n                // 筛选需要拷贝的所有文件的绝对路径\n                const absoluteFromPath = path.resolve(compiler.options.context, from)\n                /**\n                 * globby函数第一个参数是匹配的绝对路径，第二个参数是配置对象。\n                 * 下面配置了ignore属性，设置可以忽略的文件\n                 */\n                const paths = await globby(absoluteFromPath, { ignore })\n                console.log(absoluteFromPath)\n\n                // 判断文件分类，先简单分为三类：js、css、images \n                const judgeType = (path) => {\n                    let middle = ''\n                    if (/\\.js$/.test(path)) {\n                        middle = 'js'\n                    } else if (/\\.css$/.test(path)) {\n                        middle = 'css'\n                    } else if (/\\w(\\.gif|\\.jpeg|\\.png|\\.jpg|\\.bmp)/i.test(path)) {\n                        middle = 'image'\n                    }\n                    return middle\n                }\n\n                try {\n                    const files = await Promise.all(\n                        // 遍历文件内容\n                        paths.map(async absolutePath => {\n                            // 获取文件内容\n                            const source = await readFilePromise(absolutePath)\n                            // 文件名称：webpack.config.js中配置的to + 文件分类 + 获取path的最后一部分\n                            const baseName = path.basename(absolutePath)\n                            const fileName = path.join(to, judgeType(absolutePath), baseName )\n                            // 将资源转成compilation可识别的格式\n                            const rawSource = new RawSource(source)\n                            // 输出文件\n                            compilation.emitAsset(fileName, rawSource)\n                        })\n                    )\n                    // 成功回调\n                    callback()\n                } catch {\n                    // 抛出异常\n                    callback(new Error('[CopyWebpackPlugin] loading error'))\n                } \n            })\n        })\n    }\n}\n\nmodule.exports = CopyWebpackPlugin\n```\n\n\n\n###  3.调试技巧\n\n1. Package.json: 配置执行脚本\n\n``` javascript\n \"scripts\": {\n    ...\n    \"debug\": \"node --inspect-brk ./node_modules/webpack/bin/webpack.js --mode development\"\n    ...\n  },\n```\n\n\n\n2. CopyWebpackPlugin.js: 在需要断点的地方添加debugger\n\n``` javascript\n compiler.hooks.thisCompilation.tap('CopyWebpackPlugin', (compilation) => {\n     debugger\n     console.log(compilation)\n     ...\n })\n```\n\n\n\n3. 控制台执行\n\n``` shell\nnpm run debug\n```\n\n\n\n4. 打开网页:  https://nodejs.org/en/docs/inspector\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/node_debug.png)\n\n\n\n5. 开始调试\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/debugger.png)\n","slug":"手写一个PLugin","published":1,"updated":"2023-11-07T03:36:00.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz8890029u17uewyzd3fv","content":"<h3 id=\"1-配置文件中使用插件\"><a href=\"#1-配置文件中使用插件\" class=\"headerlink\" title=\"1.配置文件中使用插件\"></a>1.配置文件中使用插件</h3><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CopyWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/CopyWebpackPlugin.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CopyWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">from</span>: <span class=\"string\">&#x27;public&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">to</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * &#x27;**&#x27;可以匹配任意数量的字符，包括/</span></span><br><span class=\"line\"><span class=\"comment\">       * 因为ignore是作为参数传给globby，所以规则在globby中定义</span></span><br><span class=\"line\"><span class=\"comment\">       */</span> </span><br><span class=\"line\">      <span class=\"attr\">ignore</span>: <span class=\"string\">&#x27;**/index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-plugin文件\"><a href=\"#2-plugin文件\" class=\"headerlink\" title=\"2.plugin文件\"></a>2.plugin文件</h3><p>CopyWebpackPlugin.js：将静态文件打包到dist目录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globby = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;globby&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将文件资源转化成webpack compilation可以识别的格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">RawSource</span> &#125; = webpack.<span class=\"property\">sources</span></span><br><span class=\"line\"><span class=\"comment\">// 将读取文件函数基于Promise再次封装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFilePromise = util.<span class=\"title function_\">promisify</span>(fs.<span class=\"property\">readFile</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件都是一个类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CopyWebpackPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (options) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从构造函数参数中获取webpack.config.js中的配置</span></span><br><span class=\"line\">        <span class=\"comment\">// options: &#x27;&#123; from: &#x27;public&#x27;, to: &#x27;&#x27;, ignore: &#x27;**/index.html&#x27; &#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * apply函数中根据需求在合适的生命周期注册回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数接收的参数是一个Compiler实例，Compiler扩展自Tapable。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * Tapable实现了发布订阅模式:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.实例属性hooks是一个对象，key为事件名称， value可以指定该事件数组的执行方式（同步并行/异步并行/...）；</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.使用tap/tapAsync/tapPromise往hooks里的事件注册回调；</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.使用call/callAsync/promise触发hooks里的事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 在webpack中Tapable创建了各种钩子，插件将自己的方法注册到对应的钩子上，</span></span><br><span class=\"line\"><span class=\"comment\">     * 相当于往实例的hooks里的事件注册回调，交给webpcak，</span></span><br><span class=\"line\"><span class=\"comment\">     * webpack编译时，不同的生命周期触发不同的事件。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * thisCompilation钩子：</span></span><br><span class=\"line\"><span class=\"comment\">         * 生命周期：初始化compilation时调用，在触发compilation事件之前调用</span></span><br><span class=\"line\"><span class=\"comment\">         * 事件数组执行方式：SyncHook 串行同步，出没出错都往下执行</span></span><br><span class=\"line\"><span class=\"comment\">         * 回调参数：compilation，compilationParams</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">thisCompilation</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Compilation模块会被Compiler用来创建新的编译（或新的构建）</span></span><br><span class=\"line\"><span class=\"comment\">             * compilation实例的additionalAssets钩子：</span></span><br><span class=\"line\"><span class=\"comment\">             * 生命周期：可以为compilation创建额外asset</span></span><br><span class=\"line\"><span class=\"comment\">             * 事件数组执行方式：AsyncSeriesHook 串行异步</span></span><br><span class=\"line\"><span class=\"comment\">             * cb: 调用表示任务完成</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            compilation.<span class=\"property\">hooks</span>.<span class=\"property\">additionalAssets</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"keyword\">async</span> callback =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">from</span>, to = <span class=\"string\">&#x27;&#x27;</span>, ignore &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 筛选需要拷贝的所有文件的绝对路径</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> absoluteFromPath = path.<span class=\"title function_\">resolve</span>(compiler.<span class=\"property\">options</span>.<span class=\"property\">context</span>, <span class=\"keyword\">from</span>)</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * globby函数第一个参数是匹配的绝对路径，第二个参数是配置对象。</span></span><br><span class=\"line\"><span class=\"comment\">                 * 下面配置了ignore属性，设置可以忽略的文件</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> paths = <span class=\"keyword\">await</span> <span class=\"title function_\">globby</span>(absoluteFromPath, &#123; ignore &#125;)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(absoluteFromPath)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 判断文件分类，先简单分为三类：js、css、images </span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"title function_\">judgeType</span> = (<span class=\"params\">path</span>) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> middle = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\.js$/</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;js&#x27;</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\.css$/</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;css&#x27;</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\w(\\.gif|\\.jpeg|\\.png|\\.jpg|\\.bmp)/i</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;image&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> files = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">                        <span class=\"comment\">// 遍历文件内容</span></span><br><span class=\"line\">                        paths.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> absolutePath =&gt; &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 获取文件内容</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> source = <span class=\"keyword\">await</span> <span class=\"title function_\">readFilePromise</span>(absolutePath)</span><br><span class=\"line\">                            <span class=\"comment\">// 文件名称：webpack.config.js中配置的to + 文件分类 + 获取path的最后一部分</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> baseName = path.<span class=\"title function_\">basename</span>(absolutePath)</span><br><span class=\"line\">                            <span class=\"keyword\">const</span> fileName = path.<span class=\"title function_\">join</span>(to, <span class=\"title function_\">judgeType</span>(absolutePath), baseName )</span><br><span class=\"line\">                            <span class=\"comment\">// 将资源转成compilation可识别的格式</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> rawSource = <span class=\"keyword\">new</span> <span class=\"title class_\">RawSource</span>(source)</span><br><span class=\"line\">                            <span class=\"comment\">// 输出文件</span></span><br><span class=\"line\">                            compilation.<span class=\"title function_\">emitAsset</span>(fileName, rawSource)</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    <span class=\"comment\">// 成功回调</span></span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;[CopyWebpackPlugin] loading error&#x27;</span>))</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">CopyWebpackPlugin</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-调试技巧\"><a href=\"#3-调试技巧\" class=\"headerlink\" title=\"3.调试技巧\"></a>3.调试技巧</h3><ol>\n<li>Package.json: 配置执行脚本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   <span class=\"string\">&quot;debug&quot;</span>: <span class=\"string\">&quot;node --inspect-brk ./node_modules/webpack/bin/webpack.js --mode development&quot;</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>CopyWebpackPlugin.js: 在需要断点的地方添加debugger</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">thisCompilation</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(compilation)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>控制台执行</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run debug</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>打开网页:  <a href=\"https://nodejs.org/en/docs/inspector\">https://nodejs.org/en/docs/inspector</a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/node_debug.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>开始调试</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/debugger.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-配置文件中使用插件\"><a href=\"#1-配置文件中使用插件\" class=\"headerlink\" title=\"1.配置文件中使用插件\"></a>1.配置文件中使用插件</h3><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CopyWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/CopyWebpackPlugin.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CopyWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">from</span>: <span class=\"string\">&#x27;public&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">to</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * &#x27;**&#x27;可以匹配任意数量的字符，包括/</span></span><br><span class=\"line\"><span class=\"comment\">       * 因为ignore是作为参数传给globby，所以规则在globby中定义</span></span><br><span class=\"line\"><span class=\"comment\">       */</span> </span><br><span class=\"line\">      <span class=\"attr\">ignore</span>: <span class=\"string\">&#x27;**/index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-plugin文件\"><a href=\"#2-plugin文件\" class=\"headerlink\" title=\"2.plugin文件\"></a>2.plugin文件</h3><p>CopyWebpackPlugin.js：将静态文件打包到dist目录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globby = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;globby&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将文件资源转化成webpack compilation可以识别的格式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">RawSource</span> &#125; = webpack.<span class=\"property\">sources</span></span><br><span class=\"line\"><span class=\"comment\">// 将读取文件函数基于Promise再次封装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFilePromise = util.<span class=\"title function_\">promisify</span>(fs.<span class=\"property\">readFile</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件都是一个类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CopyWebpackPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (options) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从构造函数参数中获取webpack.config.js中的配置</span></span><br><span class=\"line\">        <span class=\"comment\">// options: &#x27;&#123; from: &#x27;public&#x27;, to: &#x27;&#x27;, ignore: &#x27;**/index.html&#x27; &#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * apply函数中根据需求在合适的生命周期注册回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数接收的参数是一个Compiler实例，Compiler扩展自Tapable。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * Tapable实现了发布订阅模式:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.实例属性hooks是一个对象，key为事件名称， value可以指定该事件数组的执行方式（同步并行/异步并行/...）；</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.使用tap/tapAsync/tapPromise往hooks里的事件注册回调；</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.使用call/callAsync/promise触发hooks里的事件。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 在webpack中Tapable创建了各种钩子，插件将自己的方法注册到对应的钩子上，</span></span><br><span class=\"line\"><span class=\"comment\">     * 相当于往实例的hooks里的事件注册回调，交给webpcak，</span></span><br><span class=\"line\"><span class=\"comment\">     * webpack编译时，不同的生命周期触发不同的事件。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    apply (compiler) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * thisCompilation钩子：</span></span><br><span class=\"line\"><span class=\"comment\">         * 生命周期：初始化compilation时调用，在触发compilation事件之前调用</span></span><br><span class=\"line\"><span class=\"comment\">         * 事件数组执行方式：SyncHook 串行同步，出没出错都往下执行</span></span><br><span class=\"line\"><span class=\"comment\">         * 回调参数：compilation，compilationParams</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compiler.<span class=\"property\">hooks</span>.<span class=\"property\">thisCompilation</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Compilation模块会被Compiler用来创建新的编译（或新的构建）</span></span><br><span class=\"line\"><span class=\"comment\">             * compilation实例的additionalAssets钩子：</span></span><br><span class=\"line\"><span class=\"comment\">             * 生命周期：可以为compilation创建额外asset</span></span><br><span class=\"line\"><span class=\"comment\">             * 事件数组执行方式：AsyncSeriesHook 串行异步</span></span><br><span class=\"line\"><span class=\"comment\">             * cb: 调用表示任务完成</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            compilation.<span class=\"property\">hooks</span>.<span class=\"property\">additionalAssets</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"keyword\">async</span> callback =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">from</span>, to = <span class=\"string\">&#x27;&#x27;</span>, ignore &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 筛选需要拷贝的所有文件的绝对路径</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> absoluteFromPath = path.<span class=\"title function_\">resolve</span>(compiler.<span class=\"property\">options</span>.<span class=\"property\">context</span>, <span class=\"keyword\">from</span>)</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * globby函数第一个参数是匹配的绝对路径，第二个参数是配置对象。</span></span><br><span class=\"line\"><span class=\"comment\">                 * 下面配置了ignore属性，设置可以忽略的文件</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> paths = <span class=\"keyword\">await</span> <span class=\"title function_\">globby</span>(absoluteFromPath, &#123; ignore &#125;)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(absoluteFromPath)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 判断文件分类，先简单分为三类：js、css、images </span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"title function_\">judgeType</span> = (<span class=\"params\">path</span>) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> middle = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\.js$/</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;js&#x27;</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\.css$/</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;css&#x27;</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\w(\\.gif|\\.jpeg|\\.png|\\.jpg|\\.bmp)/i</span>.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">                        middle = <span class=\"string\">&#x27;image&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> files = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">                        <span class=\"comment\">// 遍历文件内容</span></span><br><span class=\"line\">                        paths.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> absolutePath =&gt; &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 获取文件内容</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> source = <span class=\"keyword\">await</span> <span class=\"title function_\">readFilePromise</span>(absolutePath)</span><br><span class=\"line\">                            <span class=\"comment\">// 文件名称：webpack.config.js中配置的to + 文件分类 + 获取path的最后一部分</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> baseName = path.<span class=\"title function_\">basename</span>(absolutePath)</span><br><span class=\"line\">                            <span class=\"keyword\">const</span> fileName = path.<span class=\"title function_\">join</span>(to, <span class=\"title function_\">judgeType</span>(absolutePath), baseName )</span><br><span class=\"line\">                            <span class=\"comment\">// 将资源转成compilation可识别的格式</span></span><br><span class=\"line\">                            <span class=\"keyword\">const</span> rawSource = <span class=\"keyword\">new</span> <span class=\"title class_\">RawSource</span>(source)</span><br><span class=\"line\">                            <span class=\"comment\">// 输出文件</span></span><br><span class=\"line\">                            compilation.<span class=\"title function_\">emitAsset</span>(fileName, rawSource)</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    <span class=\"comment\">// 成功回调</span></span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;[CopyWebpackPlugin] loading error&#x27;</span>))</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">CopyWebpackPlugin</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-调试技巧\"><a href=\"#3-调试技巧\" class=\"headerlink\" title=\"3.调试技巧\"></a>3.调试技巧</h3><ol>\n<li>Package.json: 配置执行脚本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   <span class=\"string\">&quot;debug&quot;</span>: <span class=\"string\">&quot;node --inspect-brk ./node_modules/webpack/bin/webpack.js --mode development&quot;</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>CopyWebpackPlugin.js: 在需要断点的地方添加debugger</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compiler.<span class=\"property\">hooks</span>.<span class=\"property\">thisCompilation</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&#x27;CopyWebpackPlugin&#x27;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(compilation)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>控制台执行</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run debug</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>打开网页:  <a href=\"https://nodejs.org/en/docs/inspector\">https://nodejs.org/en/docs/inspector</a></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/node_debug.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>开始调试</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/debugger.png\" alt=\"img\"></p>\n"},{"title":"手写一个Promise","date":"2021-08-10T16:00:00.000Z","_content":"\n```javascript\nclass Promise {\n    constructor (execute) {\n        /**\n         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。\n         *  状态改变方式（2种）：1.pending -> fulfilled; 2.pending -> fulfilled。\n         *  注意：一旦状态改变，不可逆。\n         */\n        this.PromiseState = 'pending'\n        // Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。\n        this.PromiseResult = null\n        /**\n         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，\n         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。\n         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。\n         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，\n         * \b\b数组的每一项都是一个对象：{ onResolve: 成功回调, onReject: 失败回调 }。\n         */\n        this.callBacks = []\n\n        /**\n         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> fulfilled；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const resolve = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'fulfilled'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onResolve())}, 0)\n        }\n\n        /**\n         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> rejected；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const reject = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'rejected'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onReject())}, 0)\n        }\n\n        // 用try...catch...来处理执行函数运行抛出错误\n        try {\n            execute(resolve, reject)\n        } catch (e) {\n            reject(e)\n        }\n    }\n\n    then (onResolve, onReject) {\n        /**\n         * then方法主要做的事情有四个：\n         * 1.接收两个函数作为参数，分别是成功回调和失败回调；\n         * 2.返回一个新的Promise实例，可以链式调用；\n         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；\n         * 4.回调函数返回值不同，分三种情况：\n         *   *抛出异常，状态为失败，结果为失败返回的拒因；\n         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；\n         *   *返回结果是Promise实例，返回为这个Promise的结果。\n         */\n\n        /**\n         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。\n         */\n        onResolve = typeof onResolve === 'function' ? onResolve : res => res\n\n         /**\n         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是抛出错误原因，实现异常穿透。\n         */\n        onReject = typeof onReject === 'function' ? onReject : err => { throw err } \n        \n        return new Promise((resolve, reject) => {\n            /**\n             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值\n             */\n            const handle = (cbType) => {\n                // 使用try...catch...来捕获成功回调函数执行中的异常\n                try {\n                    // 执行成功回调，获取then方法成功回调的返回结果。\n                    const res = cbType(this.PromiseResult)\n                    if (res instanceof Promise) {\n                        res.then(resolve, reject)\n                    } else {\n                        resolve(res)\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            }\n\n            switch (this.PromiseState) {\n                // Promise实例的执行函数是同步的，状态为fulfilled。\n                case 'fulfilled':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onResolve) })\n                    break;\n                // Promise实例的执行函数是同步的，状态为rejected。\n                case 'rejected':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onReject) })\n                    break;\n                // Promise实例的执行函数是异步的，状态为pending。\n                default:\n                    // 往回调里面添加成功回调和失败回调\n                    this.callBacks.push({\n                        /**\n                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数\n                         */\n                        onResolve: () => handle(onResolve),\n                        onReject: () => handle(onReject)\n                    })\n            }\n        })\n    }\n\n    catch (onReject) {\n        // 只需要调用then方法，成功回调传空即可\n        return this.then(null, onReject)\n    }\n\n    static resolve (value) {\n        /**\n         * 返回结果为Promise实例，有两种情况：\n         * 1.参数是Promise实例，返回为这个Promise的结果；\n         * 2.参数不是Promise实例，状态为成功，结果为参数。\n         */\n        return new Promise((resolve, reject) => {\n            if (value instanceof Promise) {\n                value.then(resolve, reject)\n            } else {\n                resolve(value)\n            }\n        })\n    }\n\n    static reject (value) {\n        /**\n         * 返回结果为Promise实例，状态为失败，结果为参数\n         */\n        return new Promise((resolve, reject) => {\n            reject(value)\n        })\n    }\n\n    static all (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回结果有两种情况：\n         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；\n         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。\n         */\n         return new Promise((resolve, reject) => {\n            let count = 0\n            const values = new Array(promises.length)\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    count++\n                    values[i] = res\n                    console.log('count', count)\n                    if (count === promises.length) {\n                        resolve(values)\n                    }\n                }, err => {\n                    reject(err)\n                })\n            }\n        }) \n    }\n\n    static race (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回一个Promise实例，结果由第一个完成的Promise实例决定\n         */\n         return new Promise((resolve, reject) => {\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    resolve(res)\n                }, err => {\n                    reject(err)\n                })\n            }\n        })\n    }\n}\n\nexport default Promise\n```\n\n","source":"_posts/手写一个Promise.md","raw":"---\ntitle: 手写一个Promise\n\ndate: 2021-08-11\n\ntags: [Promise]\n\ncategories: javascript\n---\n\n```javascript\nclass Promise {\n    constructor (execute) {\n        /**\n         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。\n         *  状态改变方式（2种）：1.pending -> fulfilled; 2.pending -> fulfilled。\n         *  注意：一旦状态改变，不可逆。\n         */\n        this.PromiseState = 'pending'\n        // Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。\n        this.PromiseResult = null\n        /**\n         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，\n         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。\n         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。\n         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，\n         * \b\b数组的每一项都是一个对象：{ onResolve: 成功回调, onReject: 失败回调 }。\n         */\n        this.callBacks = []\n\n        /**\n         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> fulfilled；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const resolve = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'fulfilled'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onResolve())}, 0)\n        }\n\n        /**\n         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数\n         * 执行函数里的内置方法，主要作用有三个：\n         * 1.改变Promise实例状态： pending -> rejected；\n         * 2.改变Promise实例结果： this.PromiseState = data；\n         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。\n         */\n        const reject = (data) => {\n            if (this.PromiseState !== 'pending') return\n            this.PromiseState = 'rejected'\n            this.PromiseResult = data\n            // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n            setTimeout(() => { this.callBacks.forEach(item => item.onReject())}, 0)\n        }\n\n        // 用try...catch...来处理执行函数运行抛出错误\n        try {\n            execute(resolve, reject)\n        } catch (e) {\n            reject(e)\n        }\n    }\n\n    then (onResolve, onReject) {\n        /**\n         * then方法主要做的事情有四个：\n         * 1.接收两个函数作为参数，分别是成功回调和失败回调；\n         * 2.返回一个新的Promise实例，可以链式调用；\n         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；\n         * 4.回调函数返回值不同，分三种情况：\n         *   *抛出异常，状态为失败，结果为失败返回的拒因；\n         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；\n         *   *返回结果是Promise实例，返回为这个Promise的结果。\n         */\n\n        /**\n         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。\n         */\n        onResolve = typeof onResolve === 'function' ? onResolve : res => res\n\n         /**\n         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，\n         * 这个函数做的事情就是抛出错误原因，实现异常穿透。\n         */\n        onReject = typeof onReject === 'function' ? onReject : err => { throw err } \n        \n        return new Promise((resolve, reject) => {\n            /**\n             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值\n             */\n            const handle = (cbType) => {\n                // 使用try...catch...来捕获成功回调函数执行中的异常\n                try {\n                    // 执行成功回调，获取then方法成功回调的返回结果。\n                    const res = cbType(this.PromiseResult)\n                    if (res instanceof Promise) {\n                        res.then(resolve, reject)\n                    } else {\n                        resolve(res)\n                    }\n                } catch (e) {\n                    reject(e)\n                }\n            }\n\n            switch (this.PromiseState) {\n                // Promise实例的执行函数是同步的，状态为fulfilled。\n                case 'fulfilled':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onResolve) })\n                    break;\n                // Promise实例的执行函数是同步的，状态为rejected。\n                case 'rejected':\n                    // Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。\n                    setTimeout(() => { handle(onReject) })\n                    break;\n                // Promise实例的执行函数是异步的，状态为pending。\n                default:\n                    // 往回调里面添加成功回调和失败回调\n                    this.callBacks.push({\n                        /**\n                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数\n                         */\n                        onResolve: () => handle(onResolve),\n                        onReject: () => handle(onReject)\n                    })\n            }\n        })\n    }\n\n    catch (onReject) {\n        // 只需要调用then方法，成功回调传空即可\n        return this.then(null, onReject)\n    }\n\n    static resolve (value) {\n        /**\n         * 返回结果为Promise实例，有两种情况：\n         * 1.参数是Promise实例，返回为这个Promise的结果；\n         * 2.参数不是Promise实例，状态为成功，结果为参数。\n         */\n        return new Promise((resolve, reject) => {\n            if (value instanceof Promise) {\n                value.then(resolve, reject)\n            } else {\n                resolve(value)\n            }\n        })\n    }\n\n    static reject (value) {\n        /**\n         * 返回结果为Promise实例，状态为失败，结果为参数\n         */\n        return new Promise((resolve, reject) => {\n            reject(value)\n        })\n    }\n\n    static all (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回结果有两种情况：\n         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；\n         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。\n         */\n         return new Promise((resolve, reject) => {\n            let count = 0\n            const values = new Array(promises.length)\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    count++\n                    values[i] = res\n                    console.log('count', count)\n                    if (count === promises.length) {\n                        resolve(values)\n                    }\n                }, err => {\n                    reject(err)\n                })\n            }\n        }) \n    }\n\n    static race (promises) {\n        /**\n         * 接收的参数为一个由Promise实例组成的数组\n         * 返回一个Promise实例，结果由第一个完成的Promise实例决定\n         */\n         return new Promise((resolve, reject) => {\n            for (let i = 0; i < promises.length; i++) {\n                Promise.resolve(promises[i]).then(res => {\n                    resolve(res)\n                }, err => {\n                    reject(err)\n                })\n            }\n        })\n    }\n}\n\nexport default Promise\n```\n\n","slug":"手写一个Promise","published":1,"updated":"2023-11-07T03:36:00.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88a002cu17ubmpe2vow","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (execute) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。</span></span><br><span class=\"line\"><span class=\"comment\">         *  状态改变方式（2种）：1.pending -&gt; fulfilled; 2.pending -&gt; fulfilled。</span></span><br><span class=\"line\"><span class=\"comment\">         *  注意：一旦状态改变，不可逆。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，</span></span><br><span class=\"line\"><span class=\"comment\">         * \b\b数组的每一项都是一个对象：&#123; onResolve: 成功回调, onReject: 失败回调 &#125;。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; fulfilled；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">onResolve</span>())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; rejected；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">onReject</span>())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用try...catch...来处理执行函数运行抛出错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">execute</span>(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then (onResolve, onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法主要做的事情有四个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.接收两个函数作为参数，分别是成功回调和失败回调；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.返回一个新的Promise实例，可以链式调用；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.回调函数返回值不同，分三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         *   *抛出异常，状态为失败，结果为失败返回的拒因；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果是Promise实例，返回为这个Promise的结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onResolve = <span class=\"keyword\">typeof</span> onResolve === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是抛出错误原因，实现异常穿透。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onReject = <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title function_\">handle</span> = (<span class=\"params\">cbType</span>) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 使用try...catch...来捕获成功回调函数执行中的异常</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行成功回调，获取then方法成功回调的返回结果。</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> res = <span class=\"title function_\">cbType</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                        res.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为fulfilled。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;fulfilled&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"title function_\">handle</span>(onResolve) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为rejected。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;rejected&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"title function_\">handle</span>(onReject) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是异步的，状态为pending。</span></span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 往回调里面添加成功回调和失败回调</span></span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"attr\">onResolve</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">handle</span>(onResolve),</span><br><span class=\"line\">                        <span class=\"attr\">onReject</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">handle</span>(onReject)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只需要调用then方法，成功回调传空即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数是Promise实例，返回为这个Promise的结果；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数不是Promise实例，状态为成功，结果为参数。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                value.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，状态为失败，结果为参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> all (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> values = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(promises.<span class=\"property\">length</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(promises[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                    values[i] = res</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count&#x27;</span>, count)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (count === promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(values)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> race (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回一个Promise实例，结果由第一个完成的Promise实例决定</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(promises[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Promise</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (execute) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  Promise实例状态值（3种）: 1.pending; 2.fulfilled; 3.rejected。</span></span><br><span class=\"line\"><span class=\"comment\">         *  状态改变方式（2种）：1.pending -&gt; fulfilled; 2.pending -&gt; fulfilled。</span></span><br><span class=\"line\"><span class=\"comment\">         *  注意：一旦状态改变，不可逆。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// Promise实例结果: 存储成功时返回的终值（eventual value）和失败时返回的拒因（reason）。</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 应用场景：当Promise执行函数为异步时，存储then方法的回调函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 等异步执行完后，根据状态在resolve或reject函数中在去执行。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为每一个Promise实例可以有多个then方法，所以存储回调的对象属性值是一个数组。</span></span><br><span class=\"line\"><span class=\"comment\">         * 因为异步执行的结果未知，所以成功回调和失败回调都要存储起来，</span></span><br><span class=\"line\"><span class=\"comment\">         * \b\b数组的每一项都是一个对象：&#123; onResolve: 成功回调, onReject: 失败回调 &#125;。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将成功的值作为参数调用resolve函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; fulfilled；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">onResolve</span>())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 使用方式：在Promise执行函数中，将失败的原因作为参数调用reject函数</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行函数里的内置方法，主要作用有三个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.改变Promise实例状态： pending -&gt; rejected；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.改变Promise实例结果： this.PromiseState = data；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.实现Promise的状态不可逆，具体做法是只当状态为pending时才改变状态和结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> !== <span class=\"string\">&#x27;pending&#x27;</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span> = data</span><br><span class=\"line\">            <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">onReject</span>())&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用try...catch...来处理执行函数运行抛出错误</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">execute</span>(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then (onResolve, onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法主要做的事情有四个：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.接收两个函数作为参数，分别是成功回调和失败回调；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.返回一个新的Promise实例，可以链式调用；</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.当前面的Promise状态改变时，then方法根据其最终状态，选择特定的回调函数执行；</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.回调函数返回值不同，分三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         *   *抛出异常，状态为失败，结果为失败返回的拒因；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果不是Promise实例，状态为成功，结果为成功返回的终值；</span></span><br><span class=\"line\"><span class=\"comment\">         *   *返回结果是Promise实例，返回为这个Promise的结果。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当成功回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是把上一个Promise的返回结果，传递给下一个then方法。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onResolve = <span class=\"keyword\">typeof</span> onResolve === <span class=\"string\">&#x27;function&#x27;</span> ? onResolve : <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * then方法支持参数可以不传，当失败回调不传的时候，默认赋值为一个函数，</span></span><br><span class=\"line\"><span class=\"comment\">         * 这个函数做的事情就是抛出错误原因，实现异常穿透。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        onReject = <span class=\"keyword\">typeof</span> onReject === <span class=\"string\">&#x27;function&#x27;</span> ? onReject : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 根据回调函数返回的结果，执行相应内置函数来改变then函数返回的Promise实例状态和结果值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title function_\">handle</span> = (<span class=\"params\">cbType</span>) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 使用try...catch...来捕获成功回调函数执行中的异常</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行成功回调，获取then方法成功回调的返回结果。</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> res = <span class=\"title function_\">cbType</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseResult</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                        res.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">PromiseState</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为fulfilled。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;fulfilled&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"title function_\">handle</span>(onResolve) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是同步的，状态为rejected。</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;rejected&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Promise的then方法是异步执行的，回调函数执行放在定时器里面来实现。</span></span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"title function_\">handle</span>(onReject) &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Promise实例的执行函数是异步的，状态为pending。</span></span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 往回调里面添加成功回调和失败回调</span></span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">callBacks</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * 等上一个Promise状态改变时，来根据key执行相对应的value函数</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"attr\">onResolve</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">handle</span>(onResolve),</span><br><span class=\"line\">                        <span class=\"attr\">onReject</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">handle</span>(onReject)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (onReject) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只需要调用then方法，成功回调传空即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, onReject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数是Promise实例，返回为这个Promise的结果；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数不是Promise实例，状态为成功，结果为参数。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">                value.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">resolve</span>(value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果为Promise实例，状态为失败，结果为参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> all (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回结果有两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.参数中的Promise实例结果都为成功，状态为成功，并将实例终值按原顺序拼凑成一个数组，作为all返回的Promise实例终值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.参数中的Promise实例结果有一个失败，状态为失败，并将第一个失败的拒因，作为all返回的Promise实例据因。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> values = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(promises.<span class=\"property\">length</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(promises[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    count++</span><br><span class=\"line\">                    values[i] = res</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count&#x27;</span>, count)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (count === promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(values)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> race (promises) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 接收的参数为一个由Promise实例组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 返回一个Promise实例，结果由第一个完成的Promise实例决定</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(promises[i]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">                &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Promise</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个Proxy代理","date":"2021-08-13T16:00:00.000Z","_content":"\n```javascript\nconst express = require('express')\nconst path = require('path')\nconst proxy = require('http-proxy-middleware')\n\nconst app = express()\n\n// 解决跨域：开发环境前端服务通过proxy代理转发请求。\n// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。\napp.use('*', proxy({ target: 'http://xx.xx.xx.xx:xxxx', changeOrigin: true }));\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n  \n    var bind = typeof port === 'string'\n      ? 'Pipe ' + port\n      : 'Port ' + port;\n  \n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(bind + ' requires elevated privileges');\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(bind + ' is already in use');\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n}\n\nfunction onListening() {\n    var addr = app.address();\n    var bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n    console.log('Listening on ' + bind);\n}\n\napp.on('error', onError);\napp.on('listening', onListening);\n// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发\napp.listen(8080)\n```","source":"_posts/手写一个Proxy代理.md","raw":"---\ntitle: 手写一个Proxy代理\n\ndate: 2021-08-14\n\ntags: [Proxy,跨域]\n\ncategories: express\n---\n\n```javascript\nconst express = require('express')\nconst path = require('path')\nconst proxy = require('http-proxy-middleware')\n\nconst app = express()\n\n// 解决跨域：开发环境前端服务通过proxy代理转发请求。\n// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。\napp.use('*', proxy({ target: 'http://xx.xx.xx.xx:xxxx', changeOrigin: true }));\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n  \n    var bind = typeof port === 'string'\n      ? 'Pipe ' + port\n      : 'Port ' + port;\n  \n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(bind + ' requires elevated privileges');\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(bind + ' is already in use');\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n}\n\nfunction onListening() {\n    var addr = app.address();\n    var bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n    console.log('Listening on ' + bind);\n}\n\napp.on('error', onError);\napp.on('listening', onListening);\n// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发\napp.listen(8080)\n```","slug":"手写一个Proxy代理","published":1,"updated":"2023-11-07T03:36:00.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88b002fu17udghy0b6s","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域：开发环境前端服务通过proxy代理转发请求。</span></span><br><span class=\"line\"><span class=\"comment\">// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"title function_\">proxy</span>(&#123; <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://xx.xx.xx.xx:xxxx&#x27;</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.<span class=\"property\">syscall</span> !== <span class=\"string\">&#x27;listen&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> port === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;Pipe &#x27;</span> + port</span><br><span class=\"line\">      : <span class=\"string\">&#x27;Port &#x27;</span> + port;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// handle specific listen errors with friendly messages</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (error.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EACCES&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(bind + <span class=\"string\">&#x27; requires elevated privileges&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EADDRINUSE&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(bind + <span class=\"string\">&#x27; is already in use&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onListening</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> addr = app.<span class=\"title function_\">address</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> addr === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;pipe &#x27;</span> + addr</span><br><span class=\"line\">      : <span class=\"string\">&#x27;port &#x27;</span> + addr.<span class=\"property\">port</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Listening on &#x27;</span> + bind);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, onError);</span><br><span class=\"line\">app.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listening&#x27;</span>, onListening);</span><br><span class=\"line\"><span class=\"comment\">// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域：开发环境前端服务通过proxy代理转发请求。</span></span><br><span class=\"line\"><span class=\"comment\">// 跨域问题是由于浏览器的同源策略，在node环境没有跨域问题。</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"title function_\">proxy</span>(&#123; <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://xx.xx.xx.xx:xxxx&#x27;</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.<span class=\"property\">syscall</span> !== <span class=\"string\">&#x27;listen&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> port === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;Pipe &#x27;</span> + port</span><br><span class=\"line\">      : <span class=\"string\">&#x27;Port &#x27;</span> + port;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// handle specific listen errors with friendly messages</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (error.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EACCES&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(bind + <span class=\"string\">&#x27; requires elevated privileges&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;EADDRINUSE&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(bind + <span class=\"string\">&#x27; is already in use&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onListening</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> addr = app.<span class=\"title function_\">address</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bind = <span class=\"keyword\">typeof</span> addr === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;pipe &#x27;</span> + addr</span><br><span class=\"line\">      : <span class=\"string\">&#x27;port &#x27;</span> + addr.<span class=\"property\">port</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Listening on &#x27;</span> + bind);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, onError);</span><br><span class=\"line\">app.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;listening&#x27;</span>, onListening);</span><br><span class=\"line\"><span class=\"comment\">// 开发环境前端请求自己启动的服务端口，在本地express服务中做代理转发</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>"},{"title":"手写一个Loader","date":"2021-08-15T16:00:00.000Z","_content":"\n1.主文件 babelParse.js\n\n```javascript\nconst { getOptions } = require('loader-utils')\nconst { validate } = require('schema-utils')\nconst { transform} = require('@babel/core')\nconst { promisify } = require('util')\n\n// 将回调函数转换为基于promise的函数\nconst transformAsync = promisify(transform)\n// 校验配置\nconst babelSchema = require('./schemas/babelSchema.js')\n\n/*\n * Loader通常是一个函数\n * source: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果\n *\nmodule.exports = function (source) {\n    // 获取loader的配置\n    const options = getOptions(this)\n    // 校验配置：成功时往下运行，失败时停止运行报出错误\n    validate(babelSchema, options, {\n        name: 'babelLoader'\n    })\n    // 异步返回结果\n    const callBack = this.async()\n    // 调用transform方法进行转码并返回\n    transformAsync(source, options)\n        .then(({ code }) => callBack(null, code))\n        .catch(err => {callBack(err)})\n}\n```\n\n2.校验文件 babelSchema.js\n\n```javascript\nmodule.exports = {\n    type: 'object',\n    properties: {\n        presets: {\n            type: 'array'\n        }\n    },\n    // 是否可以有未定义的附加属性\n    addtionalProperty: true\n}\n```\n\n3.webpack配置文件 webpack.config.js\n\n```javascript\n\t...\n\tmodule: {\n    rules: [ \n      { \n        test: /\\.js$/, \n        use: { \n          loader: 'babelParse.js', \n          // 配置参数\n          options: { \n            presets: ['@babel/preset-env'] \n          } \n        }\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n  ...\n```\n\n","source":"_posts/手写一个loader.md","raw":"---\ntitle: 手写一个Loader\n\ndate: 2021-08-16\n\ntags: [loader]\n\ncategories: webpack\n---\n\n1.主文件 babelParse.js\n\n```javascript\nconst { getOptions } = require('loader-utils')\nconst { validate } = require('schema-utils')\nconst { transform} = require('@babel/core')\nconst { promisify } = require('util')\n\n// 将回调函数转换为基于promise的函数\nconst transformAsync = promisify(transform)\n// 校验配置\nconst babelSchema = require('./schemas/babelSchema.js')\n\n/*\n * Loader通常是一个函数\n * source: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果\n *\nmodule.exports = function (source) {\n    // 获取loader的配置\n    const options = getOptions(this)\n    // 校验配置：成功时往下运行，失败时停止运行报出错误\n    validate(babelSchema, options, {\n        name: 'babelLoader'\n    })\n    // 异步返回结果\n    const callBack = this.async()\n    // 调用transform方法进行转码并返回\n    transformAsync(source, options)\n        .then(({ code }) => callBack(null, code))\n        .catch(err => {callBack(err)})\n}\n```\n\n2.校验文件 babelSchema.js\n\n```javascript\nmodule.exports = {\n    type: 'object',\n    properties: {\n        presets: {\n            type: 'array'\n        }\n    },\n    // 是否可以有未定义的附加属性\n    addtionalProperty: true\n}\n```\n\n3.webpack配置文件 webpack.config.js\n\n```javascript\n\t...\n\tmodule: {\n    rules: [ \n      { \n        test: /\\.js$/, \n        use: { \n          loader: 'babelParse.js', \n          // 配置参数\n          options: { \n            presets: ['@babel/preset-env'] \n          } \n        }\n      }\n    ]\n  },\n  resolveLoader: {\n    // 寻找loader所在位置\n    modules: ['node_modules', path.resolve(__dirname, 'loaders/')]\n  },\n  ...\n```\n\n","slug":"手写一个loader","published":1,"updated":"2023-11-07T03:36:00.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88d002iu17u4inufejq","content":"<p>1.主文件 babelParse.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transform&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数转换为基于promise的函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformAsync = <span class=\"title function_\">promisify</span>(transform)</span><br><span class=\"line\"><span class=\"comment\">// 校验配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babelSchema = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./schemas/babelSchema.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Loader通常是一个函数</span></span><br><span class=\"line\"><span class=\"comment\"> * source: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">module.exports = function (source) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // 获取loader的配置</span></span><br><span class=\"line\"><span class=\"comment\">    const options = getOptions(this)</span></span><br><span class=\"line\"><span class=\"comment\">    // 校验配置：成功时往下运行，失败时停止运行报出错误</span></span><br><span class=\"line\"><span class=\"comment\">    validate(babelSchema, options, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        name: &#x27;babelLoader&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">    // 异步返回结果</span></span><br><span class=\"line\"><span class=\"comment\">    const callBack = this.async()</span></span><br><span class=\"line\"><span class=\"comment\">    // 调用transform方法进行转码并返回</span></span><br><span class=\"line\"><span class=\"comment\">    transformAsync(source, options)</span></span><br><span class=\"line\"><span class=\"comment\">        .then((&#123; code &#125;) =&gt; callBack(null, code))</span></span><br><span class=\"line\"><span class=\"comment\">        .catch(err =&gt; &#123;callBack(err)&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.校验文件 babelSchema.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;array&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否可以有未定义的附加属性</span></span><br><span class=\"line\">    <span class=\"attr\">addtionalProperty</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.webpack配置文件 webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, </span><br><span class=\"line\">       <span class=\"attr\">use</span>: &#123; </span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babelParse.js&#x27;</span>, </span><br><span class=\"line\">         <span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123; </span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] </span><br><span class=\"line\">         &#125; </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.主文件 babelParse.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; getOptions &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; validate &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;schema-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transform&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; promisify &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数转换为基于promise的函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformAsync = <span class=\"title function_\">promisify</span>(transform)</span><br><span class=\"line\"><span class=\"comment\">// 校验配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babelSchema = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./schemas/babelSchema.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Loader通常是一个函数</span></span><br><span class=\"line\"><span class=\"comment\"> * source: 对于第一个执行的loader为资源的内容，非第一个执行的loader为上一个loader的执行结果</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">module.exports = function (source) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    // 获取loader的配置</span></span><br><span class=\"line\"><span class=\"comment\">    const options = getOptions(this)</span></span><br><span class=\"line\"><span class=\"comment\">    // 校验配置：成功时往下运行，失败时停止运行报出错误</span></span><br><span class=\"line\"><span class=\"comment\">    validate(babelSchema, options, &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        name: &#x27;babelLoader&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">    // 异步返回结果</span></span><br><span class=\"line\"><span class=\"comment\">    const callBack = this.async()</span></span><br><span class=\"line\"><span class=\"comment\">    // 调用transform方法进行转码并返回</span></span><br><span class=\"line\"><span class=\"comment\">    transformAsync(source, options)</span></span><br><span class=\"line\"><span class=\"comment\">        .then((&#123; code &#125;) =&gt; callBack(null, code))</span></span><br><span class=\"line\"><span class=\"comment\">        .catch(err =&gt; &#123;callBack(err)&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.校验文件 babelSchema.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;object&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;array&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否可以有未定义的附加属性</span></span><br><span class=\"line\">    <span class=\"attr\">addtionalProperty</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.webpack配置文件 webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [ </span><br><span class=\"line\">     &#123; </span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, </span><br><span class=\"line\">       <span class=\"attr\">use</span>: &#123; </span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babelParse.js&#x27;</span>, </span><br><span class=\"line\">         <span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123; </span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>] </span><br><span class=\"line\">         &#125; </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">resolveLoader</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 寻找loader所在位置</span></span><br><span class=\"line\">   <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>, path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;loaders/&#x27;</span>)]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个爬虫","date":"2021-08-11T16:00:00.000Z","_content":"\n```javascript\nconst express = require('express')\n// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用\nconst superagent = require('superagent')\n// nodejs的抓取页面模块，实现了核心jQuery的子集\nconst cheerio = require('cheerio')\nconst app = express()\n\napp.get('/', (req, res, next) => {\n    superagent.get('https://www.zhipin.com/wuhan/')\n        .end((err, data) => {\n            // 错误优先处理\n            if (err) return next(err)\n            // 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom\n            const $ = cheerio.load(data.text);\n            const conpanys = []\n            $('.conpany-text').each((index, element) => {\n                conpanys.push($(element).find('h4').text())\n            });\n            res.send(conpanys)\n        })\n})\n\napp.listen('9999', () => {\n    console.log('http://localhost:9999');\n})\n```\n\n","source":"_posts/手写一个爬虫.md","raw":"---\ntitle: 手写一个爬虫\n\ndate: 2021-08-12\n\ntags: [爬虫]\n\ncategories: express\n---\n\n```javascript\nconst express = require('express')\n// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用\nconst superagent = require('superagent')\n// nodejs的抓取页面模块，实现了核心jQuery的子集\nconst cheerio = require('cheerio')\nconst app = express()\n\napp.get('/', (req, res, next) => {\n    superagent.get('https://www.zhipin.com/wuhan/')\n        .end((err, data) => {\n            // 错误优先处理\n            if (err) return next(err)\n            // 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom\n            const $ = cheerio.load(data.text);\n            const conpanys = []\n            $('.conpany-text').each((index, element) => {\n                conpanys.push($(element).find('h4').text())\n            });\n            res.send(conpanys)\n        })\n})\n\napp.listen('9999', () => {\n    console.log('http://localhost:9999');\n})\n```\n\n","slug":"手写一个爬虫","published":1,"updated":"2023-11-07T03:36:00.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88e002ku17u6p9y3y0r","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;superagent&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// nodejs的抓取页面模块，实现了核心jQuery的子集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    superagent.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://www.zhipin.com/wuhan/&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">end</span>(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误优先处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"title function_\">next</span>(err)</span><br><span class=\"line\">            <span class=\"comment\">// 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> $ = cheerio.<span class=\"title function_\">load</span>(data.<span class=\"property\">text</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> conpanys = []</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.conpany-text&#x27;</span>).<span class=\"title function_\">each</span>(<span class=\"function\">(<span class=\"params\">index, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                conpanys.<span class=\"title function_\">push</span>($(element).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;h4&#x27;</span>).<span class=\"title function_\">text</span>())</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            res.<span class=\"title function_\">send</span>(conpanys)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"string\">&#x27;9999&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;http://localhost:9999&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// superagent是一个轻量的Ajax API，服务器端（Node.js）客户端（浏览器端）均可使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;superagent&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// nodejs的抓取页面模块，实现了核心jQuery的子集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    superagent.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://www.zhipin.com/wuhan/&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">end</span>(<span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误优先处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"title function_\">next</span>(err)</span><br><span class=\"line\">            <span class=\"comment\">// 将获取到dom绑定到$上，后面可以直接用$以jQuery的方式操作dom</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> $ = cheerio.<span class=\"title function_\">load</span>(data.<span class=\"property\">text</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> conpanys = []</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.conpany-text&#x27;</span>).<span class=\"title function_\">each</span>(<span class=\"function\">(<span class=\"params\">index, element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                conpanys.<span class=\"title function_\">push</span>($(element).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;h4&#x27;</span>).<span class=\"title function_\">text</span>())</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            res.<span class=\"title function_\">send</span>(conpanys)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"string\">&#x27;9999&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;http://localhost:9999&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写一个简版Webpack","_content":"\n### 实现目标\n\n将一个入口文件及其依赖js打包到一个出口文件。\n\n注意：只是简单实现webpack的部分功能，目的是帮助理解webpack的打包流程。\n\n\n\n\n\n### webpack打包流程\n\n1. 初始化Compiler:  new Webpack(config)得到Compiler对象；\n2. 开始编译：调用Compiler对象run方法开始执行编译；\n3. 确定入口：根据配置中的entry找到所有入口文件；\n4. 编译模块：从入口文件出发，调用所有配置的Loader对模块进行编译，再找出该模块依赖的模块，递归直到所有的模块都被加载；\n5. 完成模块编译：使用Loader编译完所有模块后，得到了每个模块被编译后的最终内容以及模块的依赖关系图；\n6. 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。\n\n\n\n\n\n### 具体实现\n\n#### 整体结构\n\n```\n|-- ToysWebpack\n    |-- config\n        |-- index.js 执行这个文件，开始打包\n        |-- webpack.prod.config.js 生产环境webpack打包配置\n        |-- webpack.test.config.js 测试环境webpack打包配置\n    |-- dist\n        |-- index.bundle.js 生产环境包\n        |-- index.test.js 测试环境包\n    |-- node_modules\n    |-- src 待打包的原始文件夹，出了两个环境的打包入口文件，其他都是依赖文件\n        |-- add.js \n        |-- error.js\n        |-- index.js 生产环境打包的入口文件\n        |-- log.js\n        |-- minus.js\n        |-- test.js 测试环境打包的入口文件\n    |-- webpack \n        |-- Compiler.js 打包主文件\n        |-- index.js webpack打包的开始执行文件\n        |-- parse.js 编译工具\n    |-- index.html 供打包后测试使用\n    |-- package-lock.json\n    |-- package.json 打包脚本写里面\n```\n\n\n\n\n\n#### package.json\n\ndebug - 调试脚本， test - 打测试环境包， prod - 打生产环境包\n\n``` javascript\n{\n  \"name\": \"toys_webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"debug\": \"cross-env NODE_ENV=prod node --inspect-brk ./config/index.js \", \n    \"test\": \"cross-env NODE_ENV=test node ./config/index.js \",\n    \"prod\": \"cross-env NODE_ENV=prod node ./config/index.js \"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.15.0\",\n    \"@babel/parser\": \"^7.15.3\",\n    \"@babel/preset-env\": \"^7.15.0\",\n    \"@babel/traverse\": \"^7.15.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"mkdirp\": \"^1.0.4\"\n  }\n}\n\n```\n\n\n\n\n\n#### config文件夹\n\nindex.js：执行package.json里的脚本后会到这个文件\n\n``` javascript\nconst webpack = require('../webpack/index.js')\nconst env = process.env.NODE_ENV\n\n// 懒加载当前运行环境的打包配置\nconst optionsMap = {\n    prod: () => require('./webpack.prod.config.js'),\n    test: () => require('./webpack.test.config.js')\n}\nconst options = optionsMap[env]()\n\n// 给webpack函数传入打包配置，返回一个Compiler实例\nconst compiler = webpack(options)\n// 执行run方法开始编译打包\ncompiler.run()\n```\n\n\n\nwebpack.prod.config.js：生产环境打包配置\n\n``` javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry: '../src/index.js',\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        filename: 'index.bundle.js',\n    }\n}\n```\n\n\n\nwebpack.test.config.js: 测试环境打包配置\n\n```javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry: '../src/test.js',\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        filename: 'index.test.js',\n    }\n}\n```\n\n\n\n\n\n#### src文件夹\n\n##### 生产环境相关文件\n\nindex.js: 入口文件\n\n``` javascript\nimport { add } from './add.js'\nimport { log } from './log.js'\n\nlog(add(1,2))\n```\n\n\n\nadd.js\n\n``` javascript\nexport const add = (a, b) => a + b\n```\n\n\n\nlog.js\n\n``` javascript\nexport const log =  console.log\n```\n\n\n\n##### 测试环境相关代码\n\ntest.js: 入口文件\n\n``` javascript\nimport { minus } from './minus.js'\nimport { error } from './error.js'\n\nerror(minus(1,2))\n```\n\n\n\nminus.js\n\n``` javascript\nexport const minus = (a, b) => a - b\n```\n\n\n\nerror.js\n\n``` javascript\nexport const error =  console.error\n```\n\n\n\n\n\n#### webpack文件夹\n\n##### index.js\n\nwebpack打包的开始执行文件\n\n``` javascript\nconst Compiler = require('./Compiler.js')\n\n/**\n * ToysWebpack只做一件事：将入口文件及其依赖打包到出口文件\n */\nconst webpack = (options) => {\n    return new Compiler(options)\n}\n\nmodule.exports = webpack\n```\n\n\n\n##### Compiler.js\n\n打包主文件\n\n``` javascript\nconst path = require('path')\nconst fs = require('fs')\nconst mkdirp = require('mkdirp')\nconst { getAst, getDeps, getCode } = require('./parse.js')\nconst { entry } = require('../config/webpack.prod.config.js')\n\nclass Compiler {\n    constructor (options) {\n        // 配置信息\n        this.options = options\n        // 所有依赖的容器\n        this.modules = []\n        // 入口文件绝对路径\n        this.entryFilePath = path.resolve('config', options.entry)\n    }\n\n    // 编译打包\n    run () {\n        // 开始第一次构建，得到入口文件的信息\n        const fileInfo = this.build(this.entryFilePath)\n        // 将入口文件的信息添加到容器\n        this.modules.push(fileInfo)\n        // 遍历fileInfo的deps, 递归得到依赖文件的信息\n        this.modules.forEach(item => {\n            // 取出当前文件的所有依赖\n            const deps = item.deps\n            for (const dep in deps) {\n                /**\n                 * dep: 依赖相对路径\n                 * deps[dep]: 依赖绝对路径\n                 * 得到依赖文件的信息\n                 */\n                const depFileInfo = this.build(deps[dep])\n                // 将处理过后的依赖信息添加到容器中，后面会遍历到完成下一层的递归\n                this.modules.push(depFileInfo)\n            }\n        })\n        // 整理依赖关系图\n        const depsGraph =  this.modules.reduce((graph, module) => {\n            return {\n                ...graph,\n                [module.filePath]: {\n                    deps: module.deps,\n                    code: module.code\n                }\n            }\n        }, {})\n        // 生成输出文件\n        const generate = (depsGraph) => {\n            /**\n             * 定义一个匿名立即执行函数，确保里面的代码只能自己操作\n             */\n            const bundle = `\n              (function(depsGraph){\n                // require目的：加载入口文件\n                function require(module){\n                    // 函数内部的require其实执行的是localRequire\n                    function localRequire(relativePath){\n                        // 找到要引入模块的绝对路径，通过require加载\n                        return require(depsGraph[module].deps[relativePath])\n                    }\n                    // 定义暴露的对象，将来模块要暴露的内容都放在这里\n                    let exports = {};\n                    (function(require, exports, code){\n                        eval(code)\n                    })(localRequire, exports, depsGraph[module].code);\n                    // 作为require的返回值返回出去\n                    return exports\n                }\n                require('${this.entryFilePath}')\n              })(${JSON.stringify(depsGraph)})\n            `\n            // 生成输出文件的绝对路径\n            const { path: outputPath, filename } = this.options.output\n            const filePath = path.resolve(outputPath, filename)\n            // 写入文件\n            const made = mkdirp.sync(path.dirname(filePath))\n            fs.writeFileSync(filePath, bundle)\n        }\n        generate(depsGraph)\n    }\n\n    // 开始构建\n    build (filePath) {\n        // 将入口文件解析ast\n        const ast = getAst(filePath)\n        // 获取ast中所有的依赖\n        const deps = getDeps(filePath, ast)\n        // 将ast解析成code\n        const code = getCode(ast)\n        return { \n            // 文件路径\n            filePath,\n            // 当前文件的所有依赖\n            deps,\n            // 当前文件解析后的代码\n            code\n        }\n    }\n}\n\nmodule.exports = Compiler\n```\n\n\n\n##### parse.js\n\n编译工具\n\n``` javascript\nconst fs = require('fs')\nconst path = require('path')\nconst { parse } = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst { transformFromAstSync } = require('@babel/core')\n\n/**\n * tips:下面三步也是将ES6转化成ES5的核心步骤，\n * 当然在项目实践中不需要去这么转化，有封装得更易于使用的轮子。\n */ \n\n//1. @babel/parser将es6的代码解析为AST\nconst getAst = (filePath) => {\n    // 同步读取文件\n    const file = fs.readFileSync(filePath, 'utf-8')\n    /**\n     * 调用parse方法将文件解析成AST\n     * sourceType: 解析代码的模式，为module时可以解析ES6导入或导出语句\n     */\n    const ast = parse(file, { sourceType: \"module\" })\n    return ast\n}\n\n// 2.@babel/traverse遍历AST收集依赖\nconst getDeps = (filePath, ast) => {\n    const deps = {}\n    // 获取文件所在文件夹的路径\n    const dirname = path.dirname(filePath)\n    // 内部会遍历ast中的program.body，判断里面语句类型\n    traverse(ast, {\n        /**\n         * 当type为ImportDeclaration时，会执行下面的回调\n         * 参数NodePath里存储了当前执行的语句的详细信息\n         */\n        ImportDeclaration: (NodePath) => {\n            // 依赖的文件的相对路径\n            const relativePath = NodePath.node.source.value\n            // 生成基于入口文件的绝对路径\n            const absolutePath = path.resolve(dirname, relativePath)\n            // 添加依赖\n            deps[relativePath] = absolutePath\n        }\n    })\n    return deps\n}\n\n// 3.@bebel/core将AST解析为对应的es5代码\nconst getCode = (ast) => {\n    const { code } = transformFromAstSync(ast, null, {\n        presets: [\"@babel/preset-env\"]\n    })\n    return code\n}\n\nmodule.exports = {\n    getAst,\n    getDeps,\n    getCode\n}\n```\n\n\n\n\n\n#### index.html\n\n供打包后测试使用\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./dist/index.bundle.js\"></script>\n    <script src=\"./dist/index.test.js\"></script>\n</body>\n</html>\n```\n\n","source":"_posts/手写一个简版webpack.md","raw":"---\ntitle: 手写一个简版Webpack\n\ntags: [webpack]\n\ncategories: webpack\n---\n\n### 实现目标\n\n将一个入口文件及其依赖js打包到一个出口文件。\n\n注意：只是简单实现webpack的部分功能，目的是帮助理解webpack的打包流程。\n\n\n\n\n\n### webpack打包流程\n\n1. 初始化Compiler:  new Webpack(config)得到Compiler对象；\n2. 开始编译：调用Compiler对象run方法开始执行编译；\n3. 确定入口：根据配置中的entry找到所有入口文件；\n4. 编译模块：从入口文件出发，调用所有配置的Loader对模块进行编译，再找出该模块依赖的模块，递归直到所有的模块都被加载；\n5. 完成模块编译：使用Loader编译完所有模块后，得到了每个模块被编译后的最终内容以及模块的依赖关系图；\n6. 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。\n\n\n\n\n\n### 具体实现\n\n#### 整体结构\n\n```\n|-- ToysWebpack\n    |-- config\n        |-- index.js 执行这个文件，开始打包\n        |-- webpack.prod.config.js 生产环境webpack打包配置\n        |-- webpack.test.config.js 测试环境webpack打包配置\n    |-- dist\n        |-- index.bundle.js 生产环境包\n        |-- index.test.js 测试环境包\n    |-- node_modules\n    |-- src 待打包的原始文件夹，出了两个环境的打包入口文件，其他都是依赖文件\n        |-- add.js \n        |-- error.js\n        |-- index.js 生产环境打包的入口文件\n        |-- log.js\n        |-- minus.js\n        |-- test.js 测试环境打包的入口文件\n    |-- webpack \n        |-- Compiler.js 打包主文件\n        |-- index.js webpack打包的开始执行文件\n        |-- parse.js 编译工具\n    |-- index.html 供打包后测试使用\n    |-- package-lock.json\n    |-- package.json 打包脚本写里面\n```\n\n\n\n\n\n#### package.json\n\ndebug - 调试脚本， test - 打测试环境包， prod - 打生产环境包\n\n``` javascript\n{\n  \"name\": \"toys_webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"debug\": \"cross-env NODE_ENV=prod node --inspect-brk ./config/index.js \", \n    \"test\": \"cross-env NODE_ENV=test node ./config/index.js \",\n    \"prod\": \"cross-env NODE_ENV=prod node ./config/index.js \"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.15.0\",\n    \"@babel/parser\": \"^7.15.3\",\n    \"@babel/preset-env\": \"^7.15.0\",\n    \"@babel/traverse\": \"^7.15.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"mkdirp\": \"^1.0.4\"\n  }\n}\n\n```\n\n\n\n\n\n#### config文件夹\n\nindex.js：执行package.json里的脚本后会到这个文件\n\n``` javascript\nconst webpack = require('../webpack/index.js')\nconst env = process.env.NODE_ENV\n\n// 懒加载当前运行环境的打包配置\nconst optionsMap = {\n    prod: () => require('./webpack.prod.config.js'),\n    test: () => require('./webpack.test.config.js')\n}\nconst options = optionsMap[env]()\n\n// 给webpack函数传入打包配置，返回一个Compiler实例\nconst compiler = webpack(options)\n// 执行run方法开始编译打包\ncompiler.run()\n```\n\n\n\nwebpack.prod.config.js：生产环境打包配置\n\n``` javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry: '../src/index.js',\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        filename: 'index.bundle.js',\n    }\n}\n```\n\n\n\nwebpack.test.config.js: 测试环境打包配置\n\n```javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry: '../src/test.js',\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        filename: 'index.test.js',\n    }\n}\n```\n\n\n\n\n\n#### src文件夹\n\n##### 生产环境相关文件\n\nindex.js: 入口文件\n\n``` javascript\nimport { add } from './add.js'\nimport { log } from './log.js'\n\nlog(add(1,2))\n```\n\n\n\nadd.js\n\n``` javascript\nexport const add = (a, b) => a + b\n```\n\n\n\nlog.js\n\n``` javascript\nexport const log =  console.log\n```\n\n\n\n##### 测试环境相关代码\n\ntest.js: 入口文件\n\n``` javascript\nimport { minus } from './minus.js'\nimport { error } from './error.js'\n\nerror(minus(1,2))\n```\n\n\n\nminus.js\n\n``` javascript\nexport const minus = (a, b) => a - b\n```\n\n\n\nerror.js\n\n``` javascript\nexport const error =  console.error\n```\n\n\n\n\n\n#### webpack文件夹\n\n##### index.js\n\nwebpack打包的开始执行文件\n\n``` javascript\nconst Compiler = require('./Compiler.js')\n\n/**\n * ToysWebpack只做一件事：将入口文件及其依赖打包到出口文件\n */\nconst webpack = (options) => {\n    return new Compiler(options)\n}\n\nmodule.exports = webpack\n```\n\n\n\n##### Compiler.js\n\n打包主文件\n\n``` javascript\nconst path = require('path')\nconst fs = require('fs')\nconst mkdirp = require('mkdirp')\nconst { getAst, getDeps, getCode } = require('./parse.js')\nconst { entry } = require('../config/webpack.prod.config.js')\n\nclass Compiler {\n    constructor (options) {\n        // 配置信息\n        this.options = options\n        // 所有依赖的容器\n        this.modules = []\n        // 入口文件绝对路径\n        this.entryFilePath = path.resolve('config', options.entry)\n    }\n\n    // 编译打包\n    run () {\n        // 开始第一次构建，得到入口文件的信息\n        const fileInfo = this.build(this.entryFilePath)\n        // 将入口文件的信息添加到容器\n        this.modules.push(fileInfo)\n        // 遍历fileInfo的deps, 递归得到依赖文件的信息\n        this.modules.forEach(item => {\n            // 取出当前文件的所有依赖\n            const deps = item.deps\n            for (const dep in deps) {\n                /**\n                 * dep: 依赖相对路径\n                 * deps[dep]: 依赖绝对路径\n                 * 得到依赖文件的信息\n                 */\n                const depFileInfo = this.build(deps[dep])\n                // 将处理过后的依赖信息添加到容器中，后面会遍历到完成下一层的递归\n                this.modules.push(depFileInfo)\n            }\n        })\n        // 整理依赖关系图\n        const depsGraph =  this.modules.reduce((graph, module) => {\n            return {\n                ...graph,\n                [module.filePath]: {\n                    deps: module.deps,\n                    code: module.code\n                }\n            }\n        }, {})\n        // 生成输出文件\n        const generate = (depsGraph) => {\n            /**\n             * 定义一个匿名立即执行函数，确保里面的代码只能自己操作\n             */\n            const bundle = `\n              (function(depsGraph){\n                // require目的：加载入口文件\n                function require(module){\n                    // 函数内部的require其实执行的是localRequire\n                    function localRequire(relativePath){\n                        // 找到要引入模块的绝对路径，通过require加载\n                        return require(depsGraph[module].deps[relativePath])\n                    }\n                    // 定义暴露的对象，将来模块要暴露的内容都放在这里\n                    let exports = {};\n                    (function(require, exports, code){\n                        eval(code)\n                    })(localRequire, exports, depsGraph[module].code);\n                    // 作为require的返回值返回出去\n                    return exports\n                }\n                require('${this.entryFilePath}')\n              })(${JSON.stringify(depsGraph)})\n            `\n            // 生成输出文件的绝对路径\n            const { path: outputPath, filename } = this.options.output\n            const filePath = path.resolve(outputPath, filename)\n            // 写入文件\n            const made = mkdirp.sync(path.dirname(filePath))\n            fs.writeFileSync(filePath, bundle)\n        }\n        generate(depsGraph)\n    }\n\n    // 开始构建\n    build (filePath) {\n        // 将入口文件解析ast\n        const ast = getAst(filePath)\n        // 获取ast中所有的依赖\n        const deps = getDeps(filePath, ast)\n        // 将ast解析成code\n        const code = getCode(ast)\n        return { \n            // 文件路径\n            filePath,\n            // 当前文件的所有依赖\n            deps,\n            // 当前文件解析后的代码\n            code\n        }\n    }\n}\n\nmodule.exports = Compiler\n```\n\n\n\n##### parse.js\n\n编译工具\n\n``` javascript\nconst fs = require('fs')\nconst path = require('path')\nconst { parse } = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst { transformFromAstSync } = require('@babel/core')\n\n/**\n * tips:下面三步也是将ES6转化成ES5的核心步骤，\n * 当然在项目实践中不需要去这么转化，有封装得更易于使用的轮子。\n */ \n\n//1. @babel/parser将es6的代码解析为AST\nconst getAst = (filePath) => {\n    // 同步读取文件\n    const file = fs.readFileSync(filePath, 'utf-8')\n    /**\n     * 调用parse方法将文件解析成AST\n     * sourceType: 解析代码的模式，为module时可以解析ES6导入或导出语句\n     */\n    const ast = parse(file, { sourceType: \"module\" })\n    return ast\n}\n\n// 2.@babel/traverse遍历AST收集依赖\nconst getDeps = (filePath, ast) => {\n    const deps = {}\n    // 获取文件所在文件夹的路径\n    const dirname = path.dirname(filePath)\n    // 内部会遍历ast中的program.body，判断里面语句类型\n    traverse(ast, {\n        /**\n         * 当type为ImportDeclaration时，会执行下面的回调\n         * 参数NodePath里存储了当前执行的语句的详细信息\n         */\n        ImportDeclaration: (NodePath) => {\n            // 依赖的文件的相对路径\n            const relativePath = NodePath.node.source.value\n            // 生成基于入口文件的绝对路径\n            const absolutePath = path.resolve(dirname, relativePath)\n            // 添加依赖\n            deps[relativePath] = absolutePath\n        }\n    })\n    return deps\n}\n\n// 3.@bebel/core将AST解析为对应的es5代码\nconst getCode = (ast) => {\n    const { code } = transformFromAstSync(ast, null, {\n        presets: [\"@babel/preset-env\"]\n    })\n    return code\n}\n\nmodule.exports = {\n    getAst,\n    getDeps,\n    getCode\n}\n```\n\n\n\n\n\n#### index.html\n\n供打包后测试使用\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./dist/index.bundle.js\"></script>\n    <script src=\"./dist/index.test.js\"></script>\n</body>\n</html>\n```\n\n","slug":"手写一个简版webpack","published":1,"date":"2023-11-07T03:36:00.766Z","updated":"2023-11-07T03:36:00.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88f002pu17uaz6d2rs6","content":"<h3 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h3><p>将一个入口文件及其依赖js打包到一个出口文件。</p>\n<p>注意：只是简单实现webpack的部分功能，目的是帮助理解webpack的打包流程。</p>\n<h3 id=\"webpack打包流程\"><a href=\"#webpack打包流程\" class=\"headerlink\" title=\"webpack打包流程\"></a>webpack打包流程</h3><ol>\n<li>初始化Compiler:  new Webpack(config)得到Compiler对象；</li>\n<li>开始编译：调用Compiler对象run方法开始执行编译；</li>\n<li>确定入口：根据配置中的entry找到所有入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的Loader对模块进行编译，再找出该模块依赖的模块，递归直到所有的模块都被加载；</li>\n<li>完成模块编译：使用Loader编译完所有模块后，得到了每个模块被编译后的最终内容以及模块的依赖关系图；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><h4 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- ToysWebpack</span><br><span class=\"line\">    |-- config</span><br><span class=\"line\">        |-- index.js 执行这个文件，开始打包</span><br><span class=\"line\">        |-- webpack.prod.config.js 生产环境webpack打包配置</span><br><span class=\"line\">        |-- webpack.test.config.js 测试环境webpack打包配置</span><br><span class=\"line\">    |-- dist</span><br><span class=\"line\">        |-- index.bundle.js 生产环境包</span><br><span class=\"line\">        |-- index.test.js 测试环境包</span><br><span class=\"line\">    |-- node_modules</span><br><span class=\"line\">    |-- src 待打包的原始文件夹，出了两个环境的打包入口文件，其他都是依赖文件</span><br><span class=\"line\">        |-- add.js </span><br><span class=\"line\">        |-- error.js</span><br><span class=\"line\">        |-- index.js 生产环境打包的入口文件</span><br><span class=\"line\">        |-- log.js</span><br><span class=\"line\">        |-- minus.js</span><br><span class=\"line\">        |-- test.js 测试环境打包的入口文件</span><br><span class=\"line\">    |-- webpack </span><br><span class=\"line\">        |-- Compiler.js 打包主文件</span><br><span class=\"line\">        |-- index.js webpack打包的开始执行文件</span><br><span class=\"line\">        |-- parse.js 编译工具</span><br><span class=\"line\">    |-- index.html 供打包后测试使用</span><br><span class=\"line\">    |-- package-lock.json</span><br><span class=\"line\">    |-- package.json 打包脚本写里面</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>debug - 调试脚本， test - 打测试环境包， prod - 打生产环境包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;toys_webpack&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;debug&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=prod node --inspect-brk ./config/index.js &quot;</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=test node ./config/index.js &quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prod&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=prod node ./config/index.js &quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/core&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/parser&quot;</span>: <span class=\"string\">&quot;^7.15.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/preset-env&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/traverse&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cross-env&quot;</span>: <span class=\"string\">&quot;^7.0.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mkdirp&quot;</span>: <span class=\"string\">&quot;^1.0.4&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"config文件夹\"><a href=\"#config文件夹\" class=\"headerlink\" title=\"config文件夹\"></a>config文件夹</h4><p>index.js：执行package.json里的脚本后会到这个文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../webpack/index.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒加载当前运行环境的打包配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> optionsMap = &#123;</span><br><span class=\"line\">    <span class=\"attr\">prod</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.prod.config.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.test.config.js&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = optionsMap[env]()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给webpack函数传入打包配置，返回一个Compiler实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"title function_\">webpack</span>(options)</span><br><span class=\"line\"><span class=\"comment\">// 执行run方法开始编译打包</span></span><br><span class=\"line\">compiler.<span class=\"title function_\">run</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.prod.config.js：生产环境打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;../src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.bundle.js&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.test.config.js: 测试环境打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;../src/test.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.test.js&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"src文件夹\"><a href=\"#src文件夹\" class=\"headerlink\" title=\"src文件夹\"></a>src文件夹</h4><h5 id=\"生产环境相关文件\"><a href=\"#生产环境相关文件\" class=\"headerlink\" title=\"生产环境相关文件\"></a>生产环境相关文件</h5><p>index.js: 入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./add.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./log.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>add.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">a, b</span>) =&gt; a + b</span><br></pre></td></tr></table></figure>\n\n\n\n<p>log.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> log =  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"测试环境相关代码\"><a href=\"#测试环境相关代码\" class=\"headerlink\" title=\"测试环境相关代码\"></a>测试环境相关代码</h5><p>test.js: 入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; minus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./minus.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; error &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./error.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">error</span>(<span class=\"title function_\">minus</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>minus.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">minus</span> = (<span class=\"params\">a, b</span>) =&gt; a - b</span><br></pre></td></tr></table></figure>\n\n\n\n<p>error.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> error =  <span class=\"variable language_\">console</span>.<span class=\"property\">error</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"webpack文件夹\"><a href=\"#webpack文件夹\" class=\"headerlink\" title=\"webpack文件夹\"></a>webpack文件夹</h4><h5 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h5><p>webpack打包的开始执行文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Compiler</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Compiler.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ToysWebpack只做一件事：将入口文件及其依赖打包到出口文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">webpack</span> = (<span class=\"params\">options</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler</span>(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = webpack</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Compiler-js\"><a href=\"#Compiler-js\" class=\"headerlink\" title=\"Compiler.js\"></a>Compiler.js</h5><p>打包主文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mkdirp&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getAst, getDeps, getCode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./parse.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../config/webpack.prod.config.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (options) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options</span><br><span class=\"line\">        <span class=\"comment\">// 所有依赖的容器</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span> = []</span><br><span class=\"line\">        <span class=\"comment\">// 入口文件绝对路径</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">entryFilePath</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;config&#x27;</span>, options.<span class=\"property\">entry</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 编译打包</span></span><br><span class=\"line\">    run () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始第一次构建，得到入口文件的信息</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileInfo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">entryFilePath</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 将入口文件的信息添加到容器</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">push</span>(fileInfo)</span><br><span class=\"line\">        <span class=\"comment\">// 遍历fileInfo的deps, 递归得到依赖文件的信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出当前文件的所有依赖</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> deps = item.<span class=\"property\">deps</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dep <span class=\"keyword\">in</span> deps) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * dep: 依赖相对路径</span></span><br><span class=\"line\"><span class=\"comment\">                 * deps[dep]: 依赖绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">                 * 得到依赖文件的信息</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> depFileInfo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(deps[dep])</span><br><span class=\"line\">                <span class=\"comment\">// 将处理过后的依赖信息添加到容器中，后面会遍历到完成下一层的递归</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">push</span>(depFileInfo)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 整理依赖关系图</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> depsGraph =  <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">graph, <span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...graph,</span><br><span class=\"line\">                [<span class=\"variable language_\">module</span>.<span class=\"property\">filePath</span>]: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">deps</span>: <span class=\"variable language_\">module</span>.<span class=\"property\">deps</span>,</span><br><span class=\"line\">                    <span class=\"attr\">code</span>: <span class=\"variable language_\">module</span>.<span class=\"property\">code</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;&#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 生成输出文件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">generate</span> = (<span class=\"params\">depsGraph</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 定义一个匿名立即执行函数，确保里面的代码只能自己操作</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> bundle = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">              (function(depsGraph)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                // require目的：加载入口文件</span></span><br><span class=\"line\"><span class=\"string\">                function require(module)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    // 函数内部的require其实执行的是localRequire</span></span><br><span class=\"line\"><span class=\"string\">                    function localRequire(relativePath)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                        // 找到要引入模块的绝对路径，通过require加载</span></span><br><span class=\"line\"><span class=\"string\">                        return require(depsGraph[module].deps[relativePath])</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    // 定义暴露的对象，将来模块要暴露的内容都放在这里</span></span><br><span class=\"line\"><span class=\"string\">                    let exports = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"string\">                    (function(require, exports, code)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                        eval(code)</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;)(localRequire, exports, depsGraph[module].code);</span></span><br><span class=\"line\"><span class=\"string\">                    // 作为require的返回值返回出去</span></span><br><span class=\"line\"><span class=\"string\">                    return exports</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                require(&#x27;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.entryFilePath&#125;</span>&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">              &#125;)(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(depsGraph)&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">            `</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成输出文件的绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; <span class=\"attr\">path</span>: outputPath, filename &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">output</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">resolve</span>(outputPath, filename)</span><br><span class=\"line\">            <span class=\"comment\">// 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> made = mkdirp.<span class=\"title function_\">sync</span>(path.<span class=\"title function_\">dirname</span>(filePath))</span><br><span class=\"line\">            fs.<span class=\"title function_\">writeFileSync</span>(filePath, bundle)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">generate</span>(depsGraph)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始构建</span></span><br><span class=\"line\">    build (filePath) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将入口文件解析ast</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ast = <span class=\"title function_\">getAst</span>(filePath)</span><br><span class=\"line\">        <span class=\"comment\">// 获取ast中所有的依赖</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> deps = <span class=\"title function_\">getDeps</span>(filePath, ast)</span><br><span class=\"line\">        <span class=\"comment\">// 将ast解析成code</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> code = <span class=\"title function_\">getCode</span>(ast)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 文件路径</span></span><br><span class=\"line\">            filePath,</span><br><span class=\"line\">            <span class=\"comment\">// 当前文件的所有依赖</span></span><br><span class=\"line\">            deps,</span><br><span class=\"line\">            <span class=\"comment\">// 当前文件解析后的代码</span></span><br><span class=\"line\">            code</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Compiler</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"parse-js\"><a href=\"#parse-js\" class=\"headerlink\" title=\"parse.js\"></a>parse.js</h5><p>编译工具</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; parse &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/traverse&#x27;</span>).<span class=\"property\">default</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transformFromAstSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * tips:下面三步也是将ES6转化成ES5的核心步骤，</span></span><br><span class=\"line\"><span class=\"comment\"> * 当然在项目实践中不需要去这么转化，有封装得更易于使用的轮子。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. @babel/parser将es6的代码解析为AST</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAst</span> = (<span class=\"params\">filePath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 同步读取文件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = fs.<span class=\"title function_\">readFileSync</span>(filePath, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用parse方法将文件解析成AST</span></span><br><span class=\"line\"><span class=\"comment\">     * sourceType: 解析代码的模式，为module时可以解析ES6导入或导出语句</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(file, &#123; <span class=\"attr\">sourceType</span>: <span class=\"string\">&quot;module&quot;</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ast</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.@babel/traverse遍历AST收集依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDeps</span> = (<span class=\"params\">filePath, ast</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deps = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件所在文件夹的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dirname = path.<span class=\"title function_\">dirname</span>(filePath)</span><br><span class=\"line\">    <span class=\"comment\">// 内部会遍历ast中的program.body，判断里面语句类型</span></span><br><span class=\"line\">    <span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 当type为ImportDeclaration时，会执行下面的回调</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数NodePath里存储了当前执行的语句的详细信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"title class_\">ImportDeclaration</span>: <span class=\"function\">(<span class=\"params\">NodePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖的文件的相对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> relativePath = <span class=\"title class_\">NodePath</span>.<span class=\"property\">node</span>.<span class=\"property\">source</span>.<span class=\"property\">value</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成基于入口文件的绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> absolutePath = path.<span class=\"title function_\">resolve</span>(dirname, relativePath)</span><br><span class=\"line\">            <span class=\"comment\">// 添加依赖</span></span><br><span class=\"line\">            deps[relativePath] = absolutePath</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deps</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.@bebel/core将AST解析为对应的es5代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getCode</span> = (<span class=\"params\">ast</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; code &#125; = <span class=\"title function_\">transformFromAstSync</span>(ast, <span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    getAst,</span><br><span class=\"line\">    getDeps,</span><br><span class=\"line\">    getCode</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h4><p>供打包后测试使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/index.bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/index.test.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h3><p>将一个入口文件及其依赖js打包到一个出口文件。</p>\n<p>注意：只是简单实现webpack的部分功能，目的是帮助理解webpack的打包流程。</p>\n<h3 id=\"webpack打包流程\"><a href=\"#webpack打包流程\" class=\"headerlink\" title=\"webpack打包流程\"></a>webpack打包流程</h3><ol>\n<li>初始化Compiler:  new Webpack(config)得到Compiler对象；</li>\n<li>开始编译：调用Compiler对象run方法开始执行编译；</li>\n<li>确定入口：根据配置中的entry找到所有入口文件；</li>\n<li>编译模块：从入口文件出发，调用所有配置的Loader对模块进行编译，再找出该模块依赖的模块，递归直到所有的模块都被加载；</li>\n<li>完成模块编译：使用Loader编译完所有模块后，得到了每个模块被编译后的最终内容以及模块的依赖关系图；</li>\n<li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><h4 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- ToysWebpack</span><br><span class=\"line\">    |-- config</span><br><span class=\"line\">        |-- index.js 执行这个文件，开始打包</span><br><span class=\"line\">        |-- webpack.prod.config.js 生产环境webpack打包配置</span><br><span class=\"line\">        |-- webpack.test.config.js 测试环境webpack打包配置</span><br><span class=\"line\">    |-- dist</span><br><span class=\"line\">        |-- index.bundle.js 生产环境包</span><br><span class=\"line\">        |-- index.test.js 测试环境包</span><br><span class=\"line\">    |-- node_modules</span><br><span class=\"line\">    |-- src 待打包的原始文件夹，出了两个环境的打包入口文件，其他都是依赖文件</span><br><span class=\"line\">        |-- add.js </span><br><span class=\"line\">        |-- error.js</span><br><span class=\"line\">        |-- index.js 生产环境打包的入口文件</span><br><span class=\"line\">        |-- log.js</span><br><span class=\"line\">        |-- minus.js</span><br><span class=\"line\">        |-- test.js 测试环境打包的入口文件</span><br><span class=\"line\">    |-- webpack </span><br><span class=\"line\">        |-- Compiler.js 打包主文件</span><br><span class=\"line\">        |-- index.js webpack打包的开始执行文件</span><br><span class=\"line\">        |-- parse.js 编译工具</span><br><span class=\"line\">    |-- index.html 供打包后测试使用</span><br><span class=\"line\">    |-- package-lock.json</span><br><span class=\"line\">    |-- package.json 打包脚本写里面</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>debug - 调试脚本， test - 打测试环境包， prod - 打生产环境包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;toys_webpack&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;debug&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=prod node --inspect-brk ./config/index.js &quot;</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=test node ./config/index.js &quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prod&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=prod node ./config/index.js &quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/core&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/parser&quot;</span>: <span class=\"string\">&quot;^7.15.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/preset-env&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/traverse&quot;</span>: <span class=\"string\">&quot;^7.15.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cross-env&quot;</span>: <span class=\"string\">&quot;^7.0.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mkdirp&quot;</span>: <span class=\"string\">&quot;^1.0.4&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"config文件夹\"><a href=\"#config文件夹\" class=\"headerlink\" title=\"config文件夹\"></a>config文件夹</h4><p>index.js：执行package.json里的脚本后会到这个文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../webpack/index.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒加载当前运行环境的打包配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> optionsMap = &#123;</span><br><span class=\"line\">    <span class=\"attr\">prod</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.prod.config.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.test.config.js&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = optionsMap[env]()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给webpack函数传入打包配置，返回一个Compiler实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"title function_\">webpack</span>(options)</span><br><span class=\"line\"><span class=\"comment\">// 执行run方法开始编译打包</span></span><br><span class=\"line\">compiler.<span class=\"title function_\">run</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.prod.config.js：生产环境打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;../src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.bundle.js&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.test.config.js: 测试环境打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;../src/test.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.test.js&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"src文件夹\"><a href=\"#src文件夹\" class=\"headerlink\" title=\"src文件夹\"></a>src文件夹</h4><h5 id=\"生产环境相关文件\"><a href=\"#生产环境相关文件\" class=\"headerlink\" title=\"生产环境相关文件\"></a>生产环境相关文件</h5><p>index.js: 入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./add.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./log.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>add.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">a, b</span>) =&gt; a + b</span><br></pre></td></tr></table></figure>\n\n\n\n<p>log.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> log =  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"测试环境相关代码\"><a href=\"#测试环境相关代码\" class=\"headerlink\" title=\"测试环境相关代码\"></a>测试环境相关代码</h5><p>test.js: 入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; minus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./minus.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; error &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./error.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">error</span>(<span class=\"title function_\">minus</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>minus.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">minus</span> = (<span class=\"params\">a, b</span>) =&gt; a - b</span><br></pre></td></tr></table></figure>\n\n\n\n<p>error.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> error =  <span class=\"variable language_\">console</span>.<span class=\"property\">error</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"webpack文件夹\"><a href=\"#webpack文件夹\" class=\"headerlink\" title=\"webpack文件夹\"></a>webpack文件夹</h4><h5 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h5><p>webpack打包的开始执行文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Compiler</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Compiler.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ToysWebpack只做一件事：将入口文件及其依赖打包到出口文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">webpack</span> = (<span class=\"params\">options</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Compiler</span>(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = webpack</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"Compiler-js\"><a href=\"#Compiler-js\" class=\"headerlink\" title=\"Compiler.js\"></a>Compiler.js</h5><p>打包主文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mkdirp&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getAst, getDeps, getCode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./parse.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../config/webpack.prod.config.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Compiler</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (options) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options</span><br><span class=\"line\">        <span class=\"comment\">// 所有依赖的容器</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span> = []</span><br><span class=\"line\">        <span class=\"comment\">// 入口文件绝对路径</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">entryFilePath</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;config&#x27;</span>, options.<span class=\"property\">entry</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 编译打包</span></span><br><span class=\"line\">    run () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始第一次构建，得到入口文件的信息</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileInfo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">entryFilePath</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 将入口文件的信息添加到容器</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">push</span>(fileInfo)</span><br><span class=\"line\">        <span class=\"comment\">// 遍历fileInfo的deps, 递归得到依赖文件的信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出当前文件的所有依赖</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> deps = item.<span class=\"property\">deps</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dep <span class=\"keyword\">in</span> deps) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * dep: 依赖相对路径</span></span><br><span class=\"line\"><span class=\"comment\">                 * deps[dep]: 依赖绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">                 * 得到依赖文件的信息</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> depFileInfo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">build</span>(deps[dep])</span><br><span class=\"line\">                <span class=\"comment\">// 将处理过后的依赖信息添加到容器中，后面会遍历到完成下一层的递归</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">push</span>(depFileInfo)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 整理依赖关系图</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> depsGraph =  <span class=\"variable language_\">this</span>.<span class=\"property\">modules</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">graph, <span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...graph,</span><br><span class=\"line\">                [<span class=\"variable language_\">module</span>.<span class=\"property\">filePath</span>]: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">deps</span>: <span class=\"variable language_\">module</span>.<span class=\"property\">deps</span>,</span><br><span class=\"line\">                    <span class=\"attr\">code</span>: <span class=\"variable language_\">module</span>.<span class=\"property\">code</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;&#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 生成输出文件</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">generate</span> = (<span class=\"params\">depsGraph</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 定义一个匿名立即执行函数，确保里面的代码只能自己操作</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> bundle = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">              (function(depsGraph)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                // require目的：加载入口文件</span></span><br><span class=\"line\"><span class=\"string\">                function require(module)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    // 函数内部的require其实执行的是localRequire</span></span><br><span class=\"line\"><span class=\"string\">                    function localRequire(relativePath)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                        // 找到要引入模块的绝对路径，通过require加载</span></span><br><span class=\"line\"><span class=\"string\">                        return require(depsGraph[module].deps[relativePath])</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    // 定义暴露的对象，将来模块要暴露的内容都放在这里</span></span><br><span class=\"line\"><span class=\"string\">                    let exports = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"string\">                    (function(require, exports, code)&#123;</span></span><br><span class=\"line\"><span class=\"string\">                        eval(code)</span></span><br><span class=\"line\"><span class=\"string\">                    &#125;)(localRequire, exports, depsGraph[module].code);</span></span><br><span class=\"line\"><span class=\"string\">                    // 作为require的返回值返回出去</span></span><br><span class=\"line\"><span class=\"string\">                    return exports</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                require(&#x27;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.entryFilePath&#125;</span>&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">              &#125;)(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(depsGraph)&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">            `</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成输出文件的绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; <span class=\"attr\">path</span>: outputPath, filename &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">output</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">resolve</span>(outputPath, filename)</span><br><span class=\"line\">            <span class=\"comment\">// 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> made = mkdirp.<span class=\"title function_\">sync</span>(path.<span class=\"title function_\">dirname</span>(filePath))</span><br><span class=\"line\">            fs.<span class=\"title function_\">writeFileSync</span>(filePath, bundle)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">generate</span>(depsGraph)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始构建</span></span><br><span class=\"line\">    build (filePath) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将入口文件解析ast</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ast = <span class=\"title function_\">getAst</span>(filePath)</span><br><span class=\"line\">        <span class=\"comment\">// 获取ast中所有的依赖</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> deps = <span class=\"title function_\">getDeps</span>(filePath, ast)</span><br><span class=\"line\">        <span class=\"comment\">// 将ast解析成code</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> code = <span class=\"title function_\">getCode</span>(ast)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 文件路径</span></span><br><span class=\"line\">            filePath,</span><br><span class=\"line\">            <span class=\"comment\">// 当前文件的所有依赖</span></span><br><span class=\"line\">            deps,</span><br><span class=\"line\">            <span class=\"comment\">// 当前文件解析后的代码</span></span><br><span class=\"line\">            code</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Compiler</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"parse-js\"><a href=\"#parse-js\" class=\"headerlink\" title=\"parse.js\"></a>parse.js</h5><p>编译工具</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; parse &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/traverse&#x27;</span>).<span class=\"property\">default</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; transformFromAstSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/core&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * tips:下面三步也是将ES6转化成ES5的核心步骤，</span></span><br><span class=\"line\"><span class=\"comment\"> * 当然在项目实践中不需要去这么转化，有封装得更易于使用的轮子。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. @babel/parser将es6的代码解析为AST</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getAst</span> = (<span class=\"params\">filePath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 同步读取文件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = fs.<span class=\"title function_\">readFileSync</span>(filePath, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用parse方法将文件解析成AST</span></span><br><span class=\"line\"><span class=\"comment\">     * sourceType: 解析代码的模式，为module时可以解析ES6导入或导出语句</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(file, &#123; <span class=\"attr\">sourceType</span>: <span class=\"string\">&quot;module&quot;</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ast</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.@babel/traverse遍历AST收集依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDeps</span> = (<span class=\"params\">filePath, ast</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deps = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件所在文件夹的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dirname = path.<span class=\"title function_\">dirname</span>(filePath)</span><br><span class=\"line\">    <span class=\"comment\">// 内部会遍历ast中的program.body，判断里面语句类型</span></span><br><span class=\"line\">    <span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 当type为ImportDeclaration时，会执行下面的回调</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数NodePath里存储了当前执行的语句的详细信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"title class_\">ImportDeclaration</span>: <span class=\"function\">(<span class=\"params\">NodePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖的文件的相对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> relativePath = <span class=\"title class_\">NodePath</span>.<span class=\"property\">node</span>.<span class=\"property\">source</span>.<span class=\"property\">value</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成基于入口文件的绝对路径</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> absolutePath = path.<span class=\"title function_\">resolve</span>(dirname, relativePath)</span><br><span class=\"line\">            <span class=\"comment\">// 添加依赖</span></span><br><span class=\"line\">            deps[relativePath] = absolutePath</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deps</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.@bebel/core将AST解析为对应的es5代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getCode</span> = (<span class=\"params\">ast</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; code &#125; = <span class=\"title function_\">transformFromAstSync</span>(ast, <span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    getAst,</span><br><span class=\"line\">    getDeps,</span><br><span class=\"line\">    getCode</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h4><p>供打包后测试使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/index.bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./dist/index.test.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"手写防抖与节流函数","date":"2021-08-03T16:00:00.000Z","_content":"\n## 防抖节流应用场景？\n\n按照需求来确定是用防抖还是节流：\n\n> tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。\n\n1. 监听浏览器resize事件；\n2. 文本编辑器实时保存；\n3. 输入框的模糊查询功能；\n...\n\n\n\n## 防抖函数\n\n### 防抖的原理是什么？\n\n防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。\n\n\n\n###  实现一个防抖函数？\n\n```javascript\nconst debounce = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * 除了第一次timers为null,后续函数的调用timer都有值；\n         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；\n         * 注意：clearTimeout(timer)执行之后，timer的值没变。\n         */\n        if (timer) clearTimeout(timer)\n        // 将新的定时器赋值给timer\n        timer = setTimeout(() => {\n            fn.apply(this, args)\n        }, delay)\n    }\n}\n```\n\n\n\n## 节流函数\n\n### 节流的原理是什么？\n\n节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。\n\n\n\n### 实现一个节流函数？\n\n#### 1.使用定时器\n\n```javascript\nconst throttle = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * timer为null的两种情况：\n         * 1.第一次执行函数timer初始值为空；\n         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。\n         */\n        if (!timer) {\n            timer = setTimeout(() => {\n              \t/**\n                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，\n                 * 还是因为clearTimeout(timer)执行之后，timer的值没变\n                 */\n                timer = null\n                fn.apply(this, args)\n            }, delay)\n        }\n    }\n}\n```\n\n#### 2.使用时间戳\n\n```javascript\nfunction throttle_2(fn, delay) {\n    let previous = 0;\n    return function () {\n        // 存储参数\n        let args = arguments\n        const nowTime = Date.now()\n         /**\n         * 执行的两种情况：\n         * 1.第一次执行函数previous为0，nowTime-0>delay；\n         * 2.距离上一次执行时间超过了delay。\n         */\n        if (nowTime - previous > delay) {\n            fn.apply(this, args)\n            previous = nowTime\n        }\n    }\n}\n```\n\n","source":"_posts/手写防抖与节流函数.md","raw":"---\ntitle: 手写防抖与节流函数\n\ndate: 2021-08-04\n\ntags: [防抖,节流]\n\ncategories: javascript\n---\n\n## 防抖节流应用场景？\n\n按照需求来确定是用防抖还是节流：\n\n> tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。\n\n1. 监听浏览器resize事件；\n2. 文本编辑器实时保存；\n3. 输入框的模糊查询功能；\n...\n\n\n\n## 防抖函数\n\n### 防抖的原理是什么？\n\n防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。\n\n\n\n###  实现一个防抖函数？\n\n```javascript\nconst debounce = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * 除了第一次timers为null,后续函数的调用timer都有值；\n         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；\n         * 注意：clearTimeout(timer)执行之后，timer的值没变。\n         */\n        if (timer) clearTimeout(timer)\n        // 将新的定时器赋值给timer\n        timer = setTimeout(() => {\n            fn.apply(this, args)\n        }, delay)\n    }\n}\n```\n\n\n\n## 节流函数\n\n### 节流的原理是什么？\n\n节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。\n\n\n\n### 实现一个节流函数？\n\n#### 1.使用定时器\n\n```javascript\nconst throttle = (fn, delay) => {\n    let timer = null\n    /**\n     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；\n     * 注意：这里不能使用箭头函数，因为后面会用到this。\n     */\n    return function () {\n        // 存储参数\n        let args = arguments\n        /**\n         * timer为null的两种情况：\n         * 1.第一次执行函数timer初始值为空；\n         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。\n         */\n        if (!timer) {\n            timer = setTimeout(() => {\n              \t/**\n                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，\n                 * 还是因为clearTimeout(timer)执行之后，timer的值没变\n                 */\n                timer = null\n                fn.apply(this, args)\n            }, delay)\n        }\n    }\n}\n```\n\n#### 2.使用时间戳\n\n```javascript\nfunction throttle_2(fn, delay) {\n    let previous = 0;\n    return function () {\n        // 存储参数\n        let args = arguments\n        const nowTime = Date.now()\n         /**\n         * 执行的两种情况：\n         * 1.第一次执行函数previous为0，nowTime-0>delay；\n         * 2.距离上一次执行时间超过了delay。\n         */\n        if (nowTime - previous > delay) {\n            fn.apply(this, args)\n            previous = nowTime\n        }\n    }\n}\n```\n\n","slug":"手写防抖与节流函数","published":1,"updated":"2023-11-07T03:36:00.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88g002su17uehkg0hfq","content":"<h2 id=\"防抖节流应用场景？\"><a href=\"#防抖节流应用场景？\" class=\"headerlink\" title=\"防抖节流应用场景？\"></a>防抖节流应用场景？</h2><p>按照需求来确定是用防抖还是节流：</p>\n<blockquote>\n<p>tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。</p>\n</blockquote>\n<ol>\n<li>监听浏览器resize事件；</li>\n<li>文本编辑器实时保存；</li>\n<li>输入框的模糊查询功能；<br>…</li>\n</ol>\n<h2 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h2><h3 id=\"防抖的原理是什么？\"><a href=\"#防抖的原理是什么？\" class=\"headerlink\" title=\"防抖的原理是什么？\"></a>防抖的原理是什么？</h3><p>防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。</p>\n<h3 id=\"实现一个防抖函数？\"><a href=\"#实现一个防抖函数？\" class=\"headerlink\" title=\"实现一个防抖函数？\"></a>实现一个防抖函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, delay</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 除了第一次timers为null,后续函数的调用timer都有值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；</span></span><br><span class=\"line\"><span class=\"comment\">         * 注意：clearTimeout(timer)执行之后，timer的值没变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        <span class=\"comment\">// 将新的定时器赋值给timer</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h2><h3 id=\"节流的原理是什么？\"><a href=\"#节流的原理是什么？\" class=\"headerlink\" title=\"节流的原理是什么？\"></a>节流的原理是什么？</h3><p>节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。</p>\n<h3 id=\"实现一个节流函数？\"><a href=\"#实现一个节流函数？\" class=\"headerlink\" title=\"实现一个节流函数？\"></a>实现一个节流函数？</h3><h4 id=\"1-使用定时器\"><a href=\"#1-使用定时器\" class=\"headerlink\" title=\"1.使用定时器\"></a>1.使用定时器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, delay</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * timer为null的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数timer初始值为空；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 还是因为clearTimeout(timer)执行之后，timer的值没变</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            &#125;, delay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用时间戳\"><a href=\"#2-使用时间戳\" class=\"headerlink\" title=\"2.使用时间戳\"></a>2.使用时间戳</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle_2</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数previous为0，nowTime-0&gt;delay；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.距离上一次执行时间超过了delay。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nowTime - previous &gt; delay) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            previous = nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖节流应用场景？\"><a href=\"#防抖节流应用场景？\" class=\"headerlink\" title=\"防抖节流应用场景？\"></a>防抖节流应用场景？</h2><p>按照需求来确定是用防抖还是节流：</p>\n<blockquote>\n<p>tips: 在连续频繁操作的时间区域内，要能执行函数的情况用节流。</p>\n</blockquote>\n<ol>\n<li>监听浏览器resize事件；</li>\n<li>文本编辑器实时保存；</li>\n<li>输入框的模糊查询功能；<br>…</li>\n</ol>\n<h2 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h2><h3 id=\"防抖的原理是什么？\"><a href=\"#防抖的原理是什么？\" class=\"headerlink\" title=\"防抖的原理是什么？\"></a>防抖的原理是什么？</h3><p>防抖的原理就是：不管怎么触发事件，但是一定在事件触发 n 秒后才执行，如果一个事件触发的 n 秒内又触发了这个事件，那就以新事件的时间为准，n 秒后才执行，总之就是要等触发完事件 n 秒内不再触发事件才执行。</p>\n<h3 id=\"实现一个防抖函数？\"><a href=\"#实现一个防抖函数？\" class=\"headerlink\" title=\"实现一个防抖函数？\"></a>实现一个防抖函数？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, delay</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 除了第一次timers为null,后续函数的调用timer都有值；</span></span><br><span class=\"line\"><span class=\"comment\">         * 这一步要做的是清除目前正在进行的定时器，即使时间到了也不能执行回调函数；</span></span><br><span class=\"line\"><span class=\"comment\">         * 注意：clearTimeout(timer)执行之后，timer的值没变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        <span class=\"comment\">// 将新的定时器赋值给timer</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h2><h3 id=\"节流的原理是什么？\"><a href=\"#节流的原理是什么？\" class=\"headerlink\" title=\"节流的原理是什么？\"></a>节流的原理是什么？</h3><p>节流的原理是：一个函数执行一次后，只有大于设定的执行周期，才会执行第二次。也就是说：在规定的时间内，只让函数触发的第一次生效，后面的不生效。</p>\n<h3 id=\"实现一个节流函数？\"><a href=\"#实现一个节流函数？\" class=\"headerlink\" title=\"实现一个节流函数？\"></a>实现一个节流函数？</h3><h4 id=\"1-使用定时器\"><a href=\"#1-使用定时器\" class=\"headerlink\" title=\"1.使用定时器\"></a>1.使用定时器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, delay</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值也是一个函数，函数内部的变量就是局部变量，可以避免造成全局污染；</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：这里不能使用箭头函数，因为后面会用到this。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * timer为null的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数timer初始值为空；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.每次定时器到时间了，执行回调时会将timer赋值为空。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">              \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意：这里直接将timer是赋值为null，而不是使用clearTimeout，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 还是因为clearTimeout(timer)执行之后，timer的值没变</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            &#125;, delay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用时间戳\"><a href=\"#2-使用时间戳\" class=\"headerlink\" title=\"2.使用时间戳\"></a>2.使用时间戳</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle_2</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储参数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">         <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行的两种情况：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.第一次执行函数previous为0，nowTime-0&gt;delay；</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.距离上一次执行时间超过了delay。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nowTime - previous &gt; delay) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            previous = nowTime</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"时间复杂度和空间复杂度","date":"2021-07-18T16:00:00.000Z","_content":"\n### 时间复杂度\n\n#### 科普：\n\n算法的时间复杂度是一个函数，它定性描述该算法的运行时间。算法的时间复杂度通常用大O符号表述，定义为T[n] = O(f(n))。大O表示法是一种特殊的表示法，指出了算法的速度有多快。\n\n#### 从快到慢列出常见5种大O运行时间：\n\nO(log n)：也叫对数时间，这样的算法包括二分查找；\n\nO(n)：也叫线性时间，这样的算法包括简单查找；\n\nO(n ＊ log n)：这样的算法包括快速排序；\n\nO(n2)：这样的算法包括选择排序；\n\nO(n! )：这样的算法包括旅行商问题的解决方案。\n\n#### 注意：\n\n- 大O表示法指出了最糟情况下的运行时间；\n- 算法的速度指的并非时间，而是操作数的增速；\n\n- 谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加；\n- 算法的运行时间用大O表示法表示。\n\n\n\n### 空间复杂度\n\n#### 科普\n\n空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。\n\n#### 注意：\n\n- 通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为0(1)；\n- 算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。\n\n\n\n### 常见排序算法的时间复杂度和空间复杂度\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8.png)","source":"_posts/时间复杂度和空间复杂度.md","raw":"---\ntitle: 时间复杂度和空间复杂度\n\ndate: 2021-07-19\n\ntags: [时间复杂度,空间复杂度]\n\ncategories: 算法\n---\n\n### 时间复杂度\n\n#### 科普：\n\n算法的时间复杂度是一个函数，它定性描述该算法的运行时间。算法的时间复杂度通常用大O符号表述，定义为T[n] = O(f(n))。大O表示法是一种特殊的表示法，指出了算法的速度有多快。\n\n#### 从快到慢列出常见5种大O运行时间：\n\nO(log n)：也叫对数时间，这样的算法包括二分查找；\n\nO(n)：也叫线性时间，这样的算法包括简单查找；\n\nO(n ＊ log n)：这样的算法包括快速排序；\n\nO(n2)：这样的算法包括选择排序；\n\nO(n! )：这样的算法包括旅行商问题的解决方案。\n\n#### 注意：\n\n- 大O表示法指出了最糟情况下的运行时间；\n- 算法的速度指的并非时间，而是操作数的增速；\n\n- 谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加；\n- 算法的运行时间用大O表示法表示。\n\n\n\n### 空间复杂度\n\n#### 科普\n\n空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。\n\n#### 注意：\n\n- 通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为0(1)；\n- 算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。\n\n\n\n### 常见排序算法的时间复杂度和空间复杂度\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8.png)","slug":"时间复杂度和空间复杂度","published":1,"updated":"2023-11-07T03:36:00.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88h002xu17u8ptwb41t","content":"<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><h4 id=\"科普：\"><a href=\"#科普：\" class=\"headerlink\" title=\"科普：\"></a>科普：</h4><p>算法的时间复杂度是一个函数，它定性描述该算法的运行时间。算法的时间复杂度通常用大O符号表述，定义为T[n] = O(f(n))。大O表示法是一种特殊的表示法，指出了算法的速度有多快。</p>\n<h4 id=\"从快到慢列出常见5种大O运行时间：\"><a href=\"#从快到慢列出常见5种大O运行时间：\" class=\"headerlink\" title=\"从快到慢列出常见5种大O运行时间：\"></a>从快到慢列出常见5种大O运行时间：</h4><p>O(log n)：也叫对数时间，这样的算法包括二分查找；</p>\n<p>O(n)：也叫线性时间，这样的算法包括简单查找；</p>\n<p>O(n ＊ log n)：这样的算法包括快速排序；</p>\n<p>O(n2)：这样的算法包括选择排序；</p>\n<p>O(n! )：这样的算法包括旅行商问题的解决方案。</p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li><p>大O表示法指出了最糟情况下的运行时间；</p>\n</li>\n<li><p>算法的速度指的并非时间，而是操作数的增速；</p>\n</li>\n<li><p>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加；</p>\n</li>\n<li><p>算法的运行时间用大O表示法表示。</p>\n</li>\n</ul>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><h4 id=\"科普\"><a href=\"#科普\" class=\"headerlink\" title=\"科普\"></a>科普</h4><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。</p>\n<h4 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为0(1)；</li>\n<li>算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。</li>\n</ul>\n<h3 id=\"常见排序算法的时间复杂度和空间复杂度\"><a href=\"#常见排序算法的时间复杂度和空间复杂度\" class=\"headerlink\" title=\"常见排序算法的时间复杂度和空间复杂度\"></a>常见排序算法的时间复杂度和空间复杂度</h3><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><h4 id=\"科普：\"><a href=\"#科普：\" class=\"headerlink\" title=\"科普：\"></a>科普：</h4><p>算法的时间复杂度是一个函数，它定性描述该算法的运行时间。算法的时间复杂度通常用大O符号表述，定义为T[n] = O(f(n))。大O表示法是一种特殊的表示法，指出了算法的速度有多快。</p>\n<h4 id=\"从快到慢列出常见5种大O运行时间：\"><a href=\"#从快到慢列出常见5种大O运行时间：\" class=\"headerlink\" title=\"从快到慢列出常见5种大O运行时间：\"></a>从快到慢列出常见5种大O运行时间：</h4><p>O(log n)：也叫对数时间，这样的算法包括二分查找；</p>\n<p>O(n)：也叫线性时间，这样的算法包括简单查找；</p>\n<p>O(n ＊ log n)：这样的算法包括快速排序；</p>\n<p>O(n2)：这样的算法包括选择排序；</p>\n<p>O(n! )：这样的算法包括旅行商问题的解决方案。</p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li><p>大O表示法指出了最糟情况下的运行时间；</p>\n</li>\n<li><p>算法的速度指的并非时间，而是操作数的增速；</p>\n</li>\n<li><p>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加；</p>\n</li>\n<li><p>算法的运行时间用大O表示法表示。</p>\n</li>\n</ul>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><h4 id=\"科普\"><a href=\"#科普\" class=\"headerlink\" title=\"科普\"></a>科普</h4><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。</p>\n<h4 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>通常来说，只要算法不涉及到动态分配的空间以及递归、栈所需的空间，空间复杂度通常为0(1)；</li>\n<li>算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数，与问题的规模没有关系。</li>\n</ul>\n<h3 id=\"常见排序算法的时间复杂度和空间复杂度\"><a href=\"#常见排序算法的时间复杂度和空间复杂度\" class=\"headerlink\" title=\"常见排序算法的时间复杂度和空间复杂度\"></a>常见排序算法的时间复杂度和空间复杂度</h3><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8.png\" alt=\"img\"></p>\n"},{"title":"浏览器的事件循环机制","_content":"\n#### 基本概念\n\n在研究浏览器的事件循环机制之前，先了解几个关键词。\n\n##### 执行栈\n\n同步任务都在主线程上执行，形成一个执行栈，可以认为是一个存储函数调用的栈结构，遵循后进先出的原则。\n\n\n\n##### 任务队列\n\n只要异步任务有了运行结果，就在任务队列中放置一个事件。异步任务分为宏任务macro-task和微任务micro-task，在es6中宏任务被称为task，微任务被称为jobs。宏任务会放置在宏任务队列，微任务会放置在微任务队列。\n\n\n\n##### 宏任务\n\n浏览器常见的宏任务：script（整体代码）、setTimeout、setInterval、setImmediate、UI render。\n\n\n\n##### 微任务\n\n浏览器常见的微任务：Promise.then、Async/Await、MutationObserver（h5新特性）。\n\n\n\n\n\n#### 事件循环过程\n\n1. 开始的时候执行栈和微任务队列为空，宏任务队列有且只有一个script脚本（整体代码）；\n2. 执行栈中同步任务执行完毕后，系统会读取任务队列。只有宏任务队列有一个script脚本（整体代码）的异步任务，将该宏任务推入执行栈；\n3. 执行过程中，遇到同步代码直接执行，生成宏任务添加到宏任务队列，生成微任务添加到微任务队列。等同步代码执行玩后，script脚本被移除宏任务队列，这个就是宏任务的执行和出队列的过程；\n4. 执行完一个宏任务之后，接下来就是处理上一个宏任务执行过程中产生的微任务队列，逐个执行微任务并将任务出队，直到队列被清空。需要注意的是宏任务的执行和出队是一个一个执行的，而微任务的执行和出队是一队一队的；\n5. 执行渲染操作，更新界面；\n6. 上面过程循环往复，知道宏任务队列和微任务队列都清空。\n\n\n\n\n\n#### 举几个🌰\n\n##### 宏任务和微任务执行顺序\n\n``` javascript\nPromise.resolve().then(()=>{\n    console.log('Promise1')\n    setTimeout(()=>{\n      console.log('setTimeout2')\n    },0)\n  })\n  setTimeout(()=>{\n    console.log('setTimeout1')\n    Promise.resolve().then(()=>{\n      console.log('Promise2')\n    })\n  },0)\n\n// 执行顺序：Promise1 -> setTimeout1 -> Promise2 -> setTimeout2\n```\n\n执行流程分析：\n\n整体代码是一个宏任务，将宏任务压入执行栈。执行过程中先生成了一个微任务简称为Promise1添加到微任务队列，后面又生成一个宏任务简称setTimeout1添加到宏任务队列。执行完这个整体代码的宏任务之后，将这个宏任务出队列。\n\n接下来就是执行上一个宏任务（整体代码）生成的微任务队列，开始执行Promise1。执行微任务p1的时候生成一个宏任务setTimeout2，将宏任务setTimeout2添加到宏任务队列，此时宏任务队列有setTimeout1和setTimeout2。\n\n微任务队列执行完成，执行宏任务队列最前面的宏任务setTimeout1，因为队列的原则是先进先出。在执行宏任务setTimeout1的时候，生成了微任务Promise2。执行完宏任务setTimeout1，将这个宏任务出队列。\n\n接下来就是执行上一个宏任务（setTimeout1）生成的微任务队列，开始执行Promise2。执行完微任务列队，再来执行宏任务里的唯一的一个宏任务setTimeout2。执行完宏任务setTimeout2，将这个宏任务出队列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n⚠️微任务执行完也是会出列的。\n\n\n\n##### Async/Await执行顺序\n\n> 科普知识：await下面的代码怎么执行？\n>\n> 如果await后面跟同步函数的调用。相当于直接将await下面的代码注册为一个微任务，可简单理解为promise.then(await下面的代码)。然后跳出async函数，执行其他代码。\n>\n> 如果await后面跟一个异步函数的调用，当await之后的函数中同步任务被执行，异步任务被添加到任务队列之后，直接跳出async函数，执行剩下代码，等剩下代码同步任务被执行，异步代码被添加到任务队列之后，再来将await下面的代码注册为一个微任务。\n\n###### await后面跟同步函数的调用\n\n``` javascript\nconsole.log('script start')\n\nasync function async1() {\n    await async2()\n    console.log('async1 end')\n}\nasync function async2() {\n    console.log('async2 end')\n}\nasync1()\n\nsetTimeout(function() {\n    console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n    console.log('Promise')\n    resolve()\n})\n.then(function() {\n    console.log('promise1')\n})\n.then(function() {\n    console.log('promise2')\n})\n\nconsole.log('script end')\n\n// 执行结果： script start -> async2 end -> Promise -> script end\n// -> async1 end -> promise1 -> promise2 -> setTimeout\n```\n\n执行流程分析：\n\n1. 整体代码是个宏任务压入执行栈执行，执行同步任务打印'script start'；\n2. 执行async1时，await后面的函数可以当作同步任务执行，打印'async2 end'；\n3. 因为async1中的await后面的函数并不是异步函数，所以可以直接将await下面的代码生成为一个微任务，并添加到微任务队列；\n4. 代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；\n5. 代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印'Promise'；\n6. 代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；\n7. 执行同步任务打印'script end'，将全部代码这个宏任务出列；\n8. 开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是await下面的代码生成的微任务、promise1和promise2，依次执行出队列。结果是按顺序打印'async1 end'、'promise1'、 'promise2'；\n9. 执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；\n10. 执行setTimeout宏任务，打印'setTimeout'，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n\n\n###### await后面跟异步函数的调用\n\n``` javascript\nconsole.log('script start')\n\nasync function async1() {\n    await async2()\n    console.log('async1 end')\n}\nasync function async2() {\n    console.log('async2 end')\n    return Promise.resolve().then(()=>{\n        console.log('async2 end1')\n    })\n}\nasync1()\n\nsetTimeout(function() {\n    console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n    console.log('Promise')\n    resolve()\n})\n.then(function() {\n    console.log('promise1')\n})\n.then(function() {\n    console.log('promise2')\n})\n\nconsole.log('script end')\n\n// 执行结果： script start -> async2 end -> Promise -> script end\n//  -> async2 end1 -> promise1 -> promise2 -> async1 end -> setTimeout\n```\n\n执行流程分析（跟上个🌰的流程差别，主要是await后面的代码执行时机，具体是步骤2、3、8）：\n\n1. 整体代码是个宏任务压入执行栈执行，执行同步任务打印'script start'；\n2. 执行async1时，await后面的函数可以当作同步任务执行。async2函数执行打印'async2 end'，生成一个微任务简称为Promise async2；\n3. 因为async1中的await后面的函数是异步函数，所以直接跳出了async1函数；\n4. 代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；\n5. 代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印'Promise'；\n6. 代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；\n7. 执行同步任务打印'script end'，再回到async1函数中将await下面的代码生成为一个微任务，并添加到微任务队列。此时本轮宏任务执行就执行完了，将全部代码这个宏任务出列；\n8. 开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是Promise async2、promise1、promise2和await下面的代码生成的微任务，依次执行出队列。结果是按顺序打印'async2 end1'、'promise1'、 'promise2'、'async1 end'；\n9. 执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；\n10. 执行setTimeout宏任务，打印'setTimeout'，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n\n\n\n\n","source":"_posts/浏览器的事件循环机制.md","raw":"---\ntitle: 浏览器的事件循环机制\n\ntags: [事件循环]\n\ncategories: 浏览器\n---\n\n#### 基本概念\n\n在研究浏览器的事件循环机制之前，先了解几个关键词。\n\n##### 执行栈\n\n同步任务都在主线程上执行，形成一个执行栈，可以认为是一个存储函数调用的栈结构，遵循后进先出的原则。\n\n\n\n##### 任务队列\n\n只要异步任务有了运行结果，就在任务队列中放置一个事件。异步任务分为宏任务macro-task和微任务micro-task，在es6中宏任务被称为task，微任务被称为jobs。宏任务会放置在宏任务队列，微任务会放置在微任务队列。\n\n\n\n##### 宏任务\n\n浏览器常见的宏任务：script（整体代码）、setTimeout、setInterval、setImmediate、UI render。\n\n\n\n##### 微任务\n\n浏览器常见的微任务：Promise.then、Async/Await、MutationObserver（h5新特性）。\n\n\n\n\n\n#### 事件循环过程\n\n1. 开始的时候执行栈和微任务队列为空，宏任务队列有且只有一个script脚本（整体代码）；\n2. 执行栈中同步任务执行完毕后，系统会读取任务队列。只有宏任务队列有一个script脚本（整体代码）的异步任务，将该宏任务推入执行栈；\n3. 执行过程中，遇到同步代码直接执行，生成宏任务添加到宏任务队列，生成微任务添加到微任务队列。等同步代码执行玩后，script脚本被移除宏任务队列，这个就是宏任务的执行和出队列的过程；\n4. 执行完一个宏任务之后，接下来就是处理上一个宏任务执行过程中产生的微任务队列，逐个执行微任务并将任务出队，直到队列被清空。需要注意的是宏任务的执行和出队是一个一个执行的，而微任务的执行和出队是一队一队的；\n5. 执行渲染操作，更新界面；\n6. 上面过程循环往复，知道宏任务队列和微任务队列都清空。\n\n\n\n\n\n#### 举几个🌰\n\n##### 宏任务和微任务执行顺序\n\n``` javascript\nPromise.resolve().then(()=>{\n    console.log('Promise1')\n    setTimeout(()=>{\n      console.log('setTimeout2')\n    },0)\n  })\n  setTimeout(()=>{\n    console.log('setTimeout1')\n    Promise.resolve().then(()=>{\n      console.log('Promise2')\n    })\n  },0)\n\n// 执行顺序：Promise1 -> setTimeout1 -> Promise2 -> setTimeout2\n```\n\n执行流程分析：\n\n整体代码是一个宏任务，将宏任务压入执行栈。执行过程中先生成了一个微任务简称为Promise1添加到微任务队列，后面又生成一个宏任务简称setTimeout1添加到宏任务队列。执行完这个整体代码的宏任务之后，将这个宏任务出队列。\n\n接下来就是执行上一个宏任务（整体代码）生成的微任务队列，开始执行Promise1。执行微任务p1的时候生成一个宏任务setTimeout2，将宏任务setTimeout2添加到宏任务队列，此时宏任务队列有setTimeout1和setTimeout2。\n\n微任务队列执行完成，执行宏任务队列最前面的宏任务setTimeout1，因为队列的原则是先进先出。在执行宏任务setTimeout1的时候，生成了微任务Promise2。执行完宏任务setTimeout1，将这个宏任务出队列。\n\n接下来就是执行上一个宏任务（setTimeout1）生成的微任务队列，开始执行Promise2。执行完微任务列队，再来执行宏任务里的唯一的一个宏任务setTimeout2。执行完宏任务setTimeout2，将这个宏任务出队列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n⚠️微任务执行完也是会出列的。\n\n\n\n##### Async/Await执行顺序\n\n> 科普知识：await下面的代码怎么执行？\n>\n> 如果await后面跟同步函数的调用。相当于直接将await下面的代码注册为一个微任务，可简单理解为promise.then(await下面的代码)。然后跳出async函数，执行其他代码。\n>\n> 如果await后面跟一个异步函数的调用，当await之后的函数中同步任务被执行，异步任务被添加到任务队列之后，直接跳出async函数，执行剩下代码，等剩下代码同步任务被执行，异步代码被添加到任务队列之后，再来将await下面的代码注册为一个微任务。\n\n###### await后面跟同步函数的调用\n\n``` javascript\nconsole.log('script start')\n\nasync function async1() {\n    await async2()\n    console.log('async1 end')\n}\nasync function async2() {\n    console.log('async2 end')\n}\nasync1()\n\nsetTimeout(function() {\n    console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n    console.log('Promise')\n    resolve()\n})\n.then(function() {\n    console.log('promise1')\n})\n.then(function() {\n    console.log('promise2')\n})\n\nconsole.log('script end')\n\n// 执行结果： script start -> async2 end -> Promise -> script end\n// -> async1 end -> promise1 -> promise2 -> setTimeout\n```\n\n执行流程分析：\n\n1. 整体代码是个宏任务压入执行栈执行，执行同步任务打印'script start'；\n2. 执行async1时，await后面的函数可以当作同步任务执行，打印'async2 end'；\n3. 因为async1中的await后面的函数并不是异步函数，所以可以直接将await下面的代码生成为一个微任务，并添加到微任务队列；\n4. 代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；\n5. 代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印'Promise'；\n6. 代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；\n7. 执行同步任务打印'script end'，将全部代码这个宏任务出列；\n8. 开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是await下面的代码生成的微任务、promise1和promise2，依次执行出队列。结果是按顺序打印'async1 end'、'promise1'、 'promise2'；\n9. 执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；\n10. 执行setTimeout宏任务，打印'setTimeout'，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n\n\n###### await后面跟异步函数的调用\n\n``` javascript\nconsole.log('script start')\n\nasync function async1() {\n    await async2()\n    console.log('async1 end')\n}\nasync function async2() {\n    console.log('async2 end')\n    return Promise.resolve().then(()=>{\n        console.log('async2 end1')\n    })\n}\nasync1()\n\nsetTimeout(function() {\n    console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n    console.log('Promise')\n    resolve()\n})\n.then(function() {\n    console.log('promise1')\n})\n.then(function() {\n    console.log('promise2')\n})\n\nconsole.log('script end')\n\n// 执行结果： script start -> async2 end -> Promise -> script end\n//  -> async2 end1 -> promise1 -> promise2 -> async1 end -> setTimeout\n```\n\n执行流程分析（跟上个🌰的流程差别，主要是await后面的代码执行时机，具体是步骤2、3、8）：\n\n1. 整体代码是个宏任务压入执行栈执行，执行同步任务打印'script start'；\n2. 执行async1时，await后面的函数可以当作同步任务执行。async2函数执行打印'async2 end'，生成一个微任务简称为Promise async2；\n3. 因为async1中的await后面的函数是异步函数，所以直接跳出了async1函数；\n4. 代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；\n5. 代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印'Promise'；\n6. 代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；\n7. 执行同步任务打印'script end'，再回到async1函数中将await下面的代码生成为一个微任务，并添加到微任务队列。此时本轮宏任务执行就执行完了，将全部代码这个宏任务出列；\n8. 开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是Promise async2、promise1、promise2和await下面的代码生成的微任务，依次执行出队列。结果是按顺序打印'async2 end1'、'promise1'、 'promise2'、'async1 end'；\n9. 执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；\n10. 执行setTimeout宏任务，打印'setTimeout'，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。\n\n\n\n\n\n","slug":"浏览器的事件循环机制","published":1,"date":"2023-11-07T03:36:00.767Z","updated":"2023-11-07T03:36:00.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88i0030u17uaqhobhr8","content":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>在研究浏览器的事件循环机制之前，先了解几个关键词。</p>\n<h5 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h5><p>同步任务都在主线程上执行，形成一个执行栈，可以认为是一个存储函数调用的栈结构，遵循后进先出的原则。</p>\n<h5 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h5><p>只要异步任务有了运行结果，就在任务队列中放置一个事件。异步任务分为宏任务macro-task和微任务micro-task，在es6中宏任务被称为task，微任务被称为jobs。宏任务会放置在宏任务队列，微任务会放置在微任务队列。</p>\n<h5 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h5><p>浏览器常见的宏任务：script（整体代码）、setTimeout、setInterval、setImmediate、UI render。</p>\n<h5 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h5><p>浏览器常见的微任务：Promise.then、Async/Await、MutationObserver（h5新特性）。</p>\n<h4 id=\"事件循环过程\"><a href=\"#事件循环过程\" class=\"headerlink\" title=\"事件循环过程\"></a>事件循环过程</h4><ol>\n<li>开始的时候执行栈和微任务队列为空，宏任务队列有且只有一个script脚本（整体代码）；</li>\n<li>执行栈中同步任务执行完毕后，系统会读取任务队列。只有宏任务队列有一个script脚本（整体代码）的异步任务，将该宏任务推入执行栈；</li>\n<li>执行过程中，遇到同步代码直接执行，生成宏任务添加到宏任务队列，生成微任务添加到微任务队列。等同步代码执行玩后，script脚本被移除宏任务队列，这个就是宏任务的执行和出队列的过程；</li>\n<li>执行完一个宏任务之后，接下来就是处理上一个宏任务执行过程中产生的微任务队列，逐个执行微任务并将任务出队，直到队列被清空。需要注意的是宏任务的执行和出队是一个一个执行的，而微任务的执行和出队是一队一队的；</li>\n<li>执行渲染操作，更新界面；</li>\n<li>上面过程循环往复，知道宏任务队列和微任务队列都清空。</li>\n</ol>\n<h4 id=\"举几个🌰\"><a href=\"#举几个🌰\" class=\"headerlink\" title=\"举几个🌰\"></a>举几个🌰</h4><h5 id=\"宏任务和微任务执行顺序\"><a href=\"#宏任务和微任务执行顺序\" class=\"headerlink\" title=\"宏任务和微任务执行顺序\"></a>宏任务和微任务执行顺序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout2&#x27;</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序：Promise1 -&gt; setTimeout1 -&gt; Promise2 -&gt; setTimeout2</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析：</p>\n<p>整体代码是一个宏任务，将宏任务压入执行栈。执行过程中先生成了一个微任务简称为Promise1添加到微任务队列，后面又生成一个宏任务简称setTimeout1添加到宏任务队列。执行完这个整体代码的宏任务之后，将这个宏任务出队列。</p>\n<p>接下来就是执行上一个宏任务（整体代码）生成的微任务队列，开始执行Promise1。执行微任务p1的时候生成一个宏任务setTimeout2，将宏任务setTimeout2添加到宏任务队列，此时宏任务队列有setTimeout1和setTimeout2。</p>\n<p>微任务队列执行完成，执行宏任务队列最前面的宏任务setTimeout1，因为队列的原则是先进先出。在执行宏任务setTimeout1的时候，生成了微任务Promise2。执行完宏任务setTimeout1，将这个宏任务出队列。</p>\n<p>接下来就是执行上一个宏任务（setTimeout1）生成的微任务队列，开始执行Promise2。执行完微任务列队，再来执行宏任务里的唯一的一个宏任务setTimeout2。执行完宏任务setTimeout2，将这个宏任务出队列。此时宏任务和微任务队列都已清空，结束当前事件循环。</p>\n<p>⚠️微任务执行完也是会出列的。</p>\n<h5 id=\"Async-Await执行顺序\"><a href=\"#Async-Await执行顺序\" class=\"headerlink\" title=\"Async/Await执行顺序\"></a>Async/Await执行顺序</h5><blockquote>\n<p>科普知识：await下面的代码怎么执行？</p>\n<p>如果await后面跟同步函数的调用。相当于直接将await下面的代码注册为一个微任务，可简单理解为promise.then(await下面的代码)。然后跳出async函数，执行其他代码。</p>\n<p>如果await后面跟一个异步函数的调用，当await之后的函数中同步任务被执行，异步任务被添加到任务队列之后，直接跳出async函数，执行剩下代码，等剩下代码同步任务被执行，异步代码被添加到任务队列之后，再来将await下面的代码注册为一个微任务。</p>\n</blockquote>\n<h6 id=\"await后面跟同步函数的调用\"><a href=\"#await后面跟同步函数的调用\" class=\"headerlink\" title=\"await后面跟同步函数的调用\"></a>await后面跟同步函数的调用</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果： script start -&gt; async2 end -&gt; Promise -&gt; script end</span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; async1 end -&gt; promise1 -&gt; promise2 -&gt; setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析：</p>\n<ol>\n<li>整体代码是个宏任务压入执行栈执行，执行同步任务打印’script start’；</li>\n<li>执行async1时，await后面的函数可以当作同步任务执行，打印’async2 end’；</li>\n<li>因为async1中的await后面的函数并不是异步函数，所以可以直接将await下面的代码生成为一个微任务，并添加到微任务队列；</li>\n<li>代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；</li>\n<li>代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印’Promise’；</li>\n<li>代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；</li>\n<li>执行同步任务打印’script end’，将全部代码这个宏任务出列；</li>\n<li>开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是await下面的代码生成的微任务、promise1和promise2，依次执行出队列。结果是按顺序打印’async1 end’、’promise1’、 ‘promise2’；</li>\n<li>执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；</li>\n<li>执行setTimeout宏任务，打印’setTimeout’，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。</li>\n</ol>\n<h6 id=\"await后面跟异步函数的调用\"><a href=\"#await后面跟异步函数的调用\" class=\"headerlink\" title=\"await后面跟异步函数的调用\"></a>await后面跟异步函数的调用</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end1&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果： script start -&gt; async2 end -&gt; Promise -&gt; script end</span></span><br><span class=\"line\"><span class=\"comment\">//  -&gt; async2 end1 -&gt; promise1 -&gt; promise2 -&gt; async1 end -&gt; setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析（跟上个🌰的流程差别，主要是await后面的代码执行时机，具体是步骤2、3、8）：</p>\n<ol>\n<li>整体代码是个宏任务压入执行栈执行，执行同步任务打印’script start’；</li>\n<li>执行async1时，await后面的函数可以当作同步任务执行。async2函数执行打印’async2 end’，生成一个微任务简称为Promise async2；</li>\n<li>因为async1中的await后面的函数是异步函数，所以直接跳出了async1函数；</li>\n<li>代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；</li>\n<li>代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印’Promise’；</li>\n<li>代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；</li>\n<li>执行同步任务打印’script end’，再回到async1函数中将await下面的代码生成为一个微任务，并添加到微任务队列。此时本轮宏任务执行就执行完了，将全部代码这个宏任务出列；</li>\n<li>开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是Promise async2、promise1、promise2和await下面的代码生成的微任务，依次执行出队列。结果是按顺序打印’async2 end1’、’promise1’、 ‘promise2’、’async1 end’；</li>\n<li>执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；</li>\n<li>执行setTimeout宏任务，打印’setTimeout’，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>在研究浏览器的事件循环机制之前，先了解几个关键词。</p>\n<h5 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h5><p>同步任务都在主线程上执行，形成一个执行栈，可以认为是一个存储函数调用的栈结构，遵循后进先出的原则。</p>\n<h5 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h5><p>只要异步任务有了运行结果，就在任务队列中放置一个事件。异步任务分为宏任务macro-task和微任务micro-task，在es6中宏任务被称为task，微任务被称为jobs。宏任务会放置在宏任务队列，微任务会放置在微任务队列。</p>\n<h5 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h5><p>浏览器常见的宏任务：script（整体代码）、setTimeout、setInterval、setImmediate、UI render。</p>\n<h5 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h5><p>浏览器常见的微任务：Promise.then、Async/Await、MutationObserver（h5新特性）。</p>\n<h4 id=\"事件循环过程\"><a href=\"#事件循环过程\" class=\"headerlink\" title=\"事件循环过程\"></a>事件循环过程</h4><ol>\n<li>开始的时候执行栈和微任务队列为空，宏任务队列有且只有一个script脚本（整体代码）；</li>\n<li>执行栈中同步任务执行完毕后，系统会读取任务队列。只有宏任务队列有一个script脚本（整体代码）的异步任务，将该宏任务推入执行栈；</li>\n<li>执行过程中，遇到同步代码直接执行，生成宏任务添加到宏任务队列，生成微任务添加到微任务队列。等同步代码执行玩后，script脚本被移除宏任务队列，这个就是宏任务的执行和出队列的过程；</li>\n<li>执行完一个宏任务之后，接下来就是处理上一个宏任务执行过程中产生的微任务队列，逐个执行微任务并将任务出队，直到队列被清空。需要注意的是宏任务的执行和出队是一个一个执行的，而微任务的执行和出队是一队一队的；</li>\n<li>执行渲染操作，更新界面；</li>\n<li>上面过程循环往复，知道宏任务队列和微任务队列都清空。</li>\n</ol>\n<h4 id=\"举几个🌰\"><a href=\"#举几个🌰\" class=\"headerlink\" title=\"举几个🌰\"></a>举几个🌰</h4><h5 id=\"宏任务和微任务执行顺序\"><a href=\"#宏任务和微任务执行顺序\" class=\"headerlink\" title=\"宏任务和微任务执行顺序\"></a>宏任务和微任务执行顺序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout2&#x27;</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序：Promise1 -&gt; setTimeout1 -&gt; Promise2 -&gt; setTimeout2</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析：</p>\n<p>整体代码是一个宏任务，将宏任务压入执行栈。执行过程中先生成了一个微任务简称为Promise1添加到微任务队列，后面又生成一个宏任务简称setTimeout1添加到宏任务队列。执行完这个整体代码的宏任务之后，将这个宏任务出队列。</p>\n<p>接下来就是执行上一个宏任务（整体代码）生成的微任务队列，开始执行Promise1。执行微任务p1的时候生成一个宏任务setTimeout2，将宏任务setTimeout2添加到宏任务队列，此时宏任务队列有setTimeout1和setTimeout2。</p>\n<p>微任务队列执行完成，执行宏任务队列最前面的宏任务setTimeout1，因为队列的原则是先进先出。在执行宏任务setTimeout1的时候，生成了微任务Promise2。执行完宏任务setTimeout1，将这个宏任务出队列。</p>\n<p>接下来就是执行上一个宏任务（setTimeout1）生成的微任务队列，开始执行Promise2。执行完微任务列队，再来执行宏任务里的唯一的一个宏任务setTimeout2。执行完宏任务setTimeout2，将这个宏任务出队列。此时宏任务和微任务队列都已清空，结束当前事件循环。</p>\n<p>⚠️微任务执行完也是会出列的。</p>\n<h5 id=\"Async-Await执行顺序\"><a href=\"#Async-Await执行顺序\" class=\"headerlink\" title=\"Async/Await执行顺序\"></a>Async/Await执行顺序</h5><blockquote>\n<p>科普知识：await下面的代码怎么执行？</p>\n<p>如果await后面跟同步函数的调用。相当于直接将await下面的代码注册为一个微任务，可简单理解为promise.then(await下面的代码)。然后跳出async函数，执行其他代码。</p>\n<p>如果await后面跟一个异步函数的调用，当await之后的函数中同步任务被执行，异步任务被添加到任务队列之后，直接跳出async函数，执行剩下代码，等剩下代码同步任务被执行，异步代码被添加到任务队列之后，再来将await下面的代码注册为一个微任务。</p>\n</blockquote>\n<h6 id=\"await后面跟同步函数的调用\"><a href=\"#await后面跟同步函数的调用\" class=\"headerlink\" title=\"await后面跟同步函数的调用\"></a>await后面跟同步函数的调用</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果： script start -&gt; async2 end -&gt; Promise -&gt; script end</span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; async1 end -&gt; promise1 -&gt; promise2 -&gt; setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析：</p>\n<ol>\n<li>整体代码是个宏任务压入执行栈执行，执行同步任务打印’script start’；</li>\n<li>执行async1时，await后面的函数可以当作同步任务执行，打印’async2 end’；</li>\n<li>因为async1中的await后面的函数并不是异步函数，所以可以直接将await下面的代码生成为一个微任务，并添加到微任务队列；</li>\n<li>代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；</li>\n<li>代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印’Promise’；</li>\n<li>代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；</li>\n<li>执行同步任务打印’script end’，将全部代码这个宏任务出列；</li>\n<li>开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是await下面的代码生成的微任务、promise1和promise2，依次执行出队列。结果是按顺序打印’async1 end’、’promise1’、 ‘promise2’；</li>\n<li>执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；</li>\n<li>执行setTimeout宏任务，打印’setTimeout’，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。</li>\n</ol>\n<h6 id=\"await后面跟异步函数的调用\"><a href=\"#await后面跟异步函数的调用\" class=\"headerlink\" title=\"await后面跟异步函数的调用\"></a>await后面跟异步函数的调用</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end1&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果： script start -&gt; async2 end -&gt; Promise -&gt; script end</span></span><br><span class=\"line\"><span class=\"comment\">//  -&gt; async2 end1 -&gt; promise1 -&gt; promise2 -&gt; async1 end -&gt; setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>执行流程分析（跟上个🌰的流程差别，主要是await后面的代码执行时机，具体是步骤2、3、8）：</p>\n<ol>\n<li>整体代码是个宏任务压入执行栈执行，执行同步任务打印’script start’；</li>\n<li>执行async1时，await后面的函数可以当作同步任务执行。async2函数执行打印’async2 end’，生成一个微任务简称为Promise async2；</li>\n<li>因为async1中的await后面的函数是异步函数，所以直接跳出了async1函数；</li>\n<li>代码往下执行生成一个setTimeout宏任务，将宏任务添加到宏任务队列；</li>\n<li>代码往下执行创建一个Promise实例。注意创建Promise实例时，参数是一个是以同步的方式执行的函数，直接打印’Promise’；</li>\n<li>代码往下执行生成promise1和promise2两个微任务，并按顺序加入微任务队列；</li>\n<li>执行同步任务打印’script end’，再回到async1函数中将await下面的代码生成为一个微任务，并添加到微任务队列。此时本轮宏任务执行就执行完了，将全部代码这个宏任务出列；</li>\n<li>开始执行上一个宏任务生成的微任务队列，此时微任务队列里是三个微任务，分别是Promise async2、promise1、promise2和await下面的代码生成的微任务，依次执行出队列。结果是按顺序打印’async2 end1’、’promise1’、 ‘promise2’、’async1 end’；</li>\n<li>执行完微任务队列后，此时宏任务队列只有一个setTimeout宏任务；</li>\n<li>执行setTimeout宏任务，打印’setTimeout’，结束宏任务并将宏任务出列。此时宏任务和微任务队列都已清空，结束当前事件循环。</li>\n</ol>\n"},{"title":"浏览器的进程和线程","_content":"\n#### 基本概念\n\n进程是CPU资源分配的最小单位，线程是CPU调度的最小单位。\n\n进程有单独的属于自己的内存空间，一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。一个进程的内存空间是共享的，每个线程都可用这些共享内存。\n\n翻译翻译：\n\n如果把进程比作工厂的话，线程就是工厂的工人，工厂有单独的专属于自己的工厂资源，工人可以共享工厂资源。\n\n\n\n#### 多进程的好处\n\n在同一个时间内，同一个计算机系统中允许两个或两个以上的进行处于运行状态，进程之间丝毫不会互相干扰，可以同时做多个事情。\n\n\n\n#### 多线程的好处\n\n程序中包含多个执行流，即在同一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。\n\n\n\n#### 常见进程\n\n以chrome浏览器为例，来分析一下浏览器的进程。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B.png)\n\n上图是浏览器只打开一个百度的标签页时，任务管理器的状态。主要可以关注以下几个进程。\n\n1. 浏览器进程：负责协调、主控其他进程。\n   * 负责各个页面的管理，创建和销毁其他进程；\n   * 负责浏览器界面显示与用户交互，如前进、后退等；\n2. GPU进程：使用初衷是为了实现3D CSS的效果，后面随着网页、Chrome的UI界面都选择用GPU来绘制，使得GPU成为了浏览器普遍的需求。\n3. Network Service：网络进程，主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面。\n4. Storage Service：控制文件读写的存储线程；\n5. Audio Service：音频进程；\n6. 渲染进程：核心任务是将HTML、CSS和javascript转换为用户可以与之交互的网页，排版引擎Blink和javascript引擎V8都是运行在该进程中。默认情况下，Chrome会为每个Tab标签创建一个渲染进程，当进程数达到一定的界限后，Chrome会将访问同一个网站的tab都放在一个进程里面跑。处于安全考虑，渲染进程都是运行在沙箱模式下。渲染进程中主要包含以下线程：\n   * 主线程 Main thread：对几个常驻线程的调用，执行大多数的代码。\n   * 工作线程 Worker thread：web worker和service worker相关的代码由该进程处理。\n   * 光栅线程 Raster thread：将文档结构、元素的样式、元素的几何位置以及绘画顺序这些信息转化为显示器的像素的过程叫做光栅化。\n   * 合成线程 Compositor thread：将页面分成若干层，分别进行光栅化，光栅化之前合成线程需要将页面的一层切分成一块又一块小图块，光栅线程会栅格化每个图块并将它们储存在GPU的内存中。最后在合成线程中合并成一个页面。当页面的层超过一定的数量后，层的合成操作要比每个帧中光栅化页面的一小部分还要慢。\n7. 插件进程：虽然图上没有，也可以了解一下。主要负责插件的运行，用来保证插件进程崩溃不会对浏览器和页面造成影响。\n\n\n\n⚠️Network Service、Storage Service和Audio Service这些服务本来是在浏览器进程里面的，后来将这些模块拆分为了一个个不同的服务，这个过程也叫做Chrome服务化。服务化之后，这些功能既可以放在不同的进程里运行，也可以合并为一个单独的进程运行。\n\n这样做主要是为了让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程香港的服务会放在不同的进程中运行来提高系统的稳定性。如果硬件性能不好，这些服务就被放在同一个进程里面执行来减少内存的占用。\n\n\n\n#### 渲染进程中的线程\n\n渲染进程也称为浏览器内核，浏览器内核通过取得页面内容，整理信息、计算组合最终输出可视化的图像结果，通常也被称为渲染引擎。\n\n浏览器内核是多线程，在内核控制下各个线程相互配合，一个浏览器通常由以下常驻线程组成：\n\n* GUI渲染线程（有且只有一个）\n* JavaScript引擎线程（有且只有一个）\n* 定时触发器线程（多个）\n* 事件触发线程\n* 异步http请求线程（多个）\n\n\n\n##### GUI渲染线程\n\n主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。当界面需要重绘或重排时，会执行该线程。\n\n⚠️渲染线程跟JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起。当任务队列空闲时，才会执行GUI渲染。互斥的原因是因为，JS是可以操作DOM的，边操作边渲染会出现问题，js被设计成单线程也是这个原因。\n\n\n\n##### JS引擎线程\n\n同步任务和异步任务都由该线程执行。如果JS引擎执行脚本的时间过长，将导致页面渲染阻塞。\n\n\n\n##### 定时器触发线程\n\n主要负责执行异步定时器一类的函数，如setTimeOut、setInterval。主线程按顺序执行代码时，遇见定时器，会将定时器交给该线程处理。当计时完毕后，通过事件触发线程将技术完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。\n\n\n\n##### 事件触发线程\n\n主要负责将准备好的事件交给JS引擎线程执行。也就是将已经准备好的异步回调函数添加到任务队列的队尾。\n\n\n\n##### 异步http请求线程\n\n负责执行异步请求一类的函数，如： Promise、axios、ajax等。主线程按顺序执行代码时，遇到异步请求，会将函数交给该线程处理。当监听到状态码变更，如果有回调函数，事件触发线程将回调函数加入到任务队列的尾部，等待JS引擎线程执行。","source":"_posts/浏览器的进程和线程.md","raw":"---\ntitle: 浏览器的进程和线程\n\ntags: [进程,线程]\n\ncategories: 浏览器\n---\n\n#### 基本概念\n\n进程是CPU资源分配的最小单位，线程是CPU调度的最小单位。\n\n进程有单独的属于自己的内存空间，一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。一个进程的内存空间是共享的，每个线程都可用这些共享内存。\n\n翻译翻译：\n\n如果把进程比作工厂的话，线程就是工厂的工人，工厂有单独的专属于自己的工厂资源，工人可以共享工厂资源。\n\n\n\n#### 多进程的好处\n\n在同一个时间内，同一个计算机系统中允许两个或两个以上的进行处于运行状态，进程之间丝毫不会互相干扰，可以同时做多个事情。\n\n\n\n#### 多线程的好处\n\n程序中包含多个执行流，即在同一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。\n\n\n\n#### 常见进程\n\n以chrome浏览器为例，来分析一下浏览器的进程。\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B.png)\n\n上图是浏览器只打开一个百度的标签页时，任务管理器的状态。主要可以关注以下几个进程。\n\n1. 浏览器进程：负责协调、主控其他进程。\n   * 负责各个页面的管理，创建和销毁其他进程；\n   * 负责浏览器界面显示与用户交互，如前进、后退等；\n2. GPU进程：使用初衷是为了实现3D CSS的效果，后面随着网页、Chrome的UI界面都选择用GPU来绘制，使得GPU成为了浏览器普遍的需求。\n3. Network Service：网络进程，主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面。\n4. Storage Service：控制文件读写的存储线程；\n5. Audio Service：音频进程；\n6. 渲染进程：核心任务是将HTML、CSS和javascript转换为用户可以与之交互的网页，排版引擎Blink和javascript引擎V8都是运行在该进程中。默认情况下，Chrome会为每个Tab标签创建一个渲染进程，当进程数达到一定的界限后，Chrome会将访问同一个网站的tab都放在一个进程里面跑。处于安全考虑，渲染进程都是运行在沙箱模式下。渲染进程中主要包含以下线程：\n   * 主线程 Main thread：对几个常驻线程的调用，执行大多数的代码。\n   * 工作线程 Worker thread：web worker和service worker相关的代码由该进程处理。\n   * 光栅线程 Raster thread：将文档结构、元素的样式、元素的几何位置以及绘画顺序这些信息转化为显示器的像素的过程叫做光栅化。\n   * 合成线程 Compositor thread：将页面分成若干层，分别进行光栅化，光栅化之前合成线程需要将页面的一层切分成一块又一块小图块，光栅线程会栅格化每个图块并将它们储存在GPU的内存中。最后在合成线程中合并成一个页面。当页面的层超过一定的数量后，层的合成操作要比每个帧中光栅化页面的一小部分还要慢。\n7. 插件进程：虽然图上没有，也可以了解一下。主要负责插件的运行，用来保证插件进程崩溃不会对浏览器和页面造成影响。\n\n\n\n⚠️Network Service、Storage Service和Audio Service这些服务本来是在浏览器进程里面的，后来将这些模块拆分为了一个个不同的服务，这个过程也叫做Chrome服务化。服务化之后，这些功能既可以放在不同的进程里运行，也可以合并为一个单独的进程运行。\n\n这样做主要是为了让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程香港的服务会放在不同的进程中运行来提高系统的稳定性。如果硬件性能不好，这些服务就被放在同一个进程里面执行来减少内存的占用。\n\n\n\n#### 渲染进程中的线程\n\n渲染进程也称为浏览器内核，浏览器内核通过取得页面内容，整理信息、计算组合最终输出可视化的图像结果，通常也被称为渲染引擎。\n\n浏览器内核是多线程，在内核控制下各个线程相互配合，一个浏览器通常由以下常驻线程组成：\n\n* GUI渲染线程（有且只有一个）\n* JavaScript引擎线程（有且只有一个）\n* 定时触发器线程（多个）\n* 事件触发线程\n* 异步http请求线程（多个）\n\n\n\n##### GUI渲染线程\n\n主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。当界面需要重绘或重排时，会执行该线程。\n\n⚠️渲染线程跟JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起。当任务队列空闲时，才会执行GUI渲染。互斥的原因是因为，JS是可以操作DOM的，边操作边渲染会出现问题，js被设计成单线程也是这个原因。\n\n\n\n##### JS引擎线程\n\n同步任务和异步任务都由该线程执行。如果JS引擎执行脚本的时间过长，将导致页面渲染阻塞。\n\n\n\n##### 定时器触发线程\n\n主要负责执行异步定时器一类的函数，如setTimeOut、setInterval。主线程按顺序执行代码时，遇见定时器，会将定时器交给该线程处理。当计时完毕后，通过事件触发线程将技术完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。\n\n\n\n##### 事件触发线程\n\n主要负责将准备好的事件交给JS引擎线程执行。也就是将已经准备好的异步回调函数添加到任务队列的队尾。\n\n\n\n##### 异步http请求线程\n\n负责执行异步请求一类的函数，如： Promise、axios、ajax等。主线程按顺序执行代码时，遇到异步请求，会将函数交给该线程处理。当监听到状态码变更，如果有回调函数，事件触发线程将回调函数加入到任务队列的尾部，等待JS引擎线程执行。","slug":"浏览器的进程和线程","published":1,"date":"2023-11-07T03:36:00.767Z","updated":"2023-11-07T03:36:00.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88j0034u17u6qxe4x3d","content":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>进程是CPU资源分配的最小单位，线程是CPU调度的最小单位。</p>\n<p>进程有单独的属于自己的内存空间，一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。一个进程的内存空间是共享的，每个线程都可用这些共享内存。</p>\n<p>翻译翻译：</p>\n<p>如果把进程比作工厂的话，线程就是工厂的工人，工厂有单独的专属于自己的工厂资源，工人可以共享工厂资源。</p>\n<h4 id=\"多进程的好处\"><a href=\"#多进程的好处\" class=\"headerlink\" title=\"多进程的好处\"></a>多进程的好处</h4><p>在同一个时间内，同一个计算机系统中允许两个或两个以上的进行处于运行状态，进程之间丝毫不会互相干扰，可以同时做多个事情。</p>\n<h4 id=\"多线程的好处\"><a href=\"#多线程的好处\" class=\"headerlink\" title=\"多线程的好处\"></a>多线程的好处</h4><p>程序中包含多个执行流，即在同一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p>\n<h4 id=\"常见进程\"><a href=\"#常见进程\" class=\"headerlink\" title=\"常见进程\"></a>常见进程</h4><p>以chrome浏览器为例，来分析一下浏览器的进程。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B.png\" alt=\"img\"></p>\n<p>上图是浏览器只打开一个百度的标签页时，任务管理器的状态。主要可以关注以下几个进程。</p>\n<ol>\n<li>浏览器进程：负责协调、主控其他进程。<ul>\n<li>负责各个页面的管理，创建和销毁其他进程；</li>\n<li>负责浏览器界面显示与用户交互，如前进、后退等；</li>\n</ul>\n</li>\n<li>GPU进程：使用初衷是为了实现3D CSS的效果，后面随着网页、Chrome的UI界面都选择用GPU来绘制，使得GPU成为了浏览器普遍的需求。</li>\n<li>Network Service：网络进程，主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面。</li>\n<li>Storage Service：控制文件读写的存储线程；</li>\n<li>Audio Service：音频进程；</li>\n<li>渲染进程：核心任务是将HTML、CSS和javascript转换为用户可以与之交互的网页，排版引擎Blink和javascript引擎V8都是运行在该进程中。默认情况下，Chrome会为每个Tab标签创建一个渲染进程，当进程数达到一定的界限后，Chrome会将访问同一个网站的tab都放在一个进程里面跑。处于安全考虑，渲染进程都是运行在沙箱模式下。渲染进程中主要包含以下线程：<ul>\n<li>主线程 Main thread：对几个常驻线程的调用，执行大多数的代码。</li>\n<li>工作线程 Worker thread：web worker和service worker相关的代码由该进程处理。</li>\n<li>光栅线程 Raster thread：将文档结构、元素的样式、元素的几何位置以及绘画顺序这些信息转化为显示器的像素的过程叫做光栅化。</li>\n<li>合成线程 Compositor thread：将页面分成若干层，分别进行光栅化，光栅化之前合成线程需要将页面的一层切分成一块又一块小图块，光栅线程会栅格化每个图块并将它们储存在GPU的内存中。最后在合成线程中合并成一个页面。当页面的层超过一定的数量后，层的合成操作要比每个帧中光栅化页面的一小部分还要慢。</li>\n</ul>\n</li>\n<li>插件进程：虽然图上没有，也可以了解一下。主要负责插件的运行，用来保证插件进程崩溃不会对浏览器和页面造成影响。</li>\n</ol>\n<p>⚠️Network Service、Storage Service和Audio Service这些服务本来是在浏览器进程里面的，后来将这些模块拆分为了一个个不同的服务，这个过程也叫做Chrome服务化。服务化之后，这些功能既可以放在不同的进程里运行，也可以合并为一个单独的进程运行。</p>\n<p>这样做主要是为了让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程香港的服务会放在不同的进程中运行来提高系统的稳定性。如果硬件性能不好，这些服务就被放在同一个进程里面执行来减少内存的占用。</p>\n<h4 id=\"渲染进程中的线程\"><a href=\"#渲染进程中的线程\" class=\"headerlink\" title=\"渲染进程中的线程\"></a>渲染进程中的线程</h4><p>渲染进程也称为浏览器内核，浏览器内核通过取得页面内容，整理信息、计算组合最终输出可视化的图像结果，通常也被称为渲染引擎。</p>\n<p>浏览器内核是多线程，在内核控制下各个线程相互配合，一个浏览器通常由以下常驻线程组成：</p>\n<ul>\n<li>GUI渲染线程（有且只有一个）</li>\n<li>JavaScript引擎线程（有且只有一个）</li>\n<li>定时触发器线程（多个）</li>\n<li>事件触发线程</li>\n<li>异步http请求线程（多个）</li>\n</ul>\n<h5 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h5><p>主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。当界面需要重绘或重排时，会执行该线程。</p>\n<p>⚠️渲染线程跟JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起。当任务队列空闲时，才会执行GUI渲染。互斥的原因是因为，JS是可以操作DOM的，边操作边渲染会出现问题，js被设计成单线程也是这个原因。</p>\n<h5 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h5><p>同步任务和异步任务都由该线程执行。如果JS引擎执行脚本的时间过长，将导致页面渲染阻塞。</p>\n<h5 id=\"定时器触发线程\"><a href=\"#定时器触发线程\" class=\"headerlink\" title=\"定时器触发线程\"></a>定时器触发线程</h5><p>主要负责执行异步定时器一类的函数，如setTimeOut、setInterval。主线程按顺序执行代码时，遇见定时器，会将定时器交给该线程处理。当计时完毕后，通过事件触发线程将技术完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。</p>\n<h5 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h5><p>主要负责将准备好的事件交给JS引擎线程执行。也就是将已经准备好的异步回调函数添加到任务队列的队尾。</p>\n<h5 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h5><p>负责执行异步请求一类的函数，如： Promise、axios、ajax等。主线程按顺序执行代码时，遇到异步请求，会将函数交给该线程处理。当监听到状态码变更，如果有回调函数，事件触发线程将回调函数加入到任务队列的尾部，等待JS引擎线程执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>进程是CPU资源分配的最小单位，线程是CPU调度的最小单位。</p>\n<p>进程有单独的属于自己的内存空间，一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。一个进程的内存空间是共享的，每个线程都可用这些共享内存。</p>\n<p>翻译翻译：</p>\n<p>如果把进程比作工厂的话，线程就是工厂的工人，工厂有单独的专属于自己的工厂资源，工人可以共享工厂资源。</p>\n<h4 id=\"多进程的好处\"><a href=\"#多进程的好处\" class=\"headerlink\" title=\"多进程的好处\"></a>多进程的好处</h4><p>在同一个时间内，同一个计算机系统中允许两个或两个以上的进行处于运行状态，进程之间丝毫不会互相干扰，可以同时做多个事情。</p>\n<h4 id=\"多线程的好处\"><a href=\"#多线程的好处\" class=\"headerlink\" title=\"多线程的好处\"></a>多线程的好处</h4><p>程序中包含多个执行流，即在同一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p>\n<h4 id=\"常见进程\"><a href=\"#常见进程\" class=\"headerlink\" title=\"常见进程\"></a>常见进程</h4><p>以chrome浏览器为例，来分析一下浏览器的进程。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B.png\" alt=\"img\"></p>\n<p>上图是浏览器只打开一个百度的标签页时，任务管理器的状态。主要可以关注以下几个进程。</p>\n<ol>\n<li>浏览器进程：负责协调、主控其他进程。<ul>\n<li>负责各个页面的管理，创建和销毁其他进程；</li>\n<li>负责浏览器界面显示与用户交互，如前进、后退等；</li>\n</ul>\n</li>\n<li>GPU进程：使用初衷是为了实现3D CSS的效果，后面随着网页、Chrome的UI界面都选择用GPU来绘制，使得GPU成为了浏览器普遍的需求。</li>\n<li>Network Service：网络进程，主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面。</li>\n<li>Storage Service：控制文件读写的存储线程；</li>\n<li>Audio Service：音频进程；</li>\n<li>渲染进程：核心任务是将HTML、CSS和javascript转换为用户可以与之交互的网页，排版引擎Blink和javascript引擎V8都是运行在该进程中。默认情况下，Chrome会为每个Tab标签创建一个渲染进程，当进程数达到一定的界限后，Chrome会将访问同一个网站的tab都放在一个进程里面跑。处于安全考虑，渲染进程都是运行在沙箱模式下。渲染进程中主要包含以下线程：<ul>\n<li>主线程 Main thread：对几个常驻线程的调用，执行大多数的代码。</li>\n<li>工作线程 Worker thread：web worker和service worker相关的代码由该进程处理。</li>\n<li>光栅线程 Raster thread：将文档结构、元素的样式、元素的几何位置以及绘画顺序这些信息转化为显示器的像素的过程叫做光栅化。</li>\n<li>合成线程 Compositor thread：将页面分成若干层，分别进行光栅化，光栅化之前合成线程需要将页面的一层切分成一块又一块小图块，光栅线程会栅格化每个图块并将它们储存在GPU的内存中。最后在合成线程中合并成一个页面。当页面的层超过一定的数量后，层的合成操作要比每个帧中光栅化页面的一小部分还要慢。</li>\n</ul>\n</li>\n<li>插件进程：虽然图上没有，也可以了解一下。主要负责插件的运行，用来保证插件进程崩溃不会对浏览器和页面造成影响。</li>\n</ol>\n<p>⚠️Network Service、Storage Service和Audio Service这些服务本来是在浏览器进程里面的，后来将这些模块拆分为了一个个不同的服务，这个过程也叫做Chrome服务化。服务化之后，这些功能既可以放在不同的进程里运行，也可以合并为一个单独的进程运行。</p>\n<p>这样做主要是为了让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程香港的服务会放在不同的进程中运行来提高系统的稳定性。如果硬件性能不好，这些服务就被放在同一个进程里面执行来减少内存的占用。</p>\n<h4 id=\"渲染进程中的线程\"><a href=\"#渲染进程中的线程\" class=\"headerlink\" title=\"渲染进程中的线程\"></a>渲染进程中的线程</h4><p>渲染进程也称为浏览器内核，浏览器内核通过取得页面内容，整理信息、计算组合最终输出可视化的图像结果，通常也被称为渲染引擎。</p>\n<p>浏览器内核是多线程，在内核控制下各个线程相互配合，一个浏览器通常由以下常驻线程组成：</p>\n<ul>\n<li>GUI渲染线程（有且只有一个）</li>\n<li>JavaScript引擎线程（有且只有一个）</li>\n<li>定时触发器线程（多个）</li>\n<li>事件触发线程</li>\n<li>异步http请求线程（多个）</li>\n</ul>\n<h5 id=\"GUI渲染线程\"><a href=\"#GUI渲染线程\" class=\"headerlink\" title=\"GUI渲染线程\"></a>GUI渲染线程</h5><p>主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。当界面需要重绘或重排时，会执行该线程。</p>\n<p>⚠️渲染线程跟JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起。当任务队列空闲时，才会执行GUI渲染。互斥的原因是因为，JS是可以操作DOM的，边操作边渲染会出现问题，js被设计成单线程也是这个原因。</p>\n<h5 id=\"JS引擎线程\"><a href=\"#JS引擎线程\" class=\"headerlink\" title=\"JS引擎线程\"></a>JS引擎线程</h5><p>同步任务和异步任务都由该线程执行。如果JS引擎执行脚本的时间过长，将导致页面渲染阻塞。</p>\n<h5 id=\"定时器触发线程\"><a href=\"#定时器触发线程\" class=\"headerlink\" title=\"定时器触发线程\"></a>定时器触发线程</h5><p>主要负责执行异步定时器一类的函数，如setTimeOut、setInterval。主线程按顺序执行代码时，遇见定时器，会将定时器交给该线程处理。当计时完毕后，通过事件触发线程将技术完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。</p>\n<h5 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h5><p>主要负责将准备好的事件交给JS引擎线程执行。也就是将已经准备好的异步回调函数添加到任务队列的队尾。</p>\n<h5 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h5><p>负责执行异步请求一类的函数，如： Promise、axios、ajax等。主线程按顺序执行代码时，遇到异步请求，会将函数交给该线程处理。当监听到状态码变更，如果有回调函数，事件触发线程将回调函数加入到任务队列的尾部，等待JS引擎线程执行。</p>\n"},{"title":"浏览器的重排和重绘","date":"2021-07-25T16:00:00.000Z","_content":"\n### 网页的生成过程是怎样的？\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98.png)\n\n在这个过程中：\n\n1. HTML 被 HTML 解析器解析成 DOM 树\n2. CSS 则被 CSS 解析器解析成 CSSOM 树\n\n3. 结合 DOM 树和 CSSOM 树，生成一棵渲染树（Render Tree）\n4. 生成布局（flow），即将所有渲染树的所有节点进行平面合成\n\n5. 将布局绘制（paint）在屏幕上\n\n\n\n其中，第 4 步和第 5 步是最耗时的部分，这两步合起来就是我们通常所说的渲染。在网页生成的过程中，至少会渲染一次；并且，在用户操作界面的过程中，还会不断地重新渲染。也就是会不断地发生重排和重绘。\n\n\n\n### 什么是重排?\n\n当渲染树 Render tree 中的一部分（或全部）因为 DOM 的变化**影响了元素的几何信息**（DOM 对象的位置和尺寸大小），浏览器需要重新计算元素的几何属性，并将其安放在界面中的正确位置，这个过程就称为重排（reflow），重排也叫作回流。\n\n\n\n### 什么是重绘？\n\n当渲染树 Render tree 中的一些元素需要更新属性，而这些属性**只是影响元素的外观，而没有影响到布局，**例如改变 visibility、outline、背景色等属性，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观，这个过程就称为重绘（repaint）。\n\n\n\n### 重排与重绘的关系是怎样的？\n\n**重绘不会引起重排，但重排一定会引起重绘**。一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。\n\n\n\n\n\n### 什么情况会触发重排和重绘？\n\n#### 1、触发重排的条件\n\n- 页面渲染初始化时；（这个无法避免）\n- 浏览器窗口改变尺寸；\n\n- 元素尺寸改变时；\n- 元素位置改变时；\n\n- 元素内容改变时；\n- 添加或删除可见的 DOM 元素时。\n\n\n\n#### 2、触发重绘的条件\n\n常见的引起重绘的属性：\n\n- color\n- border-style\n\n- visibility\n- background  \n\n- text-decoration\n- background-image\n\n- background-position\n- background-repeat  \n\n- outline-color\n- outline\n\n- outline-style\n- border-radius  \n\n- outline-width\n- box-shadow\n\n- background-size\n\n\n\n### display: none 和 visibility: hidden 有什么区别？\n\n- 通过 display: none 隐藏一个 DOM 节点，会触发重排和重绘；\n- 通过 visibility: hidden 隐藏一个 DOM 节点，只触发重绘，因为没有几何变化。\n\n\n\n### 浏览器的渲染队列是什么意思？\n\n当我们修改了元素的几何属性，导致浏览器触发重排或重绘时，它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。\n\n\n\n以下代码将会触发几次渲染？\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\n```\n\n根据前面的描述，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性。但实际上最后只触发了一次重排，这都得益于浏览器的渲染队列机制。\n\n但是如果我们像下面这样：\n\n```javascript\ndiv.style.left = '10px';\nconsole.log(div.offsetLeft);\ndiv.style.top = '10px';\nconsole.log(div.offsetTop);\ndiv.style.width = '20px';\nconsole.log(div.offsetWidth);\ndiv.style.height = '20px';\nconsole.log(div.offsetHeight);\n```\n\n这段代码就会触发4次重排+重绘，因为在 console 中请求了这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务（强制刷新队列），即使该值与操作中修改的值没关联。\n\n\n\n强制刷新队列的 style 样式请求：\n\n- offsetTop、offsetLeft、offsetWidth、offsetHeight\n- scrollTop、scrollLeft、scrollWidth、scrollHeight\n\n- clientTop、clientLeft、clientWidth、clientHeight\n- getComputedStyle()、 或者 IE 的 currentStyle\n\n\n\n我们在开发中应当避免这些能够强制刷新队列的操作。\n\n\n\n### 如何优化重排？\n\n#### 1、读写分离\n\n还是拿上面的强制刷新队列的例子，如果我们改成这样：\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\nconsole.log(div.offsetLeft);\nconsole.log(div.offsetTop);\nconsole.log(div.offsetWidth);\nconsole.log(div.offsetHeight);\n```\n\n这次只触发了一次重排，因为：在第一个 console 的时候，浏览器把之前上面四个写操作的渲染队列都给清空了；剩下的 console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。\n\n\n\n#### 2、样式集中改变\n\n将多次改变样式属性的操作合并成一次操作，减少 DOM 访问\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\n```\n\n优化：\n\n```javascript\nel.className += \" className\"; // 直接改变 class\n```\n\n\n\n#### 3、离线操作\n\n如果要批量添加 DOM，可以让要操作的元素进行「离线处理」，处理完后一起更新。离线处理的意思是：\n\n- 隐藏要操作的 DOM\n\n- 在要操作 DOM 之前，通过 display 属性隐藏 DOM，当操作完成之后，再将元素的 display 属性为可见，因为不可见的元素不会触发重排和重绘。\n\n- 通过使用 DocumentFragment 创建一个DOM 碎片，在它上面批量操作 DOM，操作完成之后，再添加到文档中，这样只会触发一次重排。\n\n\n\n#### 4、position 属性的应用\n\n将需要多次重排的元素，position 属性设为 absolute 或 fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。\n\n\n\n#### 5、在内存中构建\n\n在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的 html 片段，再一次性添加到文档中去，而不是直接操作 DOM，循环添加每一行。","source":"_posts/浏览器的重排和重绘.md","raw":"---\ntitle: 浏览器的重排和重绘\n\ndate: 2021-07-26\n\ntags: [重排,重绘]\n\ncategories: 浏览器\n---\n\n### 网页的生成过程是怎样的？\n\n![img](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98.png)\n\n在这个过程中：\n\n1. HTML 被 HTML 解析器解析成 DOM 树\n2. CSS 则被 CSS 解析器解析成 CSSOM 树\n\n3. 结合 DOM 树和 CSSOM 树，生成一棵渲染树（Render Tree）\n4. 生成布局（flow），即将所有渲染树的所有节点进行平面合成\n\n5. 将布局绘制（paint）在屏幕上\n\n\n\n其中，第 4 步和第 5 步是最耗时的部分，这两步合起来就是我们通常所说的渲染。在网页生成的过程中，至少会渲染一次；并且，在用户操作界面的过程中，还会不断地重新渲染。也就是会不断地发生重排和重绘。\n\n\n\n### 什么是重排?\n\n当渲染树 Render tree 中的一部分（或全部）因为 DOM 的变化**影响了元素的几何信息**（DOM 对象的位置和尺寸大小），浏览器需要重新计算元素的几何属性，并将其安放在界面中的正确位置，这个过程就称为重排（reflow），重排也叫作回流。\n\n\n\n### 什么是重绘？\n\n当渲染树 Render tree 中的一些元素需要更新属性，而这些属性**只是影响元素的外观，而没有影响到布局，**例如改变 visibility、outline、背景色等属性，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观，这个过程就称为重绘（repaint）。\n\n\n\n### 重排与重绘的关系是怎样的？\n\n**重绘不会引起重排，但重排一定会引起重绘**。一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。\n\n\n\n\n\n### 什么情况会触发重排和重绘？\n\n#### 1、触发重排的条件\n\n- 页面渲染初始化时；（这个无法避免）\n- 浏览器窗口改变尺寸；\n\n- 元素尺寸改变时；\n- 元素位置改变时；\n\n- 元素内容改变时；\n- 添加或删除可见的 DOM 元素时。\n\n\n\n#### 2、触发重绘的条件\n\n常见的引起重绘的属性：\n\n- color\n- border-style\n\n- visibility\n- background  \n\n- text-decoration\n- background-image\n\n- background-position\n- background-repeat  \n\n- outline-color\n- outline\n\n- outline-style\n- border-radius  \n\n- outline-width\n- box-shadow\n\n- background-size\n\n\n\n### display: none 和 visibility: hidden 有什么区别？\n\n- 通过 display: none 隐藏一个 DOM 节点，会触发重排和重绘；\n- 通过 visibility: hidden 隐藏一个 DOM 节点，只触发重绘，因为没有几何变化。\n\n\n\n### 浏览器的渲染队列是什么意思？\n\n当我们修改了元素的几何属性，导致浏览器触发重排或重绘时，它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。\n\n\n\n以下代码将会触发几次渲染？\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\n```\n\n根据前面的描述，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性。但实际上最后只触发了一次重排，这都得益于浏览器的渲染队列机制。\n\n但是如果我们像下面这样：\n\n```javascript\ndiv.style.left = '10px';\nconsole.log(div.offsetLeft);\ndiv.style.top = '10px';\nconsole.log(div.offsetTop);\ndiv.style.width = '20px';\nconsole.log(div.offsetWidth);\ndiv.style.height = '20px';\nconsole.log(div.offsetHeight);\n```\n\n这段代码就会触发4次重排+重绘，因为在 console 中请求了这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务（强制刷新队列），即使该值与操作中修改的值没关联。\n\n\n\n强制刷新队列的 style 样式请求：\n\n- offsetTop、offsetLeft、offsetWidth、offsetHeight\n- scrollTop、scrollLeft、scrollWidth、scrollHeight\n\n- clientTop、clientLeft、clientWidth、clientHeight\n- getComputedStyle()、 或者 IE 的 currentStyle\n\n\n\n我们在开发中应当避免这些能够强制刷新队列的操作。\n\n\n\n### 如何优化重排？\n\n#### 1、读写分离\n\n还是拿上面的强制刷新队列的例子，如果我们改成这样：\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\nconsole.log(div.offsetLeft);\nconsole.log(div.offsetTop);\nconsole.log(div.offsetWidth);\nconsole.log(div.offsetHeight);\n```\n\n这次只触发了一次重排，因为：在第一个 console 的时候，浏览器把之前上面四个写操作的渲染队列都给清空了；剩下的 console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。\n\n\n\n#### 2、样式集中改变\n\n将多次改变样式属性的操作合并成一次操作，减少 DOM 访问\n\n```javascript\ndiv.style.left = '10px';\ndiv.style.top = '10px';\ndiv.style.width = '20px';\ndiv.style.height = '20px';\n```\n\n优化：\n\n```javascript\nel.className += \" className\"; // 直接改变 class\n```\n\n\n\n#### 3、离线操作\n\n如果要批量添加 DOM，可以让要操作的元素进行「离线处理」，处理完后一起更新。离线处理的意思是：\n\n- 隐藏要操作的 DOM\n\n- 在要操作 DOM 之前，通过 display 属性隐藏 DOM，当操作完成之后，再将元素的 display 属性为可见，因为不可见的元素不会触发重排和重绘。\n\n- 通过使用 DocumentFragment 创建一个DOM 碎片，在它上面批量操作 DOM，操作完成之后，再添加到文档中，这样只会触发一次重排。\n\n\n\n#### 4、position 属性的应用\n\n将需要多次重排的元素，position 属性设为 absolute 或 fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。\n\n\n\n#### 5、在内存中构建\n\n在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的 html 片段，再一次性添加到文档中去，而不是直接操作 DOM，循环添加每一行。","slug":"浏览器的重排和重绘","published":1,"updated":"2023-11-07T03:36:00.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88l0037u17uhndfgcf7","content":"<h3 id=\"网页的生成过程是怎样的？\"><a href=\"#网页的生成过程是怎样的？\" class=\"headerlink\" title=\"网页的生成过程是怎样的？\"></a>网页的生成过程是怎样的？</h3><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98.png\" alt=\"img\"></p>\n<p>在这个过程中：</p>\n<ol>\n<li><p>HTML 被 HTML 解析器解析成 DOM 树</p>\n</li>\n<li><p>CSS 则被 CSS 解析器解析成 CSSOM 树</p>\n</li>\n<li><p>结合 DOM 树和 CSSOM 树，生成一棵渲染树（Render Tree）</p>\n</li>\n<li><p>生成布局（flow），即将所有渲染树的所有节点进行平面合成</p>\n</li>\n<li><p>将布局绘制（paint）在屏幕上</p>\n</li>\n</ol>\n<p>其中，第 4 步和第 5 步是最耗时的部分，这两步合起来就是我们通常所说的渲染。在网页生成的过程中，至少会渲染一次；并且，在用户操作界面的过程中，还会不断地重新渲染。也就是会不断地发生重排和重绘。</p>\n<h3 id=\"什么是重排\"><a href=\"#什么是重排\" class=\"headerlink\" title=\"什么是重排?\"></a>什么是重排?</h3><p>当渲染树 Render tree 中的一部分（或全部）因为 DOM 的变化<strong>影响了元素的几何信息</strong>（DOM 对象的位置和尺寸大小），浏览器需要重新计算元素的几何属性，并将其安放在界面中的正确位置，这个过程就称为重排（reflow），重排也叫作回流。</p>\n<h3 id=\"什么是重绘？\"><a href=\"#什么是重绘？\" class=\"headerlink\" title=\"什么是重绘？\"></a>什么是重绘？</h3><p>当渲染树 Render tree 中的一些元素需要更新属性，而这些属性<strong>只是影响元素的外观，而没有影响到布局，</strong>例如改变 visibility、outline、背景色等属性，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观，这个过程就称为重绘（repaint）。</p>\n<h3 id=\"重排与重绘的关系是怎样的？\"><a href=\"#重排与重绘的关系是怎样的？\" class=\"headerlink\" title=\"重排与重绘的关系是怎样的？\"></a>重排与重绘的关系是怎样的？</h3><p><strong>重绘不会引起重排，但重排一定会引起重绘</strong>。一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。</p>\n<h3 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h3><h4 id=\"1、触发重排的条件\"><a href=\"#1、触发重排的条件\" class=\"headerlink\" title=\"1、触发重排的条件\"></a>1、触发重排的条件</h4><ul>\n<li><p>页面渲染初始化时；（这个无法避免）</p>\n</li>\n<li><p>浏览器窗口改变尺寸；</p>\n</li>\n<li><p>元素尺寸改变时；</p>\n</li>\n<li><p>元素位置改变时；</p>\n</li>\n<li><p>元素内容改变时；</p>\n</li>\n<li><p>添加或删除可见的 DOM 元素时。</p>\n</li>\n</ul>\n<h4 id=\"2、触发重绘的条件\"><a href=\"#2、触发重绘的条件\" class=\"headerlink\" title=\"2、触发重绘的条件\"></a>2、触发重绘的条件</h4><p>常见的引起重绘的属性：</p>\n<ul>\n<li><p>color</p>\n</li>\n<li><p>border-style</p>\n</li>\n<li><p>visibility</p>\n</li>\n<li><p>background  </p>\n</li>\n<li><p>text-decoration</p>\n</li>\n<li><p>background-image</p>\n</li>\n<li><p>background-position</p>\n</li>\n<li><p>background-repeat  </p>\n</li>\n<li><p>outline-color</p>\n</li>\n<li><p>outline</p>\n</li>\n<li><p>outline-style</p>\n</li>\n<li><p>border-radius  </p>\n</li>\n<li><p>outline-width</p>\n</li>\n<li><p>box-shadow</p>\n</li>\n<li><p>background-size</p>\n</li>\n</ul>\n<h3 id=\"display-none-和-visibility-hidden-有什么区别？\"><a href=\"#display-none-和-visibility-hidden-有什么区别？\" class=\"headerlink\" title=\"display: none 和 visibility: hidden 有什么区别？\"></a>display: none 和 visibility: hidden 有什么区别？</h3><ul>\n<li>通过 display: none 隐藏一个 DOM 节点，会触发重排和重绘；</li>\n<li>通过 visibility: hidden 隐藏一个 DOM 节点，只触发重绘，因为没有几何变化。</li>\n</ul>\n<h3 id=\"浏览器的渲染队列是什么意思？\"><a href=\"#浏览器的渲染队列是什么意思？\" class=\"headerlink\" title=\"浏览器的渲染队列是什么意思？\"></a>浏览器的渲染队列是什么意思？</h3><p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时，它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。</p>\n<p>以下代码将会触发几次渲染？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据前面的描述，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性。但实际上最后只触发了一次重排，这都得益于浏览器的渲染队列机制。</p>\n<p>但是如果我们像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetLeft</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetTop</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetWidth</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetHeight</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这段代码就会触发4次重排+重绘，因为在 console 中请求了这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务（强制刷新队列），即使该值与操作中修改的值没关联。</p>\n<p>强制刷新队列的 style 样式请求：</p>\n<ul>\n<li><p>offsetTop、offsetLeft、offsetWidth、offsetHeight</p>\n</li>\n<li><p>scrollTop、scrollLeft、scrollWidth、scrollHeight</p>\n</li>\n<li><p>clientTop、clientLeft、clientWidth、clientHeight</p>\n</li>\n<li><p>getComputedStyle()、 或者 IE 的 currentStyle</p>\n</li>\n</ul>\n<p>我们在开发中应当避免这些能够强制刷新队列的操作。</p>\n<h3 id=\"如何优化重排？\"><a href=\"#如何优化重排？\" class=\"headerlink\" title=\"如何优化重排？\"></a>如何优化重排？</h3><h4 id=\"1、读写分离\"><a href=\"#1、读写分离\" class=\"headerlink\" title=\"1、读写分离\"></a>1、读写分离</h4><p>还是拿上面的强制刷新队列的例子，如果我们改成这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetLeft</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetTop</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetWidth</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetHeight</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这次只触发了一次重排，因为：在第一个 console 的时候，浏览器把之前上面四个写操作的渲染队列都给清空了；剩下的 console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。</p>\n<h4 id=\"2、样式集中改变\"><a href=\"#2、样式集中改变\" class=\"headerlink\" title=\"2、样式集中改变\"></a>2、样式集中改变</h4><p>将多次改变样式属性的操作合并成一次操作，减少 DOM 访问</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.<span class=\"property\">className</span> += <span class=\"string\">&quot; className&quot;</span>; <span class=\"comment\">// 直接改变 class</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、离线操作\"><a href=\"#3、离线操作\" class=\"headerlink\" title=\"3、离线操作\"></a>3、离线操作</h4><p>如果要批量添加 DOM，可以让要操作的元素进行「离线处理」，处理完后一起更新。离线处理的意思是：</p>\n<ul>\n<li><p>隐藏要操作的 DOM</p>\n</li>\n<li><p>在要操作 DOM 之前，通过 display 属性隐藏 DOM，当操作完成之后，再将元素的 display 属性为可见，因为不可见的元素不会触发重排和重绘。</p>\n</li>\n<li><p>通过使用 DocumentFragment 创建一个DOM 碎片，在它上面批量操作 DOM，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\n</li>\n</ul>\n<h4 id=\"4、position-属性的应用\"><a href=\"#4、position-属性的应用\" class=\"headerlink\" title=\"4、position 属性的应用\"></a>4、position 属性的应用</h4><p>将需要多次重排的元素，position 属性设为 absolute 或 fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</p>\n<h4 id=\"5、在内存中构建\"><a href=\"#5、在内存中构建\" class=\"headerlink\" title=\"5、在内存中构建\"></a>5、在内存中构建</h4><p>在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的 html 片段，再一次性添加到文档中去，而不是直接操作 DOM，循环添加每一行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"网页的生成过程是怎样的？\"><a href=\"#网页的生成过程是怎样的？\" class=\"headerlink\" title=\"网页的生成过程是怎样的？\"></a>网页的生成过程是怎样的？</h3><p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98.png\" alt=\"img\"></p>\n<p>在这个过程中：</p>\n<ol>\n<li><p>HTML 被 HTML 解析器解析成 DOM 树</p>\n</li>\n<li><p>CSS 则被 CSS 解析器解析成 CSSOM 树</p>\n</li>\n<li><p>结合 DOM 树和 CSSOM 树，生成一棵渲染树（Render Tree）</p>\n</li>\n<li><p>生成布局（flow），即将所有渲染树的所有节点进行平面合成</p>\n</li>\n<li><p>将布局绘制（paint）在屏幕上</p>\n</li>\n</ol>\n<p>其中，第 4 步和第 5 步是最耗时的部分，这两步合起来就是我们通常所说的渲染。在网页生成的过程中，至少会渲染一次；并且，在用户操作界面的过程中，还会不断地重新渲染。也就是会不断地发生重排和重绘。</p>\n<h3 id=\"什么是重排\"><a href=\"#什么是重排\" class=\"headerlink\" title=\"什么是重排?\"></a>什么是重排?</h3><p>当渲染树 Render tree 中的一部分（或全部）因为 DOM 的变化<strong>影响了元素的几何信息</strong>（DOM 对象的位置和尺寸大小），浏览器需要重新计算元素的几何属性，并将其安放在界面中的正确位置，这个过程就称为重排（reflow），重排也叫作回流。</p>\n<h3 id=\"什么是重绘？\"><a href=\"#什么是重绘？\" class=\"headerlink\" title=\"什么是重绘？\"></a>什么是重绘？</h3><p>当渲染树 Render tree 中的一些元素需要更新属性，而这些属性<strong>只是影响元素的外观，而没有影响到布局，</strong>例如改变 visibility、outline、背景色等属性，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观，这个过程就称为重绘（repaint）。</p>\n<h3 id=\"重排与重绘的关系是怎样的？\"><a href=\"#重排与重绘的关系是怎样的？\" class=\"headerlink\" title=\"重排与重绘的关系是怎样的？\"></a>重排与重绘的关系是怎样的？</h3><p><strong>重绘不会引起重排，但重排一定会引起重绘</strong>。一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。</p>\n<h3 id=\"什么情况会触发重排和重绘？\"><a href=\"#什么情况会触发重排和重绘？\" class=\"headerlink\" title=\"什么情况会触发重排和重绘？\"></a>什么情况会触发重排和重绘？</h3><h4 id=\"1、触发重排的条件\"><a href=\"#1、触发重排的条件\" class=\"headerlink\" title=\"1、触发重排的条件\"></a>1、触发重排的条件</h4><ul>\n<li><p>页面渲染初始化时；（这个无法避免）</p>\n</li>\n<li><p>浏览器窗口改变尺寸；</p>\n</li>\n<li><p>元素尺寸改变时；</p>\n</li>\n<li><p>元素位置改变时；</p>\n</li>\n<li><p>元素内容改变时；</p>\n</li>\n<li><p>添加或删除可见的 DOM 元素时。</p>\n</li>\n</ul>\n<h4 id=\"2、触发重绘的条件\"><a href=\"#2、触发重绘的条件\" class=\"headerlink\" title=\"2、触发重绘的条件\"></a>2、触发重绘的条件</h4><p>常见的引起重绘的属性：</p>\n<ul>\n<li><p>color</p>\n</li>\n<li><p>border-style</p>\n</li>\n<li><p>visibility</p>\n</li>\n<li><p>background  </p>\n</li>\n<li><p>text-decoration</p>\n</li>\n<li><p>background-image</p>\n</li>\n<li><p>background-position</p>\n</li>\n<li><p>background-repeat  </p>\n</li>\n<li><p>outline-color</p>\n</li>\n<li><p>outline</p>\n</li>\n<li><p>outline-style</p>\n</li>\n<li><p>border-radius  </p>\n</li>\n<li><p>outline-width</p>\n</li>\n<li><p>box-shadow</p>\n</li>\n<li><p>background-size</p>\n</li>\n</ul>\n<h3 id=\"display-none-和-visibility-hidden-有什么区别？\"><a href=\"#display-none-和-visibility-hidden-有什么区别？\" class=\"headerlink\" title=\"display: none 和 visibility: hidden 有什么区别？\"></a>display: none 和 visibility: hidden 有什么区别？</h3><ul>\n<li>通过 display: none 隐藏一个 DOM 节点，会触发重排和重绘；</li>\n<li>通过 visibility: hidden 隐藏一个 DOM 节点，只触发重绘，因为没有几何变化。</li>\n</ul>\n<h3 id=\"浏览器的渲染队列是什么意思？\"><a href=\"#浏览器的渲染队列是什么意思？\" class=\"headerlink\" title=\"浏览器的渲染队列是什么意思？\"></a>浏览器的渲染队列是什么意思？</h3><p>当我们修改了元素的几何属性，导致浏览器触发重排或重绘时，它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。</p>\n<p>以下代码将会触发几次渲染？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据前面的描述，这段代码理论上会触发4次重排+重绘，因为每一次都改变了元素的几何属性。但实际上最后只触发了一次重排，这都得益于浏览器的渲染队列机制。</p>\n<p>但是如果我们像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetLeft</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetTop</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetWidth</span>);</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetHeight</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这段代码就会触发4次重排+重绘，因为在 console 中请求了这几个样式信息，无论何时浏览器都会立即执行渲染队列的任务（强制刷新队列），即使该值与操作中修改的值没关联。</p>\n<p>强制刷新队列的 style 样式请求：</p>\n<ul>\n<li><p>offsetTop、offsetLeft、offsetWidth、offsetHeight</p>\n</li>\n<li><p>scrollTop、scrollLeft、scrollWidth、scrollHeight</p>\n</li>\n<li><p>clientTop、clientLeft、clientWidth、clientHeight</p>\n</li>\n<li><p>getComputedStyle()、 或者 IE 的 currentStyle</p>\n</li>\n</ul>\n<p>我们在开发中应当避免这些能够强制刷新队列的操作。</p>\n<h3 id=\"如何优化重排？\"><a href=\"#如何优化重排？\" class=\"headerlink\" title=\"如何优化重排？\"></a>如何优化重排？</h3><h4 id=\"1、读写分离\"><a href=\"#1、读写分离\" class=\"headerlink\" title=\"1、读写分离\"></a>1、读写分离</h4><p>还是拿上面的强制刷新队列的例子，如果我们改成这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetLeft</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetTop</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetWidth</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">offsetHeight</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这次只触发了一次重排，因为：在第一个 console 的时候，浏览器把之前上面四个写操作的渲染队列都给清空了；剩下的 console，因为渲染队列本来就是空的，所以并没有触发重排，仅仅拿值而已。</p>\n<h4 id=\"2、样式集中改变\"><a href=\"#2、样式集中改变\" class=\"headerlink\" title=\"2、样式集中改变\"></a>2、样式集中改变</h4><p>将多次改变样式属性的操作合并成一次操作，减少 DOM 访问</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;10px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">div.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.<span class=\"property\">className</span> += <span class=\"string\">&quot; className&quot;</span>; <span class=\"comment\">// 直接改变 class</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、离线操作\"><a href=\"#3、离线操作\" class=\"headerlink\" title=\"3、离线操作\"></a>3、离线操作</h4><p>如果要批量添加 DOM，可以让要操作的元素进行「离线处理」，处理完后一起更新。离线处理的意思是：</p>\n<ul>\n<li><p>隐藏要操作的 DOM</p>\n</li>\n<li><p>在要操作 DOM 之前，通过 display 属性隐藏 DOM，当操作完成之后，再将元素的 display 属性为可见，因为不可见的元素不会触发重排和重绘。</p>\n</li>\n<li><p>通过使用 DocumentFragment 创建一个DOM 碎片，在它上面批量操作 DOM，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\n</li>\n</ul>\n<h4 id=\"4、position-属性的应用\"><a href=\"#4、position-属性的应用\" class=\"headerlink\" title=\"4、position 属性的应用\"></a>4、position 属性的应用</h4><p>将需要多次重排的元素，position 属性设为 absolute 或 fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</p>\n<h4 id=\"5、在内存中构建\"><a href=\"#5、在内存中构建\" class=\"headerlink\" title=\"5、在内存中构建\"></a>5、在内存中构建</h4><p>在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的 html 片段，再一次性添加到文档中去，而不是直接操作 DOM，循环添加每一行。</p>\n"},{"title":"清除浮动的几种方式","date":"2021-07-21T16:00:00.000Z","_content":"1. 额外标签法：在最后一个浮动标签后，新加一个标签，给其设置clear：both；\n\n\n\n2. 父级添加overflow属性：父元素添加overflow:hidden/auto;\n\n   \n\n3. 使用after伪元素清除浮动：\n\n```\n优点：符合闭合浮动思想，结构语义化正确\n\n缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.\n    .clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/\n        content: \"\";\n        display: block;\n        clear:both;\n    }\n    .clearfix{\n        zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/\n    }\n \n<body>\n    <div class=\"father clearfix\">\n        <div class=\"big\">big</div>\n        <div class=\"small\">small</div>\n        <!--<div class=\"clear\">额外标签法</div>-->\n    </div>\n    <div class=\"footer\"></div>\n```\n\n优点：符合闭合浮动思想，结构语义化正确。\n\n缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout。\n\n\n\n4. 父级div定义height；\n\n   \n\n5. 父级div也一起浮动；\n\n\n\n\n### 追本溯源\n\n#### 1.为什么要用浮动？\n\n以前提出浮动的概念，主要是为了解决左边图片右边文字的需求，后来浮动在网页布局上应用比较广泛。\n\n\n\n#### 2.什么情况又要清除浮动？\n\n当子元素都设置浮动之后，而父元素本身又没有设置宽高（设置浮动前宽高是由子元素撑起来的），会导致父元素的高度塌陷，原来被撑起来的height被置为0，最终就会影响父元素的布局。\n\n说到底，就是因为所有的子元素都浮动，会导致父元素高度坍塌影响布局。在这种情况下，就要清除浮动。","source":"_posts/清除浮动的几种方式.md","raw":"---\ntitle: 清除浮动的几种方式\n\ndate: 2021-07-22\n\ntags: [浮动]\n\ncategories: css\n---\n1. 额外标签法：在最后一个浮动标签后，新加一个标签，给其设置clear：both；\n\n\n\n2. 父级添加overflow属性：父元素添加overflow:hidden/auto;\n\n   \n\n3. 使用after伪元素清除浮动：\n\n```\n优点：符合闭合浮动思想，结构语义化正确\n\n缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.\n    .clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/\n        content: \"\";\n        display: block;\n        clear:both;\n    }\n    .clearfix{\n        zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/\n    }\n \n<body>\n    <div class=\"father clearfix\">\n        <div class=\"big\">big</div>\n        <div class=\"small\">small</div>\n        <!--<div class=\"clear\">额外标签法</div>-->\n    </div>\n    <div class=\"footer\"></div>\n```\n\n优点：符合闭合浮动思想，结构语义化正确。\n\n缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout。\n\n\n\n4. 父级div定义height；\n\n   \n\n5. 父级div也一起浮动；\n\n\n\n\n### 追本溯源\n\n#### 1.为什么要用浮动？\n\n以前提出浮动的概念，主要是为了解决左边图片右边文字的需求，后来浮动在网页布局上应用比较广泛。\n\n\n\n#### 2.什么情况又要清除浮动？\n\n当子元素都设置浮动之后，而父元素本身又没有设置宽高（设置浮动前宽高是由子元素撑起来的），会导致父元素的高度塌陷，原来被撑起来的height被置为0，最终就会影响父元素的布局。\n\n说到底，就是因为所有的子元素都浮动，会导致父元素高度坍塌影响布局。在这种情况下，就要清除浮动。","slug":"清除浮动的几种方式","published":1,"updated":"2023-11-07T03:36:00.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88m003cu17uedcofli2","content":"<ol>\n<li>额外标签法：在最后一个浮动标签后，新加一个标签，给其设置clear：both；</li>\n</ol>\n<ol start=\"2\">\n<li><p>父级添加overflow属性：父元素添加overflow:hidden/auto;</p>\n</li>\n<li><p>使用after伪元素清除浮动：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优点：符合闭合浮动思想，结构语义化正确</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.</span><br><span class=\"line\">    .clearfix:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br><span class=\"line\">        content: &quot;&quot;;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        clear:both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .clearfix&#123;</span><br><span class=\"line\">        zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;father clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class=\"line\">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：符合闭合浮动思想，结构语义化正确。</p>\n<p>缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout。</p>\n<ol start=\"4\">\n<li><p>父级div定义height；</p>\n</li>\n<li><p>父级div也一起浮动；</p>\n</li>\n</ol>\n<h3 id=\"追本溯源\"><a href=\"#追本溯源\" class=\"headerlink\" title=\"追本溯源\"></a>追本溯源</h3><h4 id=\"1-为什么要用浮动？\"><a href=\"#1-为什么要用浮动？\" class=\"headerlink\" title=\"1.为什么要用浮动？\"></a>1.为什么要用浮动？</h4><p>以前提出浮动的概念，主要是为了解决左边图片右边文字的需求，后来浮动在网页布局上应用比较广泛。</p>\n<h4 id=\"2-什么情况又要清除浮动？\"><a href=\"#2-什么情况又要清除浮动？\" class=\"headerlink\" title=\"2.什么情况又要清除浮动？\"></a>2.什么情况又要清除浮动？</h4><p>当子元素都设置浮动之后，而父元素本身又没有设置宽高（设置浮动前宽高是由子元素撑起来的），会导致父元素的高度塌陷，原来被撑起来的height被置为0，最终就会影响父元素的布局。</p>\n<p>说到底，就是因为所有的子元素都浮动，会导致父元素高度坍塌影响布局。在这种情况下，就要清除浮动。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>额外标签法：在最后一个浮动标签后，新加一个标签，给其设置clear：both；</li>\n</ol>\n<ol start=\"2\">\n<li><p>父级添加overflow属性：父元素添加overflow:hidden/auto;</p>\n</li>\n<li><p>使用after伪元素清除浮动：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优点：符合闭合浮动思想，结构语义化正确</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.</span><br><span class=\"line\">    .clearfix:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br><span class=\"line\">        content: &quot;&quot;;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        clear:both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .clearfix&#123;</span><br><span class=\"line\">        zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;father clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class=\"line\">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：符合闭合浮动思想，结构语义化正确。</p>\n<p>缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout。</p>\n<ol start=\"4\">\n<li><p>父级div定义height；</p>\n</li>\n<li><p>父级div也一起浮动；</p>\n</li>\n</ol>\n<h3 id=\"追本溯源\"><a href=\"#追本溯源\" class=\"headerlink\" title=\"追本溯源\"></a>追本溯源</h3><h4 id=\"1-为什么要用浮动？\"><a href=\"#1-为什么要用浮动？\" class=\"headerlink\" title=\"1.为什么要用浮动？\"></a>1.为什么要用浮动？</h4><p>以前提出浮动的概念，主要是为了解决左边图片右边文字的需求，后来浮动在网页布局上应用比较广泛。</p>\n<h4 id=\"2-什么情况又要清除浮动？\"><a href=\"#2-什么情况又要清除浮动？\" class=\"headerlink\" title=\"2.什么情况又要清除浮动？\"></a>2.什么情况又要清除浮动？</h4><p>当子元素都设置浮动之后，而父元素本身又没有设置宽高（设置浮动前宽高是由子元素撑起来的），会导致父元素的高度塌陷，原来被撑起来的height被置为0，最终就会影响父元素的布局。</p>\n<p>说到底，就是因为所有的子元素都浮动，会导致父元素高度坍塌影响布局。在这种情况下，就要清除浮动。</p>\n"},{"title":"观察者模式和发布订阅模式","date":"2021-07-31T16:00:00.000Z","_content":"发布订阅模式属于广义上的观察者模式\n发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。\n\n发布订阅模式多了个事件通道\n在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png)\n\n在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png)\n\n","source":"_posts/观察者模式和发布订阅模式.md","raw":"---\ntitle: 观察者模式和发布订阅模式\n\ndate: 2021-08-01\n\ntags: [观察者模式,发布订阅模式]\n\ncategories: 设计模式\n---\n发布订阅模式属于广义上的观察者模式\n发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。\n\n发布订阅模式多了个事件通道\n在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png)\n\n在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。\n\n![](https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png)\n\n","slug":"观察者模式和发布订阅模式","published":1,"updated":"2023-11-07T03:36:00.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88n003eu17ucohd0vjq","content":"<p>发布订阅模式属于广义上的观察者模式<br>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。</p>\n<p>发布订阅模式多了个事件通道<br>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\"></p>\n<p>在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>发布订阅模式属于广义上的观察者模式<br>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。</p>\n<p>发布订阅模式多了个事件通道<br>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png\"></p>\n<p>在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件，以此避免发布者和订阅者之间产生依赖关系。</p>\n<p><img src=\"https://raw.githubusercontent.com/whpuEdison/blog/master/static/images/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\"></p>\n"},{"title":"词法作用域和动态作用域","date":"2021-08-07T16:00:00.000Z","_content":"\n### 作用域\n\n作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\n\n\n\nES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。\n\n\n\n作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。\n\n### 作用域链\n\n一般情况下，变量取值到创建这个变量的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。\n\n\n\n### 静态作用域与动态作用域\n\nJavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。\n\n```javascript\nvar value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar(); // 1\n```\n\n假设JavaScript采用静态作用域，让我们分析下执行过程：\n\n执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。\n\n\n\n假设JavaScript采用动态作用域，让我们分析下执行过程：\n\n执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。\n\n\n\n前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。\n\n### 思考题\n\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope(); // local scope\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()(); // local scope\n```\n\n原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。\n\n\n\nJavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。","source":"_posts/词法作用域和动态作用域.md","raw":"---\ntitle: 词法作用域和动态作用域\n\ndate: 2021-08-08\n\ntags: [作用域]\n\ncategories: javascript\n---\n\n### 作用域\n\n作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\n\n\n\nES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。\n\n\n\n作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。\n\n### 作用域链\n\n一般情况下，变量取值到创建这个变量的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。\n\n\n\n### 静态作用域与动态作用域\n\nJavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。\n\n```javascript\nvar value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar(); // 1\n```\n\n假设JavaScript采用静态作用域，让我们分析下执行过程：\n\n执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。\n\n\n\n假设JavaScript采用动态作用域，让我们分析下执行过程：\n\n执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。\n\n\n\n前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。\n\n### 思考题\n\n```javascript\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope(); // local scope\nvar scope = \"global scope\";\nfunction checkscope(){\n    var scope = \"local scope\";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()(); // local scope\n```\n\n原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。\n\n\n\nJavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。","slug":"词法作用域和动态作用域","published":1,"updated":"2023-11-07T03:36:00.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clonzz88o003gu17uhh8ofrzz","content":"<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p>\n<p>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。</p>\n<p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>一般情况下，变量取值到创建这个变量的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p>\n<h3 id=\"静态作用域与动态作用域\"><a href=\"#静态作用域与动态作用域\" class=\"headerlink\" title=\"静态作用域与动态作用域\"></a>静态作用域与动态作用域</h3><p>JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>\n<p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p>\n<p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;global scope&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkscope</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;local scope&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">f</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">checkscope</span>(); <span class=\"comment\">// local scope</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;global scope&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkscope</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;local scope&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">checkscope</span>()(); <span class=\"comment\">// local scope</span></span><br></pre></td></tr></table></figure>\n\n<p>原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。</p>\n<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p>\n<p>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。</p>\n<p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>一般情况下，变量取值到创建这个变量的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p>\n<h3 id=\"静态作用域与动态作用域\"><a href=\"#静态作用域与动态作用域\" class=\"headerlink\" title=\"静态作用域与动态作用域\"></a>静态作用域与动态作用域</h3><p>JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>\n<p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p>\n<p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p>\n<p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;global scope&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkscope</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;local scope&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">f</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">checkscope</span>(); <span class=\"comment\">// local scope</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;global scope&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkscope</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">&quot;local scope&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scope;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">checkscope</span>()(); <span class=\"comment\">// local scope</span></span><br></pre></td></tr></table></figure>\n\n<p>原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。</p>\n<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clonzz87k0007u17u76zu7tzh","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz87o000du17ub2p3dqm8"},{"post_id":"clonzz87b0001u17u1fkdddor","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz87p000hu17u5rj6hvco"},{"post_id":"clonzz87f0003u17ufrph1llo","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz87q000lu17ub9d7baoo"},{"post_id":"clonzz87j0006u17ug009c9g4","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz87t000ru17ufxsn0ywm"},{"post_id":"clonzz87l0008u17u3vbla8qk","category_id":"clonzz87q000ku17udmcjbbi4","_id":"clonzz87v000xu17uevy4gn1d"},{"post_id":"clonzz87n000bu17u5eyx6j12","category_id":"clonzz87t000su17u4tpyduyl","_id":"clonzz87x0013u17u8lm60duv"},{"post_id":"clonzz87w000zu17u03go1xn6","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz87z0018u17uhga51rsn"},{"post_id":"clonzz87n000cu17u78zihx76","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz880001cu17u1ttxdbvj"},{"post_id":"clonzz87x0012u17u1i7z6a68","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz881001fu17uf4ju9te1"},{"post_id":"clonzz87y0015u17u39x6fj4i","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz882001ju17u2rovgyo4"},{"post_id":"clonzz87p000gu17u7tssa1c6","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz883001mu17u27p9avra"},{"post_id":"clonzz87z0017u17u80og4rim","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz884001qu17u8um24vql"},{"post_id":"clonzz880001bu17ubb3o93ue","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz885001su17ug5gw0gz3"},{"post_id":"clonzz87q000ju17ua6eq1rw1","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz886001xu17u4xpvbp4v"},{"post_id":"clonzz881001eu17uan6oanmz","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz887001zu17uhk1c6saw"},{"post_id":"clonzz882001iu17u7nnpc1tq","category_id":"clonzz87t000su17u4tpyduyl","_id":"clonzz8880023u17u1464fare"},{"post_id":"clonzz87r000ou17u41ylcd1i","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz8890026u17uc5nk5sat"},{"post_id":"clonzz884001pu17u7x8pb6oc","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz88a002au17uhh7ra3qb"},{"post_id":"clonzz87s000qu17uattze05x","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz88a002du17ugbrl6fnh"},{"post_id":"clonzz87u000uu17u30sgho73","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz88d002gu17u4u7d2bjp"},{"post_id":"clonzz87v000wu17u5msn1xi9","category_id":"clonzz87v000yu17u9lzohk69","_id":"clonzz88e002ju17uhxyl57wu"},{"post_id":"clonzz8880025u17u6ugs044j","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz88f002lu17ub0sr2cv1"},{"post_id":"clonzz8890029u17uewyzd3fv","category_id":"clonzz87t000su17u4tpyduyl","_id":"clonzz88g002qu17ubagffwr7"},{"post_id":"clonzz88a002cu17ubmpe2vow","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz88h002tu17uhvo7aioi"},{"post_id":"clonzz883001lu17u9mn18r29","category_id":"clonzz8890028u17u2wwq447o","_id":"clonzz88i002yu17u62fn50f2"},{"post_id":"clonzz88d002iu17u4inufejq","category_id":"clonzz87t000su17u4tpyduyl","_id":"clonzz88j0031u17u5vgl2bvr"},{"post_id":"clonzz884001ru17ub6y7fmhe","category_id":"clonzz88d002hu17ug02v4p5s","_id":"clonzz88k0035u17uct4r2x3c"},{"post_id":"clonzz88f002pu17uaz6d2rs6","category_id":"clonzz87t000su17u4tpyduyl","_id":"clonzz88l0038u17uabp9dgk1"},{"post_id":"clonzz885001wu17u5t4d2su0","category_id":"clonzz88f002nu17ucj75fzwl","_id":"clonzz88n003du17u804c0rwh"},{"post_id":"clonzz88g002su17uehkg0hfq","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz88o003fu17uggfo9v1j"},{"post_id":"clonzz88h002xu17u8ptwb41t","category_id":"clonzz88f002nu17ucj75fzwl","_id":"clonzz88o003hu17u6r4o476n"},{"post_id":"clonzz886001yu17u888fbtxn","category_id":"clonzz88h002vu17ubr8mgiq7","_id":"clonzz88p003lu17u2ur769e0"},{"post_id":"clonzz88i0030u17uaqhobhr8","category_id":"clonzz88d002hu17ug02v4p5s","_id":"clonzz88p003nu17u9n6y4emz"},{"post_id":"clonzz88j0034u17u6qxe4x3d","category_id":"clonzz88d002hu17ug02v4p5s","_id":"clonzz88q003qu17u4jlr7ixs"},{"post_id":"clonzz8870022u17u4w06b5kc","category_id":"clonzz88f002nu17ucj75fzwl","_id":"clonzz88r003su17u4we20w8e"},{"post_id":"clonzz88l0037u17uhndfgcf7","category_id":"clonzz88d002hu17ug02v4p5s","_id":"clonzz88s003vu17u0549f45m"},{"post_id":"clonzz88b002fu17udghy0b6s","category_id":"clonzz88m003au17u13gecpzw","_id":"clonzz88s003xu17u7abbd7zr"},{"post_id":"clonzz88o003gu17uhh8ofrzz","category_id":"clonzz87g0004u17u2u82heks","_id":"clonzz88s003zu17u4h4a04g9"},{"post_id":"clonzz88e002ku17u6p9y3y0r","category_id":"clonzz88m003au17u13gecpzw","_id":"clonzz88t0041u17u0biqb5qc"},{"post_id":"clonzz88m003cu17uedcofli2","category_id":"clonzz88p003ou17uhubz1n3v","_id":"clonzz88t0042u17u1qzz0qch"},{"post_id":"clonzz88n003eu17ucohd0vjq","category_id":"clonzz88s003tu17u0e1lcwfe","_id":"clonzz88t0045u17u4myk3lul"}],"PostTag":[{"post_id":"clonzz87b0001u17u1fkdddor","tag_id":"clonzz87i0005u17udqau1rel","_id":"clonzz87p000iu17ub8xq6cbq"},{"post_id":"clonzz87b0001u17u1fkdddor","tag_id":"clonzz87l000au17u9jcq7nb8","_id":"clonzz87q000mu17u1i0v14vq"},{"post_id":"clonzz87f0003u17ufrph1llo","tag_id":"clonzz87o000fu17uht47drth","_id":"clonzz87s000pu17u427lhpep"},{"post_id":"clonzz87j0006u17ug009c9g4","tag_id":"clonzz87r000nu17u8icg072q","_id":"clonzz87u000vu17ugbt79zun"},{"post_id":"clonzz87k0007u17u76zu7tzh","tag_id":"clonzz87u000tu17u2dcpd3v5","_id":"clonzz87x0011u17u9qhx8ys4"},{"post_id":"clonzz87l0008u17u3vbla8qk","tag_id":"clonzz87w0010u17u7ojo84b6","_id":"clonzz87z0019u17u18ax6kvo"},{"post_id":"clonzz87n000bu17u5eyx6j12","tag_id":"clonzz87y0016u17ua77d2h3s","_id":"clonzz881001gu17u6org7sue"},{"post_id":"clonzz87n000cu17u78zihx76","tag_id":"clonzz881001du17u8txgf6qh","_id":"clonzz883001nu17ug3et7xbb"},{"post_id":"clonzz87p000gu17u7tssa1c6","tag_id":"clonzz882001ku17ud0bxd7ex","_id":"clonzz885001vu17ubnt6e41z"},{"post_id":"clonzz87q000ju17ua6eq1rw1","tag_id":"clonzz885001tu17udh1v77gc","_id":"clonzz8880024u17ucqlu715a"},{"post_id":"clonzz87r000ou17u41ylcd1i","tag_id":"clonzz8870020u17uh1eq66xy","_id":"clonzz88a002bu17u88s8gyh2"},{"post_id":"clonzz88d002iu17u4inufejq","tag_id":"clonzz87y0016u17ua77d2h3s","_id":"clonzz88f002ou17uccuz1b4h"},{"post_id":"clonzz87s000qu17uattze05x","tag_id":"clonzz8890027u17u6yy25gdk","_id":"clonzz88g002ru17uhep62084"},{"post_id":"clonzz87s000qu17uattze05x","tag_id":"clonzz88b002eu17uayi4az5b","_id":"clonzz88h002wu17udub95h42"},{"post_id":"clonzz87u000uu17u30sgho73","tag_id":"clonzz88f002mu17u7n5qbtlc","_id":"clonzz88i002zu17u24eqbh2t"},{"post_id":"clonzz87v000wu17u5msn1xi9","tag_id":"clonzz88h002uu17u12775mpt","_id":"clonzz88l0036u17uabz83c7y"},{"post_id":"clonzz88i0030u17uaqhobhr8","tag_id":"clonzz87w0010u17u7ojo84b6","_id":"clonzz88m0039u17u4wdo9u5z"},{"post_id":"clonzz87w000zu17u03go1xn6","tag_id":"clonzz88j0032u17u842z62ho","_id":"clonzz88p003ku17ufywchw3q"},{"post_id":"clonzz87w000zu17u03go1xn6","tag_id":"clonzz88m003bu17u63jw1i4r","_id":"clonzz88p003mu17u5jpxbl44"},{"post_id":"clonzz87x0012u17u1i7z6a68","tag_id":"clonzz88p003ju17u5ta70gdm","_id":"clonzz88q003ru17udnqcdgkm"},{"post_id":"clonzz87y0015u17u39x6fj4i","tag_id":"clonzz88q003pu17u59dtfhda","_id":"clonzz88s003wu17uer2f9029"},{"post_id":"clonzz87z0017u17u80og4rim","tag_id":"clonzz88s003uu17udb9m6vyl","_id":"clonzz88t0040u17ug24gfm0q"},{"post_id":"clonzz880001bu17ubb3o93ue","tag_id":"clonzz88s003yu17uabgw21i1","_id":"clonzz88t0044u17u63yb9gr6"},{"post_id":"clonzz881001eu17uan6oanmz","tag_id":"clonzz88t0043u17uf73n51k2","_id":"clonzz88u0048u17u6hn304rb"},{"post_id":"clonzz881001eu17uan6oanmz","tag_id":"clonzz88t0046u17ubrvjdsf2","_id":"clonzz88u0049u17u2nffagr8"},{"post_id":"clonzz882001iu17u7nnpc1tq","tag_id":"clonzz88u0047u17udkac0fdn","_id":"clonzz88u004cu17uc2dib8at"},{"post_id":"clonzz882001iu17u7nnpc1tq","tag_id":"clonzz88u004au17u9bzo8exm","_id":"clonzz88v004du17uab24g8x0"},{"post_id":"clonzz883001lu17u9mn18r29","tag_id":"clonzz88u004bu17uat2og3m0","_id":"clonzz88v004gu17uhzgrbkmn"},{"post_id":"clonzz883001lu17u9mn18r29","tag_id":"clonzz88v004eu17uc13ibf2b","_id":"clonzz88v004hu17ua933dpcj"},{"post_id":"clonzz884001pu17u7x8pb6oc","tag_id":"clonzz88v004fu17u7pab3gkr","_id":"clonzz88v004ju17ubjzpbvcs"},{"post_id":"clonzz884001ru17ub6y7fmhe","tag_id":"clonzz88v004iu17u8ftugzar","_id":"clonzz88w004lu17u2tjtaxml"},{"post_id":"clonzz885001wu17u5t4d2su0","tag_id":"clonzz88v004ku17uf0q7ednh","_id":"clonzz88w004nu17ueqkqal0j"},{"post_id":"clonzz886001yu17u888fbtxn","tag_id":"clonzz88w004mu17u5gks0b17","_id":"clonzz88w004pu17u2yaj6a51"},{"post_id":"clonzz8870022u17u4w06b5kc","tag_id":"clonzz88w004ou17ucnv2dpuw","_id":"clonzz88w004ru17uek7426w3"},{"post_id":"clonzz8880025u17u6ugs044j","tag_id":"clonzz88w004qu17ubret3u7p","_id":"clonzz88x004tu17u0o3sduza"},{"post_id":"clonzz8890029u17uewyzd3fv","tag_id":"clonzz88x004su17u4tn46zyn","_id":"clonzz88x004vu17u85unct92"},{"post_id":"clonzz88a002cu17ubmpe2vow","tag_id":"clonzz88x004uu17udtjyb4ue","_id":"clonzz88x004xu17u3pmccqpf"},{"post_id":"clonzz88b002fu17udghy0b6s","tag_id":"clonzz88x004wu17u2lq51urs","_id":"clonzz8920050u17u1glb5coa"},{"post_id":"clonzz88b002fu17udghy0b6s","tag_id":"clonzz88x004yu17u00k4a3rl","_id":"clonzz8920051u17uborhgplg"},{"post_id":"clonzz88e002ku17u6p9y3y0r","tag_id":"clonzz88x004zu17ucbofgybq","_id":"clonzz8930053u17uf8w81vke"},{"post_id":"clonzz88f002pu17uaz6d2rs6","tag_id":"clonzz88u0047u17udkac0fdn","_id":"clonzz8930055u17u252vhktj"},{"post_id":"clonzz88g002su17uehkg0hfq","tag_id":"clonzz8930054u17uf7z7byrg","_id":"clonzz8930058u17u3z1360op"},{"post_id":"clonzz88g002su17uehkg0hfq","tag_id":"clonzz8930056u17u4jbde0ll","_id":"clonzz8930059u17udf1te82t"},{"post_id":"clonzz88h002xu17u8ptwb41t","tag_id":"clonzz8930057u17uhsdp80i7","_id":"clonzz894005cu17udc2w79x8"},{"post_id":"clonzz88h002xu17u8ptwb41t","tag_id":"clonzz893005au17ug01y4wuf","_id":"clonzz894005du17uaa1z2jj0"},{"post_id":"clonzz88j0034u17u6qxe4x3d","tag_id":"clonzz894005bu17uby8rgudj","_id":"clonzz894005gu17u6woaar71"},{"post_id":"clonzz88j0034u17u6qxe4x3d","tag_id":"clonzz894005eu17ud64h4vpe","_id":"clonzz894005hu17u8g90gr3e"},{"post_id":"clonzz88l0037u17uhndfgcf7","tag_id":"clonzz894005fu17ufir82y8f","_id":"clonzz895005ku17udcy78lkv"},{"post_id":"clonzz88l0037u17uhndfgcf7","tag_id":"clonzz894005iu17u41z9fp8e","_id":"clonzz895005lu17ud6td3qer"},{"post_id":"clonzz88m003cu17uedcofli2","tag_id":"clonzz895005ju17u77r6a58i","_id":"clonzz895005nu17ufxs562ky"},{"post_id":"clonzz88n003eu17ucohd0vjq","tag_id":"clonzz895005mu17u9vyh6y8g","_id":"clonzz896005qu17uhff29ivg"},{"post_id":"clonzz88n003eu17ucohd0vjq","tag_id":"clonzz895005ou17ufhe6aloj","_id":"clonzz896005ru17udvh07g9h"},{"post_id":"clonzz88o003gu17uhh8ofrzz","tag_id":"clonzz895005pu17ugzjgdg46","_id":"clonzz896005su17udxmihspv"}],"Tag":[{"name":"原型","_id":"clonzz87i0005u17udqau1rel"},{"name":"原型链","_id":"clonzz87l000au17u9jcq7nb8"},{"name":"闭包","_id":"clonzz87o000fu17uht47drth"},{"name":"AST","_id":"clonzz87r000nu17u8icg072q"},{"name":"垃圾回收机制","_id":"clonzz87u000tu17u2dcpd3v5"},{"name":"事件循环","_id":"clonzz87w0010u17u7ojo84b6"},{"name":"loader","_id":"clonzz87y0016u17ua77d2h3s"},{"name":"Virtual DOM","_id":"clonzz881001du17u8txgf6qh"},{"name":"nextTick","_id":"clonzz882001ku17ud0bxd7ex"},{"name":"patch","_id":"clonzz885001tu17udh1v77gc"},{"name":"render","_id":"clonzz8870020u17uh1eq66xy"},{"name":"v-model","_id":"clonzz8890027u17u6yy25gdk"},{"name":"双向绑定","_id":"clonzz88b002eu17uayi4az5b"},{"name":"事件中心","_id":"clonzz88f002mu17u7n5qbtlc"},{"name":"依赖收集","_id":"clonzz88h002uu17u12775mpt"},{"name":"数组","_id":"clonzz88j0032u17u842z62ho"},{"name":"响应式","_id":"clonzz88m003bu17u63jw1i4r"},{"name":"派发更新","_id":"clonzz88p003ju17u5ta70gdm"},{"name":"渲染","_id":"clonzz88q003pu17u59dtfhda"},{"name":"组件通信","_id":"clonzz88s003uu17udb9m6vyl"},{"name":"编译","_id":"clonzz88s003yu17uabgw21i1"},{"name":"typeof","_id":"clonzz88t0043u17uf73n51k2"},{"name":"instanceof","_id":"clonzz88t0046u17ubrvjdsf2"},{"name":"webpack","_id":"clonzz88u0047u17udkac0fdn"},{"name":"性能优化","_id":"clonzz88u004au17u9bzo8exm"},{"name":"三次握手","_id":"clonzz88u004bu17uat2og3m0"},{"name":"四次挥手","_id":"clonzz88v004eu17uc13ibf2b"},{"name":"事件委托","_id":"clonzz88v004fu17u7pab3gkr"},{"name":"页面加载","_id":"clonzz88v004iu17u8ftugzar"},{"name":"数据结构","_id":"clonzz88v004ku17uf0q7ednh"},{"name":"语义化","_id":"clonzz88w004mu17u5gks0b17"},{"name":"排序","_id":"clonzz88w004ou17ucnv2dpuw"},{"name":"import","_id":"clonzz88w004qu17ubret3u7p"},{"name":"plugin","_id":"clonzz88x004su17u4tn46zyn"},{"name":"Promise","_id":"clonzz88x004uu17udtjyb4ue"},{"name":"Proxy","_id":"clonzz88x004wu17u2lq51urs"},{"name":"跨域","_id":"clonzz88x004yu17u00k4a3rl"},{"name":"爬虫","_id":"clonzz88x004zu17ucbofgybq"},{"name":"防抖","_id":"clonzz8930054u17uf7z7byrg"},{"name":"节流","_id":"clonzz8930056u17u4jbde0ll"},{"name":"时间复杂度","_id":"clonzz8930057u17uhsdp80i7"},{"name":"空间复杂度","_id":"clonzz893005au17ug01y4wuf"},{"name":"进程","_id":"clonzz894005bu17uby8rgudj"},{"name":"线程","_id":"clonzz894005eu17ud64h4vpe"},{"name":"重排","_id":"clonzz894005fu17ufir82y8f"},{"name":"重绘","_id":"clonzz894005iu17u41z9fp8e"},{"name":"浮动","_id":"clonzz895005ju17u77r6a58i"},{"name":"观察者模式","_id":"clonzz895005mu17u9vyh6y8g"},{"name":"发布订阅模式","_id":"clonzz895005ou17ufhe6aloj"},{"name":"作用域","_id":"clonzz895005pu17ugzjgdg46"}]}}